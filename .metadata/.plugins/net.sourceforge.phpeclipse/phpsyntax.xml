<?xml version="1.0" encoding="UTF-8"?>
<PHPStandardSyntax><phpsyntax function="class_exists" usage="bool class_exists(string classname [, bool autoload])">Checks if the class exists</phpsyntax><phpsyntax function="create_function" usage="string create_function(string args, string code)">Creates an anonymous function, and returns its name (funny, eh?)</phpsyntax><phpsyntax function="debug_backtrace" usage="array debug_backtrace(void)">Return backtrace as array</phpsyntax><phpsyntax function="debug_print_backtrace" usage="void debug_print_backtrace(void)"/><phpsyntax function="define" usage="bool define(string constant_name, mixed value, case_sensitive=true)">Define a new constant</phpsyntax><phpsyntax function="defined" usage="bool defined(string constant_name)">Check whether a constant exists</phpsyntax><phpsyntax function="each" usage="array each(array arr)">Return the currently pointed key..value pair in the passed array, and advance the pointer to the next element</phpsyntax><phpsyntax function="error_reporting" usage="int error_reporting(int new_error_level=null)">Return the current error_reporting level, and if an argument was passed - change to the new level</phpsyntax><phpsyntax function="extension_loaded" usage="bool extension_loaded(string extension_name)">Returns true if the named extension is loaded</phpsyntax><phpsyntax function="func_get_arg" usage="mixed func_get_arg(int arg_num)">Get the $arg_num'th argument that was passed to the function</phpsyntax><phpsyntax function="func_get_args" usage="array func_get_args()">Get an array of the arguments that were passed to the function</phpsyntax><phpsyntax function="func_num_args" usage="int func_num_args(void)">Get the number of arguments that were passed to the function</phpsyntax><phpsyntax function="function_exists" usage="bool function_exists(string function_name)">Checks if the function exists</phpsyntax><phpsyntax function="get_class" usage="string get_class([object object])">Retrieves the class name</phpsyntax><phpsyntax function="get_class_methods" usage="array get_class_methods(mixed class)">Returns an array of method names for class or class instance.</phpsyntax><phpsyntax function="get_class_vars" usage="array get_class_vars(string class_name)">Returns an array of default properties of the class</phpsyntax><phpsyntax function="get_declared_classes" usage="array get_declared_classes()">Returns an array of all declared classes.</phpsyntax><phpsyntax function="get_declared_interfaces" usage="array get_declared_interfaces()">Returns an array of all declared interfaces.</phpsyntax><phpsyntax function="get_defined_constants" usage="array get_defined_constants(void)">Return an array containing the names and values of all defined constants</phpsyntax><phpsyntax function="get_defined_functions" usage="array get_defined_functions(void)">Returns an array of all defined functions</phpsyntax><phpsyntax function="get_defined_vars" usage="array get_defined_vars(void)">Returns an associative array of names and values of all currently defined variable names (variables in the current scope)</phpsyntax><phpsyntax function="get_extension_funcs" usage="array get_extension_funcs(string extension_name)">Returns an array with the names of functions belonging to the named extension</phpsyntax><phpsyntax function="get_included_files" usage="array get_included_files(void)">Returns an array with the file names that were include_once()'d</phpsyntax><phpsyntax function="get_loaded_extensions" usage="array get_loaded_extensions(void)">Return an array containing names of loaded extensions</phpsyntax><phpsyntax function="get_object_vars" usage="array get_object_vars(object obj)">Returns an array of object properties</phpsyntax><phpsyntax function="get_parent_class" usage="string get_parent_class(mixed object)">Retrieves the parent class name for object or class.</phpsyntax><phpsyntax function="get_resource_type" usage="string get_resource_type(resource res)">Get the resource type name for a given resource</phpsyntax><phpsyntax function="is_a" usage="bool is_a(object object, string class_name)">Returns true if the object is of this class or has this class as one of its parents</phpsyntax><phpsyntax function="is_subclass_of" usage="bool is_subclass_of(object object, string class_name)">Returns true if the object has this class as one of its parents</phpsyntax><phpsyntax function="leak" usage="void leak(int num_bytes=3)">Cause an intentional memory leak, for testing/debugging purposes</phpsyntax><phpsyntax function="method_exists" usage="bool method_exists(object object, string method)">Checks if the class method exists</phpsyntax><phpsyntax function="restore_error_handler" usage="void restore_error_handler(void)">Restores the previously defined error handler function</phpsyntax><phpsyntax function="restore_exception_handler" usage="void restore_exception_handler(void)">Restores the previously defined exception handler function</phpsyntax><phpsyntax function="set_error_handler" usage="string set_error_handler(string error_handler [, int error_types])">Sets a user-defined error handler function.  Returns the previously defined error handler, or false on error</phpsyntax><phpsyntax function="set_exception_handler" usage="string set_exception_handler(callable exception_handler)">Sets a user-defined exception handler function.  Returns the previously defined exception handler, or false on error</phpsyntax><phpsyntax function="strcasecmp" usage="int strcasecmp(string str1, string str2)">Binary safe case-insensitive string comparison</phpsyntax><phpsyntax function="strcmp" usage="int strcmp(string str1, string str2)">Binary safe string comparison</phpsyntax><phpsyntax function="strlen" usage="int strlen(string str)">Get string length</phpsyntax><phpsyntax function="strncasecmp" usage="int strncasecmp(string str1, string str2, int len)">Binary safe string comparison</phpsyntax><phpsyntax function="strncmp" usage="int strncmp(string str1, string str2, int len)">Binary safe string comparison</phpsyntax><phpsyntax function="trigger_error" usage="void trigger_error(string messsage [, int error_type])">Generates a user-level error/warning/notice message</phpsyntax><phpsyntax function="zend_version" usage="string zend_version(void)">Get the version of the Zend Engine</phpsyntax><phpsyntax function="bcadd" usage="string bcadd(string left_operand, string right_operand [, int scale])">Returns the sum of two arbitrary precision numbers</phpsyntax><phpsyntax function="bccomp" usage="int bccomp(string left_operand, string right_operand [, int scale])">Compares two arbitrary precision numbers</phpsyntax><phpsyntax function="bcdiv" usage="string bcdiv(string left_operand, string right_operand [, int scale])">Returns the quotient of two arbitrary precision numbers (division)</phpsyntax><phpsyntax function="bcmod" usage="string bcmod(string left_operand, string right_operand)">Returns the modulus of the two arbitrary precision operands</phpsyntax><phpsyntax function="bcmul" usage="string bcmul(string left_operand, string right_operand [, int scale])">Returns the multiplication of two arbitrary precision numbers</phpsyntax><phpsyntax function="bcpow" usage="string bcpow(string x, string y [, int scale])">Returns the value of an arbitrary precision number raised to the power of another</phpsyntax><phpsyntax function="bcpowmod" usage="string bcpowmod(string x, string y, string mod [, int scale])">Returns the value of an arbitrary precision number raised to the power of another reduced by a modulous</phpsyntax><phpsyntax function="bcscale" usage="bool bcscale(int scale)">Sets default scale parameter for all bc math functions</phpsyntax><phpsyntax function="bcsqrt" usage="string bcsqrt(string operand [, int scale])">Returns the square root of an arbitray precision number</phpsyntax><phpsyntax function="bcsub" usage="string bcsub(string left_operand, string right_operand [, int scale])">Returns the difference between two arbitrary precision numbers</phpsyntax><phpsyntax function="bzcompress" usage="string bzcompress(string source [, int blocksize100k [, int workfactor]])">Compresses a string into BZip2 encoded data</phpsyntax><phpsyntax function="bzdecompress" usage="string bzdecompress(string source [, int small])">Decompresses BZip2 compressed data</phpsyntax><phpsyntax function="bzerrno" usage="int bzerrno(resource bz)">Returns the error number</phpsyntax><phpsyntax function="bzerror" usage="array bzerror(resource bz)">Returns the error number and error string in an associative array</phpsyntax><phpsyntax function="bzerrstr" usage="string bzerrstr(resource bz)">Returns the error string</phpsyntax><phpsyntax function="bzopen" usage="resource bzopen(string|int file|fp, string mode)">Opens a new BZip2 stream</phpsyntax><phpsyntax function="bzread" usage="string bzread(int bz[, int length])">Reads up to length bytes from a BZip2 stream, or 1024 bytes if length is not specified</phpsyntax><phpsyntax function="jdtounix" usage="int jdtounix(int jday)">Convert Julian Day to UNIX timestamp</phpsyntax><phpsyntax function="unixtojd" usage="int unixtojd([int timestamp])">Convert UNIX timestamp to Julian Day</phpsyntax><phpsyntax function="cal_days_in_month" usage="int cal_days_in_month(int calendar, int month, int year)">Returns the number of days in a month for a given year and calendar</phpsyntax><phpsyntax function="cal_from_jd" usage="array cal_from_jd(int jd, int calendar)">Converts from Julian Day Count to a supported calendar and return extended information</phpsyntax><phpsyntax function="cal_info" usage="array cal_info(int calendar)">Returns information about a particular calendar</phpsyntax><phpsyntax function="cal_to_jd" usage="int cal_to_jd(int calendar, int month, int day, int year)">Converts from a supported calendar to Julian Day Count</phpsyntax><phpsyntax function="frenchtojd" usage="int frenchtojd(int month, int day, int year)">Converts a french republic calendar date to julian day count</phpsyntax><phpsyntax function="gregoriantojd" usage="int gregoriantojd(int month, int day, int year)">Converts a gregorian calendar date to julian day count</phpsyntax><phpsyntax function="jddayofweek" usage="mixed jddayofweek(int juliandaycount [, int mode])">Returns name or number of day of week from julian day count</phpsyntax><phpsyntax function="jdmonthname" usage="string jdmonthname(int juliandaycount, int mode)">Returns name of month for julian day count</phpsyntax><phpsyntax function="jdtofrench" usage="string jdtofrench(int juliandaycount)">Converts a julian day count to a french republic calendar date</phpsyntax><phpsyntax function="jdtogregorian" usage="string jdtogregorian(int juliandaycount)">Converts a julian day count to a gregorian calendar date</phpsyntax><phpsyntax function="jdtojewish" usage="string jdtojewish(int juliandaycount [, bool hebrew [, int fl]])">Converts a julian day count to a jewish calendar date</phpsyntax><phpsyntax function="jdtojulian" usage="string jdtojulian(int juliandaycount)">Convert a julian day count to a julian calendar date</phpsyntax><phpsyntax function="jewishtojd" usage="int jewishtojd(int month, int day, int year)">Converts a jewish calendar date to a julian day count</phpsyntax><phpsyntax function="juliantojd" usage="int juliantojd(int month, int day, int year)">Converts a julian calendar date to julian day count</phpsyntax><phpsyntax function="easter_date" usage="int easter_date([int year])">Return the timestamp of midnight on Easter of a given year (defaults to current year)</phpsyntax><phpsyntax function="easter_days" usage="int easter_days([int year, [int method]])">Return the number of days after March 21 that Easter falls on for a given year (defaults to current year)</phpsyntax><phpsyntax function="com_create_guid" usage="string com_create_guid()">Generate a globally unique identifier (GUID)</phpsyntax><phpsyntax function="com_event_sink" usage="bool com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])">Connect events from a COM object to a PHP object</phpsyntax><phpsyntax function="com_load_typelib" usage="bool com_load_typelib(string typelib_name [, int case_insensitive])">Loads a Typelibrary and registers its constants</phpsyntax><phpsyntax function="com_message_pump" usage="bool com_message_pump([int timeoutms])">Process COM messages, sleeping for up to timeoutms milliseconds</phpsyntax><phpsyntax function="com_print_typeinfo" usage="bool com_print_typeinfo(object comobject | string typelib, string dispinterface, bool wantsink)">Print out a PHP class definition for a dispatchable interface</phpsyntax><phpsyntax function="variant_abs" usage="mixed variant_abs(mixed left)">Returns the absolute value of a variant</phpsyntax><phpsyntax function="variant_add" usage="mixed variant_add(mixed left, mixed right)">"Adds" two variant values together and returns the result</phpsyntax><phpsyntax function="variant_and" usage="mixed variant_and(mixed left, mixed right)">performs a bitwise AND operation between two variants and returns the result</phpsyntax><phpsyntax function="variant_cast" usage="object variant_cast(object variant, int type)">Convert a variant into a new variant object of another type</phpsyntax><phpsyntax function="variant_cat" usage="mixed variant_cat(mixed left, mixed right)">concatenates two variant values together and returns the result</phpsyntax><phpsyntax function="variant_cmp" usage="int variant_cmp(mixed left, mixed right [, int lcid [, int flags]])">Compares two variants</phpsyntax><phpsyntax function="variant_date_from_timestamp" usage="object variant_date_from_timestamp(int timestamp)">Returns a variant date representation of a unix timestamp</phpsyntax><phpsyntax function="variant_date_to_timestamp" usage="int variant_date_to_timestamp(object variant)">Converts a variant date/time value to unix timestamp</phpsyntax><phpsyntax function="variant_div" usage="mixed variant_div(mixed left, mixed right)">Returns the result from dividing two variants</phpsyntax><phpsyntax function="variant_eqv" usage="mixed variant_eqv(mixed left, mixed right)">Performs a bitwise equivalence on two variants</phpsyntax><phpsyntax function="variant_fix" usage="mixed variant_fix(mixed left)">Returns the ? of a variant</phpsyntax><phpsyntax function="variant_get_type" usage="int variant_get_type(object variant)">Returns the VT_XXX type code for a variant</phpsyntax><phpsyntax function="variant_idiv" usage="mixed variant_idiv(mixed left, mixed right)">Converts variants to operands and then returns the result from dividing them</phpsyntax><phpsyntax function="variant_imp" usage="mixed variant_imp(mixed left, mixed right)">Performs a bitwise implication on two variants</phpsyntax><phpsyntax function="variant_index_get" usage="mixed variant_index_get(object variant, mixed index1 [, mixed index2 [, ...]])">Get the value of a multi dimensional array property</phpsyntax><phpsyntax function="variant_int" usage="mixed variant_int(mixed left)">Returns the integer portion of a variant</phpsyntax><phpsyntax function="variant_mod" usage="mixed variant_mod(mixed left, mixed right)">Divides two variants and returns only the remainder</phpsyntax><phpsyntax function="variant_mul" usage="mixed variant_mul(mixed left, mixed right)">multiplies the values of the two variants and returns the result</phpsyntax><phpsyntax function="variant_neg" usage="mixed variant_neg(mixed left)">Performs logical negation on a variant</phpsyntax><phpsyntax function="variant_not" usage="mixed variant_not(mixed left)">Performs bitwise not negation on a variant</phpsyntax><phpsyntax function="variant_or" usage="mixed variant_or(mixed left, mixed right)">Performs a logical disjunction on two variants</phpsyntax><phpsyntax function="variant_pow" usage="mixed variant_pow(mixed left, mixed right)">Returns the result of performing the power function with two variants</phpsyntax><phpsyntax function="variant_round" usage="mixed variant_round(mixed left, int decimals)">Rounds a variant to the specified number of decimal places</phpsyntax><phpsyntax function="variant_set" usage="void variant_set(object variant, mixed value)">Assigns a new value for a variant object (like "set" in VB)</phpsyntax><phpsyntax function="variant_set_type" usage="void variant_set_type(object variant, int type)">Convert a variant into another type.  Variant is modified "in-place"</phpsyntax><phpsyntax function="variant_sub" usage="mixed variant_sub(mixed left, mixed right)">subjects the value of the right variant from the left variant value and returns the result</phpsyntax><phpsyntax function="variant_xor" usage="mixed variant_xor(mixed left, mixed right)">Performs a logical exclusion on two variants</phpsyntax><phpsyntax function="cpdf_add_annotation" usage="bool cpdf_add_annotation(int pdfdoc, float xll, float yll, float xur, float xur, string title, string text [, int mode])">Sets annotation</phpsyntax><phpsyntax function="cpdf_add_outline" usage="int cpdf_add_outline(int pdfdoc, int lastoutline, int sublevel, int open, int pagenr, string title)">Adds outline</phpsyntax><phpsyntax function="cpdf_arc" usage="bool cpdf_arc(int pdfdoc, float x, float y, float radius, float start, float end [, int mode])">Draws an arc</phpsyntax><phpsyntax function="cpdf_begin_text" usage="bool cpdf_begin_text(int pdfdoc)">Starts text section</phpsyntax><phpsyntax function="cpdf_circle" usage="bool cpdf_circle(int pdfdoc, float x, float y, float radius [, int mode])">Draws a circle</phpsyntax><phpsyntax function="cpdf_clip" usage="bool cpdf_clip(int pdfdoc)">Clips to current path</phpsyntax><phpsyntax function="cpdf_close" usage="bool cpdf_close(int pdfdoc)">Closes the pdf document</phpsyntax><phpsyntax function="cpdf_closepath" usage="bool cpdf_closepath(int pdfdoc)">Close path</phpsyntax><phpsyntax function="cpdf_closepath_fill_stroke" usage="bool cpdf_closepath_fill_stroke(int pdfdoc)">Close, fill and stroke current path</phpsyntax><phpsyntax function="cpdf_closepath_stroke" usage="bool cpdf_closepath_stroke(int pdfdoc)">Close path and draw line along path</phpsyntax><phpsyntax function="cpdf_continue_text" usage="bool cpdf_continue_text(int pdfdoc, string text)">Outputs text in next line</phpsyntax><phpsyntax function="cpdf_curveto" usage="bool cpdf_curveto(int pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode])">Draws a curve</phpsyntax><phpsyntax function="cpdf_end_text" usage="bool cpdf_end_text(int pdfdoc)">Ends text section</phpsyntax><phpsyntax function="cpdf_fill" usage="bool cpdf_fill(int pdfdoc)">Fills current path</phpsyntax><phpsyntax function="cpdf_fill_stroke" usage="bool cpdf_fill_stroke(int pdfdoc)">Fills and stroke current path</phpsyntax><phpsyntax function="cpdf_finalize" usage="bool cpdf_finalize(int pdfdoc)">Creates PDF doc in memory</phpsyntax><phpsyntax function="cpdf_finalize_page" usage="bool cpdf_finalize_page(int pdfdoc, int pagenr)">Ends the page to save memory</phpsyntax><phpsyntax function="cpdf_global_set_document_limits" usage="bool cpdf_global_set_document_limits(int maxPages, int maxFonts, int maxImages, int maxAnnots, int maxObjects)">Sets document settings for all documents</phpsyntax><phpsyntax function="cpdf_import_jpeg" usage="bool cpdf_import_jpeg(int pdfdoc, string filename, float x, float y, float angle, float width, float height, float x_scale, float y_scale, int gsave [, int mode])">Includes JPEG image</phpsyntax><phpsyntax function="cpdf_lineto" usage="bool cpdf_lineto(int pdfdoc, float x, float y [, int mode])">Draws a line</phpsyntax><phpsyntax function="cpdf_moveto" usage="bool cpdf_moveto(int pdfdoc, float x, float y [, int mode])">Sets current point</phpsyntax><phpsyntax function="cpdf_newpath" usage="bool cpdf_newpath(int pdfdoc)">Starts new path</phpsyntax><phpsyntax function="cpdf_open" usage="int cpdf_open(int compression [, string filename [, array doc_limits]])">Opens a new pdf document</phpsyntax><phpsyntax function="cpdf_output_buffer" usage="bool cpdf_output_buffer(int pdfdoc)">Returns the internal memory stream as string</phpsyntax><phpsyntax function="cpdf_page_init" usage="bool cpdf_page_init(int pdfdoc, int pagenr, int orientation, int height, int width [, float unit])">Starts page</phpsyntax><phpsyntax function="cpdf_place_inline_image" usage="bool cpdf_place_inline_image(int pdfdoc, int gdimage, float x, float y, float angle, fload width, float height, int gsave [, int mode])">Includes image</phpsyntax><phpsyntax function="cpdf_rect" usage="bool cpdf_rect(int pdfdoc, float x, float y, float width, float height [, int mode])">Draws a rectangle</phpsyntax><phpsyntax function="cpdf_restore" usage="bool cpdf_restore(int pdfdoc)">Restores formerly saved enviroment</phpsyntax><phpsyntax function="cpdf_rlineto" usage="bool cpdf_rlineto(int pdfdoc, float x, float y [, int mode])">Draws a line relative to current point</phpsyntax><phpsyntax function="cpdf_rmoveto" usage="bool cpdf_rmoveto(int pdfdoc, float x, float y [, int mode])">Sets current point</phpsyntax><phpsyntax function="cpdf_rotate" usage="bool cpdf_rotate(int pdfdoc, float angle)">Sets rotation</phpsyntax><phpsyntax function="cpdf_rotate_text" usage="bool cpdf_rotate_text(int pdfdoc, float angle)">Sets text rotation angle</phpsyntax><phpsyntax function="cpdf_save" usage="bool cpdf_save(int pdfdoc)">Saves current enviroment</phpsyntax><phpsyntax function="cpdf_save_to_file" usage="bool cpdf_save_to_file(int pdfdoc, string filename)">Saves the internal memory stream to a file</phpsyntax><phpsyntax function="cpdf_scale" usage="bool cpdf_scale(int pdfdoc, float x_scale, float y_scale)">Sets scaling</phpsyntax><phpsyntax function="cpdf_set_action_url" usage="bool cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])">Sets hyperlink</phpsyntax><phpsyntax function="cpdf_set_char_spacing" usage="bool cpdf_set_char_spacing(int pdfdoc, float space)">Sets character spacing</phpsyntax><phpsyntax function="cpdf_set_creator" usage="bool cpdf_set_creator(int pdfdoc, string creator)">Sets the creator field</phpsyntax><phpsyntax function="cpdf_set_current_page" usage="bool cpdf_set_current_page(int pdfdoc, int pagenr)">Sets page for output</phpsyntax><phpsyntax function="cpdf_set_font" usage="bool cpdf_set_font(int pdfdoc, string font, float size, string encoding)">Selects the current font face, size and encoding</phpsyntax><phpsyntax function="cpdf_set_font_directories" usage="bool cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)">Sets directories to search when using external fonts</phpsyntax><phpsyntax function="cpdf_set_font_map_file" usage="bool cpdf_set_font_map_file(int pdfdoc, string filename)">Sets fontname to filename translation map when using external fonts</phpsyntax><phpsyntax function="cpdf_set_horiz_scaling" usage="bool cpdf_set_horiz_scaling(int pdfdoc, float scale)">Sets horizontal scaling of text</phpsyntax><phpsyntax function="cpdf_set_keywords" usage="bool cpdf_set_keywords(int pdfptr, string keywords)">Fills the keywords field of the info structure</phpsyntax><phpsyntax function="cpdf_set_leading" usage="bool cpdf_set_leading(int pdfdoc, float distance)">Sets distance between text lines</phpsyntax><phpsyntax function="cpdf_set_page_animation" usage="bool cpdf_set_page_animation(int pdfdoc, int transition, float duration, float direction, int orientation, int inout)">Sets transition between pages</phpsyntax><phpsyntax function="cpdf_set_subject" usage="bool cpdf_set_subject(int pdfptr, string subject)">Fills the subject field of the info structure</phpsyntax><phpsyntax function="cpdf_set_text_matrix" usage="bool cpdf_set_text_matrix(int pdfdoc, arry matrix)">Sets the text matrix</phpsyntax><phpsyntax function="cpdf_set_text_pos" usage="bool cpdf_set_text_pos(int pdfdoc, float x, float y [, int mode])">Sets the position of text for the next cpdf_show call</phpsyntax><phpsyntax function="cpdf_set_text_rendering" usage="bool cpdf_set_text_rendering(int pdfdoc, int rendermode)">Determines how text is rendered</phpsyntax><phpsyntax function="cpdf_set_text_rise" usage="bool cpdf_set_text_rise(int pdfdoc, float value)">Sets the text rise</phpsyntax><phpsyntax function="cpdf_set_title" usage="bool cpdf_set_title(int pdfptr, string title)">Fills the title field of the info structure</phpsyntax><phpsyntax function="cpdf_set_viewer_preferences" usage="bool cpdf_set_viewer_preferences(int pdfdoc, array preferences)">How to show the document in the viewer</phpsyntax><phpsyntax function="cpdf_set_word_spacing" usage="bool cpdf_set_word_spacing(int pdfdoc, float space)">Sets spacing between words</phpsyntax><phpsyntax function="cpdf_setdash" usage="bool cpdf_setdash(int pdfdoc, long white, long black)">Sets dash pattern</phpsyntax><phpsyntax function="cpdf_setflat" usage="bool cpdf_setflat(int pdfdoc, float value)">Sets flatness</phpsyntax><phpsyntax function="cpdf_setgray" usage="bool cpdf_setgray(int pdfdoc, float value)">Sets drawing and filling color to gray value</phpsyntax><phpsyntax function="cpdf_setgray_fill" usage="bool cpdf_setgray_fill(int pdfdoc, float value)">Sets filling color to gray value</phpsyntax><phpsyntax function="cpdf_setgray_stroke" usage="bool cpdf_setgray_stroke(int pdfdoc, float value)">Sets drawing color to gray value</phpsyntax><phpsyntax function="cpdf_setlinecap" usage="bool cpdf_setlinecap(int pdfdoc, int value)">Sets linecap parameter</phpsyntax><phpsyntax function="cpdf_setlinejoin" usage="bool cpdf_setlinejoin(int pdfdoc, int value)">Sets linejoin parameter</phpsyntax><phpsyntax function="cpdf_setlinewidth" usage="bool cpdf_setlinewidth(int pdfdoc, float width)">Sets line width</phpsyntax><phpsyntax function="cpdf_setmiterlimit" usage="bool cpdf_setmiterlimit(int pdfdoc, float value)">Sets miter limit</phpsyntax><phpsyntax function="cpdf_setrgbcolor" usage="bool cpdf_setrgbcolor(int pdfdoc, float red, float green, float blue)">Sets drawing and filling color to RGB color value</phpsyntax><phpsyntax function="cpdf_setrgbcolor_fill" usage="bool cpdf_setrgbcolor_fill(int pdfdoc, float red, float green, float blue)">Sets filling color to rgb color value</phpsyntax><phpsyntax function="cpdf_setrgbcolor_stroke" usage="bool cpdf_setrgbcolor_stroke(int pdfdoc, float red, float green, float blue)">Sets drawing color to RGB color value</phpsyntax><phpsyntax function="cpdf_show" usage="bool cpdf_show(int pdfdoc, string text)">Output text at current position</phpsyntax><phpsyntax function="cpdf_show_xy" usage="bool cpdf_show_xy(int pdfdoc, string text, float x-koor, float y-koor [, int mode])">Output text at position</phpsyntax><phpsyntax function="cpdf_stringwidth" usage="float cpdf_stringwidth(int pdfdoc, string text)">Returns width of text in current font</phpsyntax><phpsyntax function="cpdf_stroke" usage="bool cpdf_stroke(int pdfdoc)">Draws line along path path</phpsyntax><phpsyntax function="cpdf_text" usage="bool cpdf_text(int pdfdoc, string text [, float x-koor, float y-koor [, int mode [, float orientation [, int alignmode]]]])">Outputs text</phpsyntax><phpsyntax function="cpdf_translate" usage="bool cpdf_translate(int pdfdoc, float x, float y)">Sets origin of coordinate system</phpsyntax><phpsyntax function="ctype_alnum" usage="bool ctype_alnum(mixed c)">Checks for alphanumeric character(s)</phpsyntax><phpsyntax function="ctype_alpha" usage="bool ctype_alpha(mixed c)">Checks for alphabetic character(s)</phpsyntax><phpsyntax function="ctype_cntrl" usage="bool ctype_cntrl(mixed c)">Checks for control character(s)</phpsyntax><phpsyntax function="ctype_digit" usage="bool ctype_digit(mixed c)">Checks for numeric character(s)</phpsyntax><phpsyntax function="ctype_graph" usage="bool ctype_graph(mixed c)">Checks for any printable character(s) except space</phpsyntax><phpsyntax function="ctype_lower" usage="bool ctype_lower(mixed c)">Checks for lowercase character(s)</phpsyntax><phpsyntax function="ctype_print" usage="bool ctype_print(mixed c)">Checks for printable character(s)</phpsyntax><phpsyntax function="ctype_punct" usage="bool ctype_punct(mixed c)">Checks for any printable character which is not whitespace or an alphanumeric character</phpsyntax><phpsyntax function="ctype_space" usage="bool ctype_space(mixed c)">Checks for whitespace character(s)</phpsyntax><phpsyntax function="ctype_upper" usage="bool ctype_upper(mixed c)">Checks for uppercase character(s)</phpsyntax><phpsyntax function="ctype_xdigit" usage="bool ctype_xdigit(mixed c)">Checks for character(s) representing a hexadecimal digit</phpsyntax><phpsyntax function="curl_close" usage="void curl_close(resource ch)">Close a CURL session</phpsyntax><phpsyntax function="curl_copy_handle" usage="resource curl_copy_handle(resource ch)">Copy a cURL handle along with all of it's preferences</phpsyntax><phpsyntax function="curl_errno" usage="int curl_errno(resource ch)">Return an integer containing the last error number</phpsyntax><phpsyntax function="curl_error" usage="string curl_error(resource ch)">Return a string contain the last error for the current session</phpsyntax><phpsyntax function="curl_exec" usage="bool curl_exec(resource ch)">Perform a CURL session</phpsyntax><phpsyntax function="curl_getinfo" usage="mixed curl_getinfo(resource ch, int opt)">Get information regarding a specific transfer</phpsyntax><phpsyntax function="curl_init" usage="resource curl_init([string url])">Initialize a CURL session</phpsyntax><phpsyntax function="curl_setopt" usage="bool curl_setopt(resource ch, string option, mixed value)">Set an option for a CURL transfer</phpsyntax><phpsyntax function="curl_version" usage="array curl_version([int version])">Return cURL version information.</phpsyntax><phpsyntax function="curl_multi_add_handle" usage="int curl_multi_add_handle(resource multi, resource ch)">Add a normal cURL handle to a cURL multi handle</phpsyntax><phpsyntax function="curl_multi_close" usage="void curl_multi_close(resource mh)">Close a set of cURL handles</phpsyntax><phpsyntax function="curl_multi_exec" usage="int curl_multi_exec(resource mh, int &amp;still_running)">Run the sub-connections of the current cURL handle</phpsyntax><phpsyntax function="curl_multi_getcontent" usage="string curl_multi_getcontent(resource ch)">Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set</phpsyntax><phpsyntax function="curl_multi_info_read" usage="array curl_multi_info_read(resource mh)">Get information about the current transfers</phpsyntax><phpsyntax function="curl_multi_init" usage="resource curl_multi_init(void)">Returns a new cURL multi handle</phpsyntax><phpsyntax function="curl_multi_remove_handle" usage="int curl_multi_remove_handle(resource mh, resource ch)">Remove a multi handle from a set of cURL handles</phpsyntax><phpsyntax function="curl_multi_select" usage="int curl_multi_select(resource mh[, double timeout])">Get all the sockets associated with the cURL extension, which can then be "selected"</phpsyntax><phpsyntax function="dba_close" usage="void dba_close(resource handle)">Closes database</phpsyntax><phpsyntax function="dba_delete" usage="bool dba_delete(string key, resource handle)">Deletes the entry associated with key     If inifile: remove all other key lines</phpsyntax><phpsyntax function="dba_exists" usage="bool dba_exists(string key, resource handle)">Checks, if the specified key exists</phpsyntax><phpsyntax function="dba_fetch" usage="string dba_fetch(string key, [int skip ,] resource handle)">Fetches the data associated with key</phpsyntax><phpsyntax function="dba_firstkey" usage="string dba_firstkey(resource handle)">Resets the internal key pointer and returns the first key</phpsyntax><phpsyntax function="dba_handlers" usage="array dba_handlers([bool full_info])">List configured database handlers</phpsyntax><phpsyntax function="dba_insert" usage="bool dba_insert(string key, string value, resource handle)">If not inifile: Insert value as key, return false, if key exists already      If inifile: Add vakue as key (next instance of key)</phpsyntax><phpsyntax function="dba_list" usage="array dba_list()">List opened databases</phpsyntax><phpsyntax function="dba_nextkey" usage="string dba_nextkey(resource handle)">Returns the next key</phpsyntax><phpsyntax function="dba_open" usage="resource dba_open(string path, string mode [, string handlername, string ...])">Opens path using the specified handler in mode</phpsyntax><phpsyntax function="dba_optimize" usage="bool dba_optimize(resource handle)">Optimizes (e.g. clean up, vacuum) database</phpsyntax><phpsyntax function="dba_popen" usage="resource dba_popen(string path, string mode [, string handlername, string ...])">Opens path using the specified handler in mode persistently</phpsyntax><phpsyntax function="dba_replace" usage="bool dba_replace(string key, string value, resource handle)">Inserts value as key, replaces key, if key exists already     If inifile: remove all other key lines</phpsyntax><phpsyntax function="dba_sync" usage="bool dba_sync(resource handle)">Synchronizes database</phpsyntax><phpsyntax function="dbase_add_record" usage="bool dbase_add_record(int identifier, array data)">Adds a record to the database</phpsyntax><phpsyntax function="dbase_close" usage="bool dbase_close(int identifier)">Closes an open dBase-format database file</phpsyntax><phpsyntax function="dbase_create" usage="bool dbase_create(string filename, array fields)">Creates a new dBase-format database file</phpsyntax><phpsyntax function="dbase_delete_record" usage="bool dbase_delete_record(int identifier, int record)">Marks a record to be deleted</phpsyntax><phpsyntax function="dbase_get_header_info" usage="array dbase_get_header_info(int database_handle)"/><phpsyntax function="dbase_get_record" usage="array dbase_get_record(int identifier, int record)">Returns an array representing a record from the database</phpsyntax><phpsyntax function="dbase_get_record_with_names" usage="array dbase_get_record_with_names(int identifier, int record)">Returns an associative array representing a record from the database</phpsyntax><phpsyntax function="dbase_numfields" usage="int dbase_numfields(int identifier)">Returns the number of fields (columns) in the database</phpsyntax><phpsyntax function="dbase_numrecords" usage="int dbase_numrecords(int identifier)">Returns the number of records in the database</phpsyntax><phpsyntax function="dbase_open" usage="int dbase_open(string name, int mode)">Opens a dBase-format database file</phpsyntax><phpsyntax function="dbase_pack" usage="bool dbase_pack(int identifier)">Packs the database (deletes records marked for deletion)</phpsyntax><phpsyntax function="dbase_replace_record" usage="bool dbase_replace_record(int identifier, array data, int recnum)">Replaces a record to the database</phpsyntax><phpsyntax function="dbx_close" usage="int dbx_close(dbx_link_object dbx_link)">Returns success or failure</phpsyntax><phpsyntax function="dbx_compare" usage="int dbx_compare(array row_x, array row_y, string columnname [, int flags])">Returns row_y[columnname] - row_x[columnname], converted to -1, 0 or 1</phpsyntax><phpsyntax function="dbx_connect" usage="dbx_link_object dbx_connect(string module_name, string host, string db, string username, string password [, bool persistent])">Returns a dbx_link_object on success and returns 0 on failure</phpsyntax><phpsyntax function="dbx_error" usage="string dbx_error(dbx_link_object dbx_link)">Returns success or failure</phpsyntax><phpsyntax function="dbx_escape_string" usage="string dbx_escape_string(dbx_link_object dbx_link, string sz)">Returns escaped string or NULL on error</phpsyntax><phpsyntax function="dbx_fetch_row" usage="dbx_row dbx_fetch_row(dbx_query_object dbx_q)">Returns a row (index and assoc based on query) on success and returns 0 on failure or no more rows</phpsyntax><phpsyntax function="dbx_query" usage="dbx_result_object dbx_query(dbx_link_object dbx_link, string sql_statement [, int flags])">Returns a dbx_link_object on success and returns 0 on failure</phpsyntax><phpsyntax function="dbx_sort" usage="int dbx_sort(object dbx_result, string compare_function_name)">Returns 0 on failure, 1 on success</phpsyntax><phpsyntax function="dio_close" usage="void dio_close(resource fd)">Close the file descriptor given by fd</phpsyntax><phpsyntax function="dio_fcntl" usage="mixed dio_fcntl(resource fd, int cmd[, mixed arg])">Perform a c library fcntl on fd</phpsyntax><phpsyntax function="dio_open" usage="resource dio_open(string filename, int flags[, int mode])">Open a new filename with specified permissions of flags and creation permissions of mode</phpsyntax><phpsyntax function="dio_read" usage="string dio_read(resource fd[, int n])">Read n bytes from fd and return them, if n is not specified, read 1k</phpsyntax><phpsyntax function="dio_seek" usage="int dio_seek(resource fd, int pos, int whence)">Seek to pos on fd from whence</phpsyntax><phpsyntax function="dio_stat" usage="array dio_stat(resource fd)">Get stat information about the file descriptor fd</phpsyntax><phpsyntax function="dio_tcsetattr" usage="mixed dio_tcsetattr(resource fd,  array args )">Perform a c library tcsetattr on fd</phpsyntax><phpsyntax function="dio_truncate" usage="bool dio_truncate(resource fd, int offset)">Truncate file descriptor fd to offset bytes</phpsyntax><phpsyntax function="dio_write" usage="int dio_write(resource fd, string data[, int len])">Write data to fd with optional truncation at length</phpsyntax><phpsyntax function="dom_document_xinclude" usage="int dom_document_xinclude()">Substitutues xincludes in a DomDocument</phpsyntax><phpsyntax function="dom_import_simplexml" usage="somNode dom_import_simplexml(sxeobject node)">Get a simplexml_element object from dom to allow for processing</phpsyntax><phpsyntax function="exif_imagetype" usage="int exif_imagetype(string imagefile)">Get the type of an image</phpsyntax><phpsyntax function="exif_read_data" usage="array exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])">Reads header data from the JPEG/TIFF image filename and optionally reads the internal thumbnails</phpsyntax><phpsyntax function="exif_tagname" usage="string exif_tagname(index)">Get headername for index or false if not defined</phpsyntax><phpsyntax function="exif_thumbnail" usage="string exif_thumbnail(string filename [, &amp;width, &amp;height [, &amp;imagetype]])">Reads the embedded thumbnail</phpsyntax><phpsyntax function="fam_cancel_monitor" usage="bool fam_cancel_monitor(resource id, resource monitor_id)">Terminate monitoring</phpsyntax><phpsyntax function="fam_close" usage="void fam_close(resource id)">Close FAM connection</phpsyntax><phpsyntax function="fam_monitor_collection" usage="resource fam_monitor_collection(resource id, string dirname, int depth, string mask)">Monitor a collection of files in a directory for changes</phpsyntax><phpsyntax function="fam_monitor_directory" usage="resource fam_monitor_directory(resource id, string dirname)">Monitor a directory for changes</phpsyntax><phpsyntax function="fam_monitor_file" usage="resource fam_monitor_file(resource id, string filename)">Monitor a regular file for changes</phpsyntax><phpsyntax function="fam_next_event" usage="array fam_next_event(resource id)">Get next pending FAM event</phpsyntax><phpsyntax function="fam_open" usage="resource fam_open([string appname])">Open FAM connection</phpsyntax><phpsyntax function="fam_pending" usage="int fam_pending(resource id)">Check for pending FAM events</phpsyntax><phpsyntax function="fam_resume_monitor" usage="bool fam_resume_monitor(resource id, resource monitor_id)">Resume suspended monitoring</phpsyntax><phpsyntax function="fam_suspend_monitor" usage="bool fam_suspend_monitor(resource id, resource monitor_id)">Temporary suspend monitoring</phpsyntax><phpsyntax function="fbsql_affected_rows" usage="int fbsql_affected_rows([resource link_identifier])">Get the number of rows affected by the last statement</phpsyntax><phpsyntax function="fbsql_autocommit" usage="bool fbsql_autocommit(resource link_identifier [, bool OnOff])">Turns on auto-commit</phpsyntax><phpsyntax function="fbsql_blob_size" usage="int fbsql_blob_size(string blob_handle [, resource link_identifier])">Get the size of a BLOB identified by blob_handle</phpsyntax><phpsyntax function="fbsql_change_user" usage="int fbsql_change_user(string user, string password [, string database [, resource link_identifier]])">Change the user for a session</phpsyntax><phpsyntax function="fbsql_clob_size" usage="int fbsql_clob_size(string clob_handle [, resource link_identifier])">Get the size of a CLOB identified by clob_handle</phpsyntax><phpsyntax function="fbsql_close" usage="bool fbsql_close([resource link_identifier])">Close a connection to a database server</phpsyntax><phpsyntax function="fbsql_commit" usage="bool fbsql_commit([resource link_identifier])">Commit the transaction</phpsyntax><phpsyntax function="fbsql_connect" usage="resource fbsql_connect([string hostname [, string username [, string password]]])">Create a connection to a database server</phpsyntax><phpsyntax function="fbsql_create_blob" usage="string fbsql_create_blob(string blob_data [, resource link_identifier])">Create a BLOB in the database for use with an insert or update statement</phpsyntax><phpsyntax function="fbsql_create_clob" usage="string fbsql_create_clob(string clob_data [, resource link_identifier])">Create a CLOB in the database for use with an insert or update statement</phpsyntax><phpsyntax function="fbsql_create_db" usage="bool fbsql_create_db(string database_name [, resource link_identifier])">Create a new database on the server</phpsyntax><phpsyntax function="fbsql_data_seek" usage="bool fbsql_data_seek(int result, int row_number)">Move the internal row counter to the specified row_number</phpsyntax><phpsyntax function="fbsql_database" usage="string fbsql_database(resource link_identifier [, string database])">Get or set the database name used with a connection</phpsyntax><phpsyntax function="fbsql_database_password" usage="string fbsql_database_password(resource link_identifier [, string database_password])">Get or set the databsae password used with a connection</phpsyntax><phpsyntax function="fbsql_db_query" usage="resource fbsql_db_query(string database_name, string query [, resource link_identifier])">Send one or more SQL statements to a specified database on the server</phpsyntax><phpsyntax function="fbsql_db_status" usage="int fbsql_db_status(string database_name [, resource link_identifier])">Gets the status (Stopped, Starting, Running, Stopping) for a given database</phpsyntax><phpsyntax function="fbsql_drop_db" usage="int fbsql_drop_db(string database_name [, resource link_identifier])">Drop a database on the server</phpsyntax><phpsyntax function="fbsql_errno" usage="int fbsql_errno([resource link_identifier])">Returns the last error code</phpsyntax><phpsyntax function="fbsql_error" usage="string fbsql_error([resource link_identifier])">Returns the last error string</phpsyntax><phpsyntax function="fbsql_fetch_array" usage="array fbsql_fetch_array(resource result [, int result_type])">Fetches a result row as an array (associative, numeric or both)</phpsyntax><phpsyntax function="fbsql_fetch_assoc" usage="object fbsql_fetch_assoc(resource result)">Detch a row of data. Returns an assoc array</phpsyntax><phpsyntax function="fbsql_fetch_field" usage="object fbsql_fetch_field(int result [, int field_index])">Get the field properties for a specified field_index</phpsyntax><phpsyntax function="fbsql_fetch_lengths" usage="array fbsql_fetch_lengths(int result)">Returns an array of the lengths of each column in the result set</phpsyntax><phpsyntax function="fbsql_fetch_object" usage="object fbsql_fetch_object(resource result [, int result_type])">Fetch a row of data. Returns an object</phpsyntax><phpsyntax function="fbsql_fetch_row" usage="array fbsql_fetch_row(resource result)">Fetch a row of data. Returns an indexed array</phpsyntax><phpsyntax function="fbsql_field_flags" usage="string fbsql_field_flags(int result [, int field_index])">???</phpsyntax><phpsyntax function="fbsql_field_len" usage="mixed fbsql_field_len(int result [, int field_index])">Get the column length for a specified field_index</phpsyntax><phpsyntax function="fbsql_field_name" usage="string fbsql_field_name(int result [, int field_index])">Get the column name for a specified field_index</phpsyntax><phpsyntax function="fbsql_field_seek" usage="bool fbsql_field_seek(int result [, int field_index])">???</phpsyntax><phpsyntax function="fbsql_field_table" usage="string fbsql_field_table(int result [, int field_index])">Get the table name for a specified field_index</phpsyntax><phpsyntax function="fbsql_field_type" usage="string fbsql_field_type(int result [, int field_index])">Get the field type for a specified field_index</phpsyntax><phpsyntax function="fbsql_free_result" usage="bool fbsql_free_result(resource result)">free the memory used to store a result</phpsyntax><phpsyntax function="fbsql_get_autostart_info" usage="array fbsql_get_autostart_info([resource link_identifier])">???</phpsyntax><phpsyntax function="fbsql_hostname" usage="string fbsql_hostname(resource link_identifier [, string host_name])">Get or set the host name used with a connection</phpsyntax><phpsyntax function="fbsql_insert_id" usage="int fbsql_insert_id([resource link_identifier])">Get the internal index for the last insert statement</phpsyntax><phpsyntax function="fbsql_list_dbs" usage="resource fbsql_list_dbs([resource link_identifier])">Retreive a list of all databases on the server</phpsyntax><phpsyntax function="fbsql_list_fields" usage="resource fbsql_list_fields(string database_name, string table_name [, resource link_identifier])">Retrieve a list of all fields for the specified database.table</phpsyntax><phpsyntax function="fbsql_list_tables" usage="resource fbsql_list_tables(string database [, int link_identifier])">Retreive a list of all tables from the specifoied database</phpsyntax><phpsyntax function="fbsql_next_result" usage="bool fbsql_next_result(int result)">Switch to the next result if multiple results are available</phpsyntax><phpsyntax function="fbsql_num_fields" usage="int fbsql_num_fields(int result)">Get number of fields in the result set</phpsyntax><phpsyntax function="fbsql_num_rows" usage="int fbsql_num_rows(int result)">Get number of rows</phpsyntax><phpsyntax function="fbsql_password" usage="string fbsql_password(resource link_identifier [, string password])">Get or set the user password used with a connection</phpsyntax><phpsyntax function="fbsql_pconnect" usage="resource fbsql_pconnect([string hostname [, string username [, string password]]])">Create a persistant connection to a database server</phpsyntax><phpsyntax function="fbsql_query" usage="resource fbsql_query(string query [, resource link_identifier])">Send one or more SQL statements to the server and execute them</phpsyntax><phpsyntax function="fbsql_read_blob" usage="string fbsql_read_blob(string blob_handle [, resource link_identifier])">Read the BLOB data identified by blob_handle</phpsyntax><phpsyntax function="fbsql_read_clob" usage="string fbsql_read_clob(string clob_handle [, resource link_identifier])">Read the CLOB data identified by clob_handle</phpsyntax><phpsyntax function="fbsql_result" usage="mixed fbsql_result(int result [, int row [, mixed field]])">???</phpsyntax><phpsyntax function="fbsql_rollback" usage="bool fbsql_rollback([resource link_identifier])">Rollback all statments since last commit</phpsyntax><phpsyntax function="fbsql_select_db" usage="bool fbsql_select_db([string database_name [, resource link_identifier]])">Select the database to open</phpsyntax><phpsyntax function="fbsql_set_lob_mode" usage="bool fbsql_set_lob_mode(resource result, int lob_mode)">Sets the mode for how LOB data re retreived (actual data or a handle)</phpsyntax><phpsyntax function="fbsql_set_password" usage="bool fbsql_set_password(resource link_identifier, string user, string password, string old_password)">Change the password for a given user</phpsyntax><phpsyntax function="fbsql_set_transaction" usage="void fbsql_set_transaction(resource link_identifier, int locking, int isolation)">Sets the transaction locking and isolation</phpsyntax><phpsyntax function="fbsql_start_db" usage="bool fbsql_start_db(string database_name [, resource link_identifier])">Start a database on the server</phpsyntax><phpsyntax function="fbsql_stop_db" usage="bool fbsql_stop_db(string database_name [, resource link_identifier])">Stop a database on the server</phpsyntax><phpsyntax function="fbsql_table_name" usage="string fbsql_table_name(resource result, int index)">Retreive the table name for index after a call to fbsql_list_tables()</phpsyntax><phpsyntax function="fbsql_username" usage="string fbsql_username(resource link_identifier [, string username])">Get or set the host user used with a connection</phpsyntax><phpsyntax function="fbsql_warnings" usage="bool fbsql_warnings([int flag])">Enable or disable FrontBase warnings</phpsyntax><phpsyntax function="fdf_add_doc_javascript" usage="bool fdf_add_doc_javascript(resource fdfdoc, string scriptname, string script)">Add javascript code to the fdf file</phpsyntax><phpsyntax function="fdf_add_template" usage="bool fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)">Adds a template into the FDF document</phpsyntax><phpsyntax function="fdf_close" usage="void fdf_close(resource fdfdoc)">Closes the FDF document</phpsyntax><phpsyntax function="fdf_create" usage="resource fdf_create(void)">Creates a new FDF document</phpsyntax><phpsyntax function="fdf_enum_values" usage="bool fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])">Call a user defined function for each document value</phpsyntax><phpsyntax function="fdf_errno" usage="int fdf_errno(void)">Gets error code for last operation</phpsyntax><phpsyntax function="fdf_error" usage="string fdf_error([int errno])">Gets error description for error code</phpsyntax><phpsyntax function="fdf_get_ap" usage="bool fdf_get_ap(resource fdfdoc, string fieldname, int face, string filename)">Gets the appearance of a field and creates a PDF document out of it.</phpsyntax><phpsyntax function="fdf_get_attachment" usage="array fdf_get_attachment(resource fdfdoc, string fieldname, string savepath)">Get attached uploaded file</phpsyntax><phpsyntax function="fdf_get_encoding" usage="string fdf_get_encoding(resource fdf)">Gets FDF file encoding scheme</phpsyntax><phpsyntax function="fdf_get_file" usage="string fdf_get_file(resource fdfdoc)">Gets the value of /F key</phpsyntax><phpsyntax function="fdf_get_flags" usage="int fdf_get_flags(resorce fdfdoc, string fieldname, int whichflags)">Gets the flags of a field</phpsyntax><phpsyntax function="fdf_get_opt" usage="mixed fdf_get_opt(resource fdfdof, string fieldname [, int element])">Gets a value from the opt array of a field</phpsyntax><phpsyntax function="fdf_get_status" usage="string fdf_get_status(resource fdfdoc)">Gets the value of /Status key</phpsyntax><phpsyntax function="fdf_get_value" usage="string fdf_get_value(resource fdfdoc, string fieldname [, int which])">Gets the value of a field as string</phpsyntax><phpsyntax function="fdf_get_version" usage="string fdf_get_version([resource fdfdoc])">Gets version number for FDF api or file</phpsyntax><phpsyntax function="fdf_header" usage="void fdf_header(void)">Set FDF specific HTTP headers</phpsyntax><phpsyntax function="fdf_next_field_name" usage="string fdf_next_field_name(resource fdfdoc [, string fieldname])">Gets the name of the next field name or the first field name</phpsyntax><phpsyntax function="fdf_open" usage="resource fdf_open(string filename)">Opens a new FDF document</phpsyntax><phpsyntax function="fdf_open_string" usage="resource fdf_open_string(string fdf_data)">Opens a new FDF document from string</phpsyntax><phpsyntax function="fdf_remove_item" usage="bool fdf_remove_item(resource fdfdoc, string fieldname, int item)">Sets target frame for form</phpsyntax><phpsyntax function="fdf_save" usage="bool fdf_save(resource fdfdoc [, string filename])">Writes out the FDF file</phpsyntax><phpsyntax function="fdf_save_string" usage="string fdf_save_string(resource fdfdoc)">Returns the FDF file as a string</phpsyntax><phpsyntax function="fdf_set_ap" usage="bool fdf_set_ap(resource fdfdoc, string fieldname, int face, string filename, int pagenr)">Sets the appearence of a field</phpsyntax><phpsyntax function="fdf_set_encoding" usage="bool fdf_set_encoding(resource fdf_document, string encoding)">Sets FDF encoding (either "Shift-JIS" or "Unicode")</phpsyntax><phpsyntax function="fdf_set_file" usage="bool fdf_set_file(resource fdfdoc, string filename [, string target_frame])">Sets the value of /F key</phpsyntax><phpsyntax function="fdf_set_flags" usage="bool fdf_set_flags(resource fdfdoc, string fieldname, int whichflags, int newflags)">Sets flags for a field in the FDF document</phpsyntax><phpsyntax function="fdf_set_javascript_action" usage="bool fdf_set_javascript_action(resource fdfdoc, string fieldname, int whichtrigger, string script)">Sets the javascript action for a field</phpsyntax><phpsyntax function="fdf_set_on_import_javascript" usage="bool fdf_set_on_import_javascript(resource fdfdoc, string script [, bool before_data_import])">Adds javascript code to be executed when Acrobat opens the FDF</phpsyntax><phpsyntax function="fdf_set_opt" usage="bool fdf_set_opt(resource fdfdoc, string fieldname, int element, string value, string name)">Sets a value in the opt array for a field</phpsyntax><phpsyntax function="fdf_set_status" usage="bool fdf_set_status(resource fdfdoc, string status)">Sets the value of /Status key</phpsyntax><phpsyntax function="fdf_set_submit_form_action" usage="bool fdf_set_submit_form_action(resource fdfdoc, string fieldname, int whichtrigger, string url, int flags)">Sets the submit form action for a field</phpsyntax><phpsyntax function="fdf_set_target_frame" usage="bool fdf_set_target_frame(resource fdfdoc, string target)">Sets target frame for form</phpsyntax><phpsyntax function="fdf_set_value" usage="bool fdf_set_value(resource fdfdoc, string fieldname, mixed value [, int isname])">Sets the value of a field</phpsyntax><phpsyntax function="fdf_set_version" usage="bool fdf_set_version(resourece fdfdoc, string version)">Sets FDF version for a file</phpsyntax><phpsyntax function="filepro" usage="bool filepro(string directory)">Read and verify the map file</phpsyntax><phpsyntax function="filepro_fieldcount" usage="int filepro_fieldcount(void)">Find out how many fields are in a filePro database</phpsyntax><phpsyntax function="filepro_fieldname" usage="string filepro_fieldname(int fieldnumber)">Gets the name of a field</phpsyntax><phpsyntax function="filepro_fieldtype" usage="string filepro_fieldtype(int field_number)">Gets the type of a field</phpsyntax><phpsyntax function="filepro_fieldwidth" usage="int filepro_fieldwidth(int field_number)">Gets the width of a field</phpsyntax><phpsyntax function="filepro_retrieve" usage="string filepro_retrieve(int row_number, int field_number)">Retrieves data from a filePro database</phpsyntax><phpsyntax function="filepro_rowcount" usage="int filepro_rowcount(void)">Find out how many rows are in a filePro database</phpsyntax><phpsyntax function="ftp_alloc" usage="bool ftp_alloc(resource stream, int size[, &amp;response])">Attempt to allocate space on the remote FTP server</phpsyntax><phpsyntax function="ftp_cdup" usage="bool ftp_cdup(resource stream)">Changes to the parent directory</phpsyntax><phpsyntax function="ftp_chdir" usage="bool ftp_chdir(resource stream, string directory)">Changes directories</phpsyntax><phpsyntax function="ftp_chmod" usage="int ftp_chmod(resource stream, int mode, string filename)">Sets permissions on a file</phpsyntax><phpsyntax function="ftp_close" usage="bool ftp_close(resource stream)">Closes the FTP stream</phpsyntax><phpsyntax function="ftp_connect" usage="resource ftp_connect(string host [, int port [, int timeout]])">Opens a FTP stream</phpsyntax><phpsyntax function="ftp_delete" usage="bool ftp_delete(resource stream, string file)">Deletes a file</phpsyntax><phpsyntax function="ftp_exec" usage="bool ftp_exec(resource stream, string command)">Requests execution of a program on the FTP server</phpsyntax><phpsyntax function="ftp_fget" usage="bool ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])">Retrieves a file from the FTP server and writes it to an open file</phpsyntax><phpsyntax function="ftp_fput" usage="bool ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])">Stores a file from an open file to the FTP server</phpsyntax><phpsyntax function="ftp_get" usage="bool ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])">Retrieves a file from the FTP server and writes it to a local file</phpsyntax><phpsyntax function="ftp_get_option" usage="mixed ftp_get_option(resource stream, int option)">Gets an FTP option</phpsyntax><phpsyntax function="ftp_login" usage="bool ftp_login(resource stream, string username, string password)">Logs into the FTP server</phpsyntax><phpsyntax function="ftp_mdtm" usage="int ftp_mdtm(resource stream, string filename)">Returns the last modification time of the file, or -1 on error</phpsyntax><phpsyntax function="ftp_mkdir" usage="string ftp_mkdir(resource stream, string directory)">Creates a directory and returns the absolute path for the new directory or false on error</phpsyntax><phpsyntax function="ftp_nb_continue" usage="int ftp_nb_continue(resource stream)">Continues retrieving/sending a file nbronously</phpsyntax><phpsyntax function="ftp_nb_fget" usage="int ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])">Retrieves a file from the FTP server asynchronly and writes it to an open file</phpsyntax><phpsyntax function="ftp_nb_fput" usage="int ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])">Stores a file from an open file to the FTP server nbronly</phpsyntax><phpsyntax function="ftp_nb_get" usage="int ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])">Retrieves a file from the FTP server nbhronly and writes it to a local file</phpsyntax><phpsyntax function="ftp_nb_put" usage="int ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])">Stores a file on the FTP server</phpsyntax><phpsyntax function="ftp_nlist" usage="array ftp_nlist(resource stream, string directory)">Returns an array of filenames in the given directory</phpsyntax><phpsyntax function="ftp_pasv" usage="bool ftp_pasv(resource stream, bool pasv)">Turns passive mode on or off</phpsyntax><phpsyntax function="ftp_put" usage="bool ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])">Stores a file on the FTP server</phpsyntax><phpsyntax function="ftp_pwd" usage="string ftp_pwd(resource stream)">Returns the present working directory</phpsyntax><phpsyntax function="ftp_raw" usage="array ftp_raw(resource stream, string command)">Sends a literal command to the FTP server</phpsyntax><phpsyntax function="ftp_rawlist" usage="array ftp_rawlist(resource stream, string directory [, bool recursive])">Returns a detailed listing of a directory as an array of output lines</phpsyntax><phpsyntax function="ftp_rename" usage="bool ftp_rename(resource stream, string src, string dest)">Renames the given file to a new path</phpsyntax><phpsyntax function="ftp_rmdir" usage="bool ftp_rmdir(resource stream, string directory)">Removes a directory</phpsyntax><phpsyntax function="ftp_set_option" usage="bool ftp_set_option(resource stream, int option, mixed value)">Sets an FTP option</phpsyntax><phpsyntax function="ftp_site" usage="bool ftp_site(resource stream, string cmd)">Sends a SITE command to the server</phpsyntax><phpsyntax function="ftp_size" usage="int ftp_size(resource stream, string filename)">Returns the size of the file, or -1 on error</phpsyntax><phpsyntax function="ftp_ssl_connect" usage="resource ftp_ssl_connect(string host [, int port [, int timeout]])">Opens a FTP-SSL stream</phpsyntax><phpsyntax function="ftp_systype" usage="string ftp_systype(resource stream)">Returns the system type identifier</phpsyntax><phpsyntax function="gd_info" usage="array gd_info()"/><phpsyntax function="imagealphablending" usage="bool imagealphablending(resource im, bool on)">Turn alpha blending mode on or off for the given image</phpsyntax><phpsyntax function="imageantialias" usage="bool imageantialias(resource im, bool on)">Should antialiased functions used or not</phpsyntax><phpsyntax function="imagearc" usage="bool imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)">Draw a partial ellipse</phpsyntax><phpsyntax function="imagechar" usage="bool imagechar(resource im, int font, int x, int y, string c, int col)">Draw a character</phpsyntax><phpsyntax function="imagecharup" usage="bool imagecharup(resource im, int font, int x, int y, string c, int col)">Draw a character rotated 90 degrees counter-clockwise</phpsyntax><phpsyntax function="imagecolorallocate" usage="int imagecolorallocate(resource im, int red, int green, int blue)">Allocate a color for an image</phpsyntax><phpsyntax function="imagecolorallocatealpha" usage="int imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)">Allocate a color with an alpha level.  Works for true color and palette based images</phpsyntax><phpsyntax function="imagecolorat" usage="int imagecolorat(resource im, int x, int y)">Get the index of the color of a pixel</phpsyntax><phpsyntax function="imagecolorclosest" usage="int imagecolorclosest(resource im, int red, int green, int blue)">Get the index of the closest color to the specified color</phpsyntax><phpsyntax function="imagecolorclosestalpha" usage="int imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)">Find the closest matching colour with alpha transparency</phpsyntax><phpsyntax function="imagecolorclosesthwb" usage="int imagecolorclosesthwb(resource im, int red, int green, int blue)">Get the index of the color which has the hue, white and blackness nearest to the given color</phpsyntax><phpsyntax function="imagecolordeallocate" usage="bool imagecolordeallocate(resource im, int index)">De-allocate a color for an image</phpsyntax><phpsyntax function="imagecolorexact" usage="int imagecolorexact(resource im, int red, int green, int blue)">Get the index of the specified color</phpsyntax><phpsyntax function="imagecolorexactalpha" usage="int imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)">Find exact match for colour with transparency</phpsyntax><phpsyntax function="imagecolormatch" usage="bool imagecolormatch(resource im1, resource im2)">Makes the colors of the palette version of an image more closely match the true color version</phpsyntax><phpsyntax function="imagecolorresolve" usage="int imagecolorresolve(resource im, int red, int green, int blue)">Get the index of the specified color or its closest possible alternative</phpsyntax><phpsyntax function="imagecolorresolvealpha" usage="int imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)">Resolve/Allocate a colour with an alpha level.  Works for true colour and palette based images</phpsyntax><phpsyntax function="imagecolorset" usage="void imagecolorset(resource im, int col, int red, int green, int blue)">Set the color for the specified palette index</phpsyntax><phpsyntax function="imagecolorsforindex" usage="array imagecolorsforindex(resource im, int col)">Get the colors for an index</phpsyntax><phpsyntax function="imagecolorstotal" usage="int imagecolorstotal(resource im)">Find out the number of colors in an image's palette</phpsyntax><phpsyntax function="imagecolortransparent" usage="int imagecolortransparent(resource im [, int col])">Define a color as transparent</phpsyntax><phpsyntax function="imagecopy" usage="bool imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)">Copy part of an image</phpsyntax><phpsyntax function="imagecopymerge" usage="bool imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)">Merge one part of an image with another</phpsyntax><phpsyntax function="imagecopymergegray" usage="bool imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)">Merge one part of an image with another</phpsyntax><phpsyntax function="imagecopyresampled" usage="bool imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)">Copy and resize part of an image using resampling to help ensure clarity</phpsyntax><phpsyntax function="imagecopyresized" usage="bool imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)">Copy and resize part of an image</phpsyntax><phpsyntax function="imagecreate" usage="resource imagecreate(int x_size, int y_size)">Create a new image</phpsyntax><phpsyntax function="imagecreatefromgd" usage="resource imagecreatefromgd(string filename)">Create a new image from GD file or URL</phpsyntax><phpsyntax function="imagecreatefromgif" usage="resource imagecreatefromgif(string filename)">Create a new image from GIF file or URL</phpsyntax><phpsyntax function="imagecreatefromjpeg" usage="resource imagecreatefromjpeg(string filename)">Create a new image from JPEG file or URL</phpsyntax><phpsyntax function="imagecreatefrompng" usage="resource imagecreatefrompng(string filename)">Create a new image from PNG file or URL</phpsyntax><phpsyntax function="imagecreatefromstring" usage="resource imagecreatefromstring(string image)">Create a new image from the image stream in the string</phpsyntax><phpsyntax function="imagecreatefromwbmp" usage="resource imagecreatefromwbmp(string filename)">Create a new image from WBMP file or URL</phpsyntax><phpsyntax function="imagecreatefromxbm" usage="resource imagecreatefromxbm(string filename)">Create a new image from XBM file or URL</phpsyntax><phpsyntax function="imagecreatefromxpm" usage="resource imagecreatefromxpm(string filename)">Create a new image from XPM file or URL</phpsyntax><phpsyntax function="imagecreatetruecolor" usage="resource imagecreatetruecolor(int x_size, int y_size)">Create a new true color image</phpsyntax><phpsyntax function="imagedashedline" usage="bool imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)">Draw a dashed line</phpsyntax><phpsyntax function="imagedestroy" usage="bool imagedestroy(resource im)">Destroy an image</phpsyntax><phpsyntax function="imageellipse" usage="bool imageellipse(resource im, int cx, int cy, int w, int h, int color)">Draw an ellipse</phpsyntax><phpsyntax function="imagefill" usage="bool imagefill(resource im, int x, int y, int col)">Flood fill</phpsyntax><phpsyntax function="imagefilledarc" usage="bool imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)">Draw a filled partial ellipse</phpsyntax><phpsyntax function="imagefilledellipse" usage="bool imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)">Draw an ellipse</phpsyntax><phpsyntax function="imagefilledpolygon" usage="bool imagefilledpolygon(resource im, array point, int num_points, int col)">Draw a filled polygon</phpsyntax><phpsyntax function="imagefilledrectangle" usage="bool imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)">Draw a filled rectangle</phpsyntax><phpsyntax function="imagefilltoborder" usage="bool imagefilltoborder(resource im, int x, int y, int border, int col)">Flood fill to specific color</phpsyntax><phpsyntax function="imagefilter" usage="bool imagefilter(resource src_im, int filtertype, [args] )">Applies Filter an image using a custom angle</phpsyntax><phpsyntax function="imagefontheight" usage="int imagefontheight(int font)">Get font height</phpsyntax><phpsyntax function="imagefontwidth" usage="int imagefontwidth(int font)">Get font width</phpsyntax><phpsyntax function="imageftbbox" usage="array imageftbbox(int size, int angle, string font_file, string text[, array extrainfo])">Give the bounding box of a text using fonts via freetype2</phpsyntax><phpsyntax function="imagefttext" usage="array imagefttext(resource im, int size, int angle, int x, int y, int col, string font_file, string text, [array extrainfo])">Write text to the image using fonts via freetype2</phpsyntax><phpsyntax function="imagegammacorrect" usage="bool imagegammacorrect(resource im, float inputgamma, float outputgamma)">Apply a gamma correction to a GD image</phpsyntax><phpsyntax function="imagegd" usage="bool imagegd(resource im [, string filename])">Output GD image to browser or file</phpsyntax><phpsyntax function="imagegif" usage="bool imagegif(resource im [, string filename])">Output GIF image to browser or file</phpsyntax><phpsyntax function="imageinterlace" usage="int imageinterlace(resource im [, int interlace])">Enable or disable interlace</phpsyntax><phpsyntax function="imageistruecolor" usage="bool imageistruecolor(resource im)">return true if the image uses truecolor</phpsyntax><phpsyntax function="imagejpeg" usage="bool imagejpeg(resource im [, string filename [, int quality]])">Output JPEG image to browser or file</phpsyntax><phpsyntax function="imagelayereffect" usage="bool imagelayereffect(resource im, int effect)">Set the alpha blending flag to use the bundled libgd layering effects</phpsyntax><phpsyntax function="imageline" usage="bool imageline(resource im, int x1, int y1, int x2, int y2, int col)">Draw a line</phpsyntax><phpsyntax function="imageloadfont" usage="int imageloadfont(string filename)">Load a new font</phpsyntax><phpsyntax function="imagepalettecopy" usage="void imagepalettecopy(resource dst, resource src)">Copy the palette from the src image onto the dst image</phpsyntax><phpsyntax function="imagepng" usage="bool imagepng(resource im [, string filename])">Output PNG image to browser or file</phpsyntax><phpsyntax function="imagepolygon" usage="bool imagepolygon(resource im, array point, int num_points, int col)">Draw a polygon</phpsyntax><phpsyntax function="imagepsbbox" usage="array imagepsbbox(string text, resource font, int size [, int space, int tightness, int angle])">Return the bounding box needed by a string if rasterized</phpsyntax><phpsyntax function="imagepscopyfont" usage="int imagepscopyfont(int font_index)">Make a copy of a font for purposes like extending or reenconding</phpsyntax><phpsyntax function="imagepsencodefont" usage="bool imagepsencodefont(resource font_index, string filename)">To change a fonts character encoding vector</phpsyntax><phpsyntax function="imagepsextendfont" usage="bool imagepsextendfont(resource font_index, float extend)">Extend or or condense (if extend &lt; 1) a font</phpsyntax><phpsyntax function="imagepsfreefont" usage="bool imagepsfreefont(resource font_index)">Free memory used by a font</phpsyntax><phpsyntax function="imagepsloadfont" usage="resource imagepsloadfont(string pathname)">Load a new font from specified file</phpsyntax><phpsyntax function="imagepsslantfont" usage="bool imagepsslantfont(resource font_index, float slant)">Slant a font</phpsyntax><phpsyntax function="imagepstext" usage="array imagepstext(resource image, string text, resource font, int size, int xcoord, int ycoord [, int space, int tightness, float angle, int antialias])">Rasterize a string over an image</phpsyntax><phpsyntax function="imagerectangle" usage="bool imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)">Draw a rectangle</phpsyntax><phpsyntax function="imagerotate" usage="resource imagerotate(resource src_im, float angle, int bgdcolor)">Rotate an image using a custom angle</phpsyntax><phpsyntax function="imagesavealpha" usage="bool imagesavealpha(resource im, bool on)">Include alpha channel to a saved image</phpsyntax><phpsyntax function="imagesetbrush" usage="bool imagesetbrush(resource image, resource brush)">Set the brush image to $brush when filling $image with the "IMG_COLOR_BRUSHED" color</phpsyntax><phpsyntax function="imagesetpixel" usage="bool imagesetpixel(resource im, int x, int y, int col)">Set a single pixel</phpsyntax><phpsyntax function="imagesetstyle" usage="bool imagesetstyle(resource im, array styles)">Set the line drawing styles for use with imageline and IMG_COLOR_STYLED.</phpsyntax><phpsyntax function="imagesetthickness" usage="bool imagesetthickness(resource im, int thickness)">Set line thickness for drawing lines, ellipses, rectangles, polygons etc.</phpsyntax><phpsyntax function="imagesettile" usage="bool imagesettile(resource image, resource tile)">Set the tile image to $tile when filling $image with the "IMG_COLOR_TILED" color</phpsyntax><phpsyntax function="imagestring" usage="bool imagestring(resource im, int font, int x, int y, string str, int col)">Draw a string horizontally</phpsyntax><phpsyntax function="imagestringup" usage="bool imagestringup(resource im, int font, int x, int y, string str, int col)">Draw a string vertically - rotated 90 degrees counter-clockwise</phpsyntax><phpsyntax function="imagesx" usage="int imagesx(resource im)">Get image width</phpsyntax><phpsyntax function="imagesy" usage="int imagesy(resource im)">Get image height</phpsyntax><phpsyntax function="imagetruecolortopalette" usage="void imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)">Convert a true colour image to a palette based image with a number of colours, optionally using dithering.</phpsyntax><phpsyntax function="imagettfbbox" usage="array imagettfbbox(int size, int angle, string font_file, string text)">Give the bounding box of a text using TrueType fonts</phpsyntax><phpsyntax function="imagettftext" usage="array imagettftext(resource im, int size, int angle, int x, int y, int col, string font_file, string text)">Write text to the image using a TrueType font</phpsyntax><phpsyntax function="imagetypes" usage="int imagetypes(void)">Return the types of images supported in a bitfield - 1=GIF, 2=JPEG, 4=PNG, 8=WBMP, 16=XPM</phpsyntax><phpsyntax function="imagewbmp" usage="bool imagewbmp(resource im [, string filename, [, int foreground]])">Output WBMP image to browser or file</phpsyntax><phpsyntax function="imagexbm" usage="int imagexbm(int im, string filename [, int foreground])">Output XBM image to browser or file</phpsyntax><phpsyntax function="bindtextdomain" usage="string bindtextdomain(string domain_name, string dir)">Bind to the text domain domain_name, looking for translations in dir. Returns the current domain</phpsyntax><phpsyntax function="dcgettext" usage="string dcgettext(string domain_name, string msgid, long category)">Return the translation of msgid for domain_name and category, or msgid unaltered if a translation does not exist</phpsyntax><phpsyntax function="dgettext" usage="string dgettext(string domain_name, string msgid)">Return the translation of msgid for domain_name, or msgid unaltered if a translation does not exist</phpsyntax><phpsyntax function="gettext" usage="string gettext(string msgid)">Return the translation of msgid for the current domain, or msgid unaltered if a translation does not exist</phpsyntax><phpsyntax function="ngettext" usage="string ngettext(string MSGID1, string MSGID2, int N)">Plural version of gettext()</phpsyntax><phpsyntax function="textdomain" usage="string textdomain(string domain)">Set the textdomain to "domain". Returns the current domain</phpsyntax><phpsyntax function="gmp_abs" usage="resource gmp_abs(resource a)">Calculates absolute value</phpsyntax><phpsyntax function="gmp_add" usage="resource gmp_add(resource a, resource b)">Add a and b</phpsyntax><phpsyntax function="gmp_and" usage="resource gmp_and(resource a, resource b)">Calculates logical AND of a and b</phpsyntax><phpsyntax function="gmp_clrbit" usage="void gmp_clrbit(resource &amp;a, int index)">Clears bit in a</phpsyntax><phpsyntax function="gmp_cmp" usage="int gmp_cmp(resource a, resource b)">Compares two numbers</phpsyntax><phpsyntax function="gmp_com" usage="resource gmp_com(resource a)">Calculates one's complement of a</phpsyntax><phpsyntax function="gmp_div_q" usage="resource gmp_div_q(resource a, resource b [, int round])">Divide a by b, returns quotient only</phpsyntax><phpsyntax function="gmp_div_qr" usage="array gmp_div_qr(resource a, resource b [, int round])">Divide a by b, returns quotient and reminder</phpsyntax><phpsyntax function="gmp_div_r" usage="resource gmp_div_r(resource a, resource b [, int round])">Divide a by b, returns reminder only</phpsyntax><phpsyntax function="gmp_divexact" usage="resource gmp_divexact(resource a, resource b)">Divide a by b using exact division algorithm</phpsyntax><phpsyntax function="gmp_fact" usage="resource gmp_fact(int a)">Calculates factorial function</phpsyntax><phpsyntax function="gmp_gcd" usage="resource gmp_gcd(resource a, resource b)">Computes greatest common denominator (gcd) of a and b</phpsyntax><phpsyntax function="gmp_gcdext" usage="array gmp_gcdext(resource a, resource b)">Computes G, S, and T, such that AS      BT = G = `gcd' (A, B)</phpsyntax><phpsyntax function="gmp_hamdist" usage="int gmp_hamdist(resource a, resource b)">Calculates hamming distance between a and b</phpsyntax><phpsyntax function="gmp_init" usage="resource gmp_init(mixed number [, int base])">Initializes GMP number</phpsyntax><phpsyntax function="gmp_intval" usage="int gmp_intval(resource gmpnumber)">Gets signed long value of GMP number</phpsyntax><phpsyntax function="gmp_invert" usage="resource gmp_invert(resource a, resource b)">Computes the inverse of a modulo b</phpsyntax><phpsyntax function="gmp_jacobi" usage="int gmp_jacobi(resource a, resource b)">Computes Jacobi symbol</phpsyntax><phpsyntax function="gmp_legendre" usage="int gmp_legendre(resource a, resource b)">Computes Legendre symbol</phpsyntax><phpsyntax function="gmp_mod" usage="resource gmp_mod(resource a, resource b)">Computes a modulo b</phpsyntax><phpsyntax function="gmp_mul" usage="resource gmp_mul(resource a, resource b)">Multiply a and b</phpsyntax><phpsyntax function="gmp_neg" usage="resource gmp_neg(resource a)">Negates a number</phpsyntax><phpsyntax function="gmp_or" usage="resource gmp_or(resource a, resource b)">Calculates logical OR of a and b</phpsyntax><phpsyntax function="gmp_perfect_square" usage="bool gmp_perfect_square(resource a)">Checks if a is an exact square</phpsyntax><phpsyntax function="gmp_popcount" usage="int gmp_popcount(resource a)">Calculates the population count of a</phpsyntax><phpsyntax function="gmp_pow" usage="resource gmp_pow(resource base, int exp)">Raise base to power exp</phpsyntax><phpsyntax function="gmp_powm" usage="resource gmp_powm(resource base, resource exp, resource mod)">Raise base to power exp and take result modulo mod</phpsyntax><phpsyntax function="gmp_prob_prime" usage="int gmp_prob_prime(resource a[, int reps])">Checks if a is "probably prime"</phpsyntax><phpsyntax function="gmp_random" usage="resource gmp_random([int limiter])">Gets random number</phpsyntax><phpsyntax function="gmp_setbit" usage="void gmp_setbit(resource &amp;a, int index[, bool set_clear])">Sets or clear bit in a</phpsyntax><phpsyntax function="gmp_sign" usage="int gmp_sign(resource a)">Gets the sign of the number</phpsyntax><phpsyntax function="gmp_sqrt" usage="resource gmp_sqrt(resource a)">Takes integer part of square root of a</phpsyntax><phpsyntax function="gmp_sqrtrem" usage="array gmp_sqrtrem(resource a)">Square root with remainder</phpsyntax><phpsyntax function="gmp_strval" usage="string gmp_strval(resource gmpnumber [, int base])">Gets string representation of GMP number</phpsyntax><phpsyntax function="gmp_sub" usage="resource gmp_sub(resource a, resource b)">Subtract b from a</phpsyntax><phpsyntax function="gmp_xor" usage="resource gmp_xor(resource a, resource b)">Calculates logical exclusive OR of a and b</phpsyntax><phpsyntax function="iconv" usage="string iconv(string in_charset, string out_charset, string str)">Returns str converted to the out_charset character set</phpsyntax><phpsyntax function="iconv_get_encoding" usage="mixed iconv_get_encoding([string type])">Get internal encoding and output encoding for ob_iconv_handler()</phpsyntax><phpsyntax function="iconv_mime_decode" usage="string iconv_mime_decode(string encoded_string [, int mode, string charset])">Decodes a mime header field</phpsyntax><phpsyntax function="iconv_mime_decode_headers" usage="array iconv_mime_decode_headers(string headers [, int mode, string charset])">Decodes multiple mime header fields</phpsyntax><phpsyntax function="iconv_mime_encode" usage="string iconv_mime_encode(string field_name, string field_value, [, array preference])">Composes a mime header field with field_name and field_value in a specified scheme</phpsyntax><phpsyntax function="iconv_set_encoding" usage="bool iconv_set_encoding(string type, string charset)">Sets internal encoding and output encoding for ob_iconv_handler()</phpsyntax><phpsyntax function="iconv_strlen" usage="int iconv_strlen(string str [, string charset])">Returns the character count of str</phpsyntax><phpsyntax function="iconv_strpos" usage="int iconv_strpos(string haystack, string needle, int offset [, string charset])">Finds position of first occurrence of needle within part of haystack beginning with offset</phpsyntax><phpsyntax function="iconv_strrpos" usage="int iconv_strrpos(string haystack, string needle [, string charset])">Finds position of last occurrence of needle within part of haystack beginning with offset</phpsyntax><phpsyntax function="iconv_substr" usage="string iconv_substr(string str, int offset, [int length, string charset])">Returns specified part of a string</phpsyntax><phpsyntax function="ob_iconv_handler" usage="string ob_iconv_handler(string contents, int status)">Returns str in output buffer converted to the iconv.output_encoding character set</phpsyntax><phpsyntax function="imap_alerts" usage="array imap_alerts(void)">Returns an array of all IMAP alerts that have been generated since the last page load or since the last imap_alerts() call, whichever came last. The alert stack is cleared after imap_alerts() is called.</phpsyntax><phpsyntax function="imap_append" usage="bool imap_append(resource stream_id, string folder, string message [, string options])">Append a new message to a specified mailbox</phpsyntax><phpsyntax function="imap_binary" usage="string imap_binary(string text)">Convert an 8bit string to a base64 string</phpsyntax><phpsyntax function="imap_body" usage="string imap_body(resource stream_id, int msg_no [, int options])">Read the message body</phpsyntax><phpsyntax function="imap_bodystruct" usage="object imap_bodystruct(resource stream_id, int msg_no, int section)">Read the structure of a specified body section of a specific message</phpsyntax><phpsyntax function="imap_check" usage="object imap_check(resource stream_id)">Get mailbox properties</phpsyntax><phpsyntax function="imap_clearflag_full" usage="bool imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])">Clears flags on messages</phpsyntax><phpsyntax function="imap_close" usage="bool imap_close(resource stream_id [, int options])">Close an IMAP stream</phpsyntax><phpsyntax function="imap_createmailbox" usage="bool imap_createmailbox(resource stream_id, string mailbox)">Create a new mailbox</phpsyntax><phpsyntax function="imap_delete" usage="bool imap_delete(resource stream_id, int msg_no [, int options])">Mark a message for deletion</phpsyntax><phpsyntax function="imap_deletemailbox" usage="bool imap_deletemailbox(resource stream_id, string mailbox)">Delete a mailbox</phpsyntax><phpsyntax function="imap_errors" usage="array imap_errors(void)">Returns an array of all IMAP errors generated since the last page load, or since the last imap_errors() call, whichever came last. The error stack is cleared after imap_errors() is called.</phpsyntax><phpsyntax function="imap_expunge" usage="bool imap_expunge(resource stream_id)">Permanently delete all messages marked for deletion</phpsyntax><phpsyntax function="imap_fetch_overview" usage="array imap_fetch_overview(resource stream_id, int msg_no [, int options])">Read an overview of the information in the headers of the given message sequence</phpsyntax><phpsyntax function="imap_fetchbody" usage="string imap_fetchbody(resource stream_id, int msg_no, int section [, int options])">Get a specific body section</phpsyntax><phpsyntax function="imap_fetchheader" usage="string imap_fetchheader(resource stream_id, int msg_no [, int options])">Get the full unfiltered header for a message</phpsyntax><phpsyntax function="imap_fetchstructure" usage="object imap_fetchstructure(resource stream_id, int msg_no [, int options])">Read the full structure of a message</phpsyntax><phpsyntax function="imap_get_quota" usage="array imap_get_quota(resource stream_id, string qroot)">Returns the quota set to the mailbox account qroot</phpsyntax><phpsyntax function="imap_get_quotaroot" usage="array imap_get_quotaroot(resource stream_id, string mbox)">Returns the quota set to the mailbox account mbox</phpsyntax><phpsyntax function="imap_getacl" usage="array imap_getacl(resource stream_id, string mailbox)">Gets the ACL for a given mailbox</phpsyntax><phpsyntax function="imap_getmailboxes" usage="array imap_getmailboxes(resource stream_id, string ref, string pattern)">Reads the list of mailboxes and returns a full array of objects containing name, attributes, and delimiter</phpsyntax><phpsyntax function="imap_getsubscribed" usage="array imap_getsubscribed(resource stream_id, string ref, string pattern)">Return a list of subscribed mailboxes, in the same format as imap_getmailboxes()</phpsyntax><phpsyntax function="imap_headerinfo" usage="object imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])">Read the headers of the message</phpsyntax><phpsyntax function="imap_headers" usage="array imap_headers(resource stream_id)">Returns headers for all messages in a mailbox</phpsyntax><phpsyntax function="imap_last_error" usage="string imap_last_error(void)">Returns the last error that was generated by an IMAP function. The error stack is NOT cleared after this call.</phpsyntax><phpsyntax function="imap_list" usage="array imap_list(resource stream_id, string ref, string pattern)">Read the list of mailboxes</phpsyntax><phpsyntax function="imap_lsub" usage="array imap_lsub(resource stream_id, string ref, string pattern)">Return a list of subscribed mailboxes</phpsyntax><phpsyntax function="imap_mail" usage="bool imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])">Send an email message</phpsyntax><phpsyntax function="imap_mail_compose" usage="string imap_mail_compose(array envelope, array body)">Create a MIME message based on given envelope and body sections</phpsyntax><phpsyntax function="imap_mail_copy" usage="bool imap_mail_copy(resource stream_id, int msg_no, string mailbox [, int options])">Copy specified message to a mailbox</phpsyntax><phpsyntax function="imap_mail_move" usage="bool imap_mail_move(resource stream_id, int msg_no, string mailbox [, int options])">Move specified message to a mailbox</phpsyntax><phpsyntax function="imap_mailboxmsginfo" usage="object imap_mailboxmsginfo(resource stream_id)">Returns info about the current mailbox</phpsyntax><phpsyntax function="imap_mime_header_decode" usage="array imap_mime_header_decode(string str)">Decode mime header element in accordance with RFC 2047 and return array of objects containing 'charset' encoding and decoded 'text'</phpsyntax><phpsyntax function="imap_msgno" usage="int imap_msgno(resource stream_id, int unique_msg_id)">Get the sequence number associated with a UID</phpsyntax><phpsyntax function="imap_num_msg" usage="int imap_num_msg(resource stream_id)">Gives the number of messages in the current mailbox</phpsyntax><phpsyntax function="imap_num_recent" usage="int imap_num_recent(resource stream_id)">Gives the number of recent messages in current mailbox</phpsyntax><phpsyntax function="imap_open" usage="resource imap_open(string mailbox, string user, string password [, int options])">Open an IMAP stream to a mailbox</phpsyntax><phpsyntax function="imap_ping" usage="bool imap_ping(resource stream_id)">Check if the IMAP stream is still active</phpsyntax><phpsyntax function="imap_qprint" usage="string imap_qprint(string text)">Convert a quoted-printable string to an 8-bit string</phpsyntax><phpsyntax function="imap_renamemailbox" usage="bool imap_renamemailbox(resource stream_id, string old_name, string new_name)">Rename a mailbox</phpsyntax><phpsyntax function="imap_reopen" usage="bool imap_reopen(resource stream_id, string mailbox [, int options])">Reopen an IMAP stream to a new mailbox</phpsyntax><phpsyntax function="imap_scan" usage="array imap_scan(resource stream_id, string ref, string pattern, string content)">Read list of mailboxes containing a certain string</phpsyntax><phpsyntax function="imap_search" usage="array imap_search(resource stream_id, string criteria [, int options [, string charset]])">Return a list of messages matching the given criteria</phpsyntax><phpsyntax function="imap_set_quota" usage="bool imap_set_quota(resource stream_id, string qroot, int mailbox_size)">Will set the quota for qroot mailbox</phpsyntax><phpsyntax function="imap_setacl" usage="bool imap_setacl(resource stream_id, string mailbox, string id, string rights)">Sets the ACL for a given mailbox</phpsyntax><phpsyntax function="imap_setflag_full" usage="bool imap_setflag_full(resource stream_id, string sequence, string flag [, int options])">Sets flags on messages</phpsyntax><phpsyntax function="imap_sort" usage="array imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])">Sort an array of message headers, optionally including only messages that meet specified criteria.</phpsyntax><phpsyntax function="imap_status" usage="object imap_status(resource stream_id, string mailbox, int options)">Get status info from a mailbox</phpsyntax><phpsyntax function="imap_subscribe" usage="bool imap_subscribe(resource stream_id, string mailbox)">Subscribe to a mailbox</phpsyntax><phpsyntax function="imap_thread" usage="array imap_thread(resource stream_id [, int options])">Return threaded by REFERENCES tree</phpsyntax><phpsyntax function="imap_timeout" usage="mixed imap_timeout(int timeout_type [, int timeout])">Set or fetch imap timeout</phpsyntax><phpsyntax function="imap_uid" usage="int imap_uid(resource stream_id, int msg_no)">Get the unique message id associated with a standard sequential message number</phpsyntax><phpsyntax function="imap_undelete" usage="bool imap_undelete(resource stream_id, int msg_no)">Remove the delete flag from a message</phpsyntax><phpsyntax function="imap_unsubscribe" usage="bool imap_unsubscribe(resource stream_id, string mailbox)">Unsubscribe from a mailbox</phpsyntax><phpsyntax function="ifx_affected_rows" usage="int ifx_affected_rows(resource resultid)">Returns the number of rows affected by query identified by resultid</phpsyntax><phpsyntax function="ifx_blobinfile_mode" usage="bool ifx_blobinfile_mode(int mode)">Sets the default blob-mode for all select-queries</phpsyntax><phpsyntax function="ifx_byteasvarchar" usage="bool ifx_byteasvarchar(int mode)">Sets the default byte-mode for all select-queries</phpsyntax><phpsyntax function="ifx_close" usage="bool ifx_close([resource connid])">Close informix connection</phpsyntax><phpsyntax function="ifx_connect" usage="resource ifx_connect([string database [, string userid [, string password]]])">Connects to database using userid/password, returns connection id</phpsyntax><phpsyntax function="ifx_copy_blob" usage="int ifx_copy_blob(int bid)">Duplicates the given blob-object</phpsyntax><phpsyntax function="ifx_create_blob" usage="int ifx_create_blob(int type, int mode, string param)">Creates a blob-object</phpsyntax><phpsyntax function="ifx_create_char" usage="int ifx_create_char(string param)">Creates a char-object</phpsyntax><phpsyntax function="ifx_do" usage="bool ifx_do(resource resultid)">Executes a previously prepared query or opens a cursor for it</phpsyntax><phpsyntax function="ifx_error" usage="string ifx_error([resource connection_id])">Returns the Informix error codes (SQLSTATE &amp; SQLCODE)</phpsyntax><phpsyntax function="ifx_errormsg" usage="string ifx_errormsg([int errorcode])">Returns the Informix errormessage associated with</phpsyntax><phpsyntax function="ifx_fetch_row" usage="array ifx_fetch_row(resource resultid [, mixed position])">Fetches the next row or &lt;position&gt; row if using a scroll cursor</phpsyntax><phpsyntax function="ifx_fieldproperties" usage="array ifx_fieldproperties(resource resultid)">Returns an associative for query &lt;resultid&gt; array with fieldnames as key</phpsyntax><phpsyntax function="ifx_fieldtypes" usage="array ifx_fieldtypes(resource resultid)">Returns an associative array with fieldnames as key for query &lt;resultid&gt;</phpsyntax><phpsyntax function="ifx_free_blob" usage="int ifx_free_blob(int bid)">Deletes the blob-object</phpsyntax><phpsyntax function="ifx_free_char" usage="bool ifx_free_char(int bid)">Deletes the char-object</phpsyntax><phpsyntax function="ifx_free_result" usage="bool ifx_free_result(resource resultid)">Releases resources for query associated with resultid</phpsyntax><phpsyntax function="ifx_get_blob" usage="string ifx_get_blob(int bid)">Returns the content of the blob-object</phpsyntax><phpsyntax function="ifx_get_char" usage="string ifx_get_char(int bid)">Returns the content of the char-object</phpsyntax><phpsyntax function="ifx_getsqlca" usage="array ifx_getsqlca(resource resultid)">Returns the sqlerrd[] fields of the sqlca struct for query resultid</phpsyntax><phpsyntax function="ifx_htmltbl_result" usage="int ifx_htmltbl_result(resource resultid [, string htmltableoptions])">Formats all rows of the resultid query into a html table</phpsyntax><phpsyntax function="ifx_nullformat" usage="bool ifx_nullformat(int mode)">Sets the default return value of a NULL-value on a fetch-row</phpsyntax><phpsyntax function="ifx_num_fields" usage="int ifx_num_fields(resource resultid)">Returns the number of columns in query resultid</phpsyntax><phpsyntax function="ifx_num_rows" usage="int ifx_num_rows(resource resultid)">Returns the number of rows already fetched for query identified by resultid</phpsyntax><phpsyntax function="ifx_pconnect" usage="resource ifx_pconnect([string database [, string userid [, string password]]])">Connects to database using userid/password, returns connection id</phpsyntax><phpsyntax function="ifx_prepare" usage="resource ifx_prepare(string query, resource connid [, int cursortype] [, array idarray])">Prepare a query on a given connection</phpsyntax><phpsyntax function="ifx_query" usage="resource ifx_query(string query, resource connid [, int cursortype] [, array idarray])">Perform a query on a given connection</phpsyntax><phpsyntax function="ifx_textasvarchar" usage="bool ifx_textasvarchar(int mode)">Sets the default text-mode for all select-queries</phpsyntax><phpsyntax function="ifx_update_blob" usage="int ifx_update_blob(int bid, string content)">Updates the content of the blob-object</phpsyntax><phpsyntax function="ifx_update_char" usage="bool ifx_update_char(int bid, string content)">Updates the content of the char-object</phpsyntax><phpsyntax function="ifxus_close_slob" usage="bool ifxus_close_slob(int bid)">Deletes the slob-object</phpsyntax><phpsyntax function="ifxus_create_slob" usage="int ifxus_create_slob(int mode)">Creates a slob-object and opens it</phpsyntax><phpsyntax function="ifxus_free_slob" usage="bool ifxus_free_slob(int bid)">Deletes the slob-object</phpsyntax><phpsyntax function="ifxus_open_slob" usage="int ifxus_open_slob(int bid, int mode)">Opens an slob-object</phpsyntax><phpsyntax function="ifxus_read_slob" usage="string ifxus_read_slob(int bid, int nbytes)">Reads nbytes of the slob-object</phpsyntax><phpsyntax function="ifxus_seek_slob" usage="int ifxus_seek_slob(int bid, int mode, long offset)">Sets the current file or seek position of an open slob-object</phpsyntax><phpsyntax function="ifxus_tell_slob" usage="int ifxus_tell_slob(int bid)">Returns the current file or seek position of an open slob-object</phpsyntax><phpsyntax function="ifxus_write_slob" usage="int ifxus_write_slob(int bid, string content)">Writes a string into the slob-object</phpsyntax><phpsyntax function="ingres_autocommit" usage="bool ingres_autocommit([resource link])">Switch autocommit on or off</phpsyntax><phpsyntax function="ingres_close" usage="bool ingres_close([resource link])">Close an Ingres II database connection</phpsyntax><phpsyntax function="ingres_commit" usage="bool ingres_commit([resource link])">Commit a transaction</phpsyntax><phpsyntax function="ingres_connect" usage="resource ingres_connect([string database [, string username [, string password]]])">Open a connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]</phpsyntax><phpsyntax function="ingres_fetch_array" usage="array ingres_fetch_array([int result_type [, resource link]])">Fetch a row of result into an array result_type can be II_NUM for enumerated array, II_ASSOC for associative array, or II_BOTH (default)</phpsyntax><phpsyntax function="ingres_fetch_object" usage="array ingres_fetch_object([int result_type [, resource link]])">Fetch a row of result into an object result_type can be II_NUM for enumerated object, II_ASSOC for associative object, or II_BOTH (default)</phpsyntax><phpsyntax function="ingres_fetch_row" usage="array ingres_fetch_row([resource link])">Fetch a row of result into an enumerated array</phpsyntax><phpsyntax function="ingres_field_length" usage="string ingres_field_length(int index [, resource link])">Return the length of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</phpsyntax><phpsyntax function="ingres_field_name" usage="string ingres_field_name(int index [, resource link])">Return the name of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</phpsyntax><phpsyntax function="ingres_field_nullable" usage="string ingres_field_nullable(int index [, resource link])">Return true if the field is nullable and false otherwise index must be &gt;0 and &lt;= ingres_num_fields()</phpsyntax><phpsyntax function="ingres_field_precision" usage="string ingres_field_precision(int index [, resource link])">Return the precision of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</phpsyntax><phpsyntax function="ingres_field_scale" usage="string ingres_field_scale(int index [, resource link])">Return the scale of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</phpsyntax><phpsyntax function="ingres_field_type" usage="string ingres_field_type(int index [, resource link])">Return the type of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</phpsyntax><phpsyntax function="ingres_num_fields" usage="int ingres_num_fields([resource link])">Return the number of fields returned by the last query</phpsyntax><phpsyntax function="ingres_num_rows" usage="int ingres_num_rows([resource link])">Return the number of rows affected/returned by the last query</phpsyntax><phpsyntax function="ingres_pconnect" usage="resource ingres_pconnect([string database [, string username [, string password]]])">Open a persistent connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]</phpsyntax><phpsyntax function="ingres_query" usage="bool ingres_query(string query [, resource link])">Send a SQL query to Ingres II</phpsyntax><phpsyntax function="ingres_rollback" usage="bool ingres_rollback([resource link])">Roll back a transaction</phpsyntax><phpsyntax function="ibase_blob_add" usage="bool ibase_blob_add(resource blob_handle, string data)">Add data into created blob</phpsyntax><phpsyntax function="ibase_blob_cancel" usage="bool ibase_blob_cancel(resource blob_handle)">Cancel creating blob</phpsyntax><phpsyntax function="ibase_blob_close" usage="string ibase_blob_close(resource blob_handle)">Close blob</phpsyntax><phpsyntax function="ibase_blob_create" usage="resource ibase_blob_create([resource link_identifier])">Create blob for adding data</phpsyntax><phpsyntax function="ibase_blob_echo" usage="bool ibase_blob_echo([ resource link_identifier, ] string blob_id)">Output blob contents to browser</phpsyntax><phpsyntax function="ibase_blob_get" usage="string ibase_blob_get(resource blob_handle, int len)">Get len bytes data from open blob</phpsyntax><phpsyntax function="ibase_blob_import" usage="string ibase_blob_import([ resource link_identifier, ] resource file)">Create blob, copy file in it, and close it</phpsyntax><phpsyntax function="ibase_blob_info" usage="array ibase_blob_info([ resource link_identifier, ] string blob_id)">Return blob length and other useful info</phpsyntax><phpsyntax function="ibase_blob_open" usage="resource ibase_blob_open([ resource link_identifier, ] string blob_id)">Open blob for retrieving data parts</phpsyntax><phpsyntax function="ibase_free_event_handler" usage="bool ibase_free_event_handler(resource event)">Frees the event handler set by ibase_set_event_handler()</phpsyntax><phpsyntax function="ibase_set_event_handler" usage="resource ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])">Register the callback for handling each of the named events</phpsyntax><phpsyntax function="ibase_wait_event" usage="string ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])">Waits for any one of the passed Interbase events to be posted by the database, and returns its name</phpsyntax><phpsyntax function="ibase_affected_rows" usage="int ibase_affected_rows( [ resource link_identifier ] )">Returns the number of rows affected by the previous INSERT, UPDATE or DELETE statement</phpsyntax><phpsyntax function="ibase_execute" usage="mixed ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])">Execute a previously prepared query</phpsyntax><phpsyntax function="ibase_fetch_assoc" usage="array ibase_fetch_assoc(resource result [, int fetch_flags])">Fetch a row  from the results of a query</phpsyntax><phpsyntax function="ibase_fetch_object" usage="object ibase_fetch_object(resource result [, int fetch_flags])">Fetch a object from the results of a query</phpsyntax><phpsyntax function="ibase_fetch_row" usage="array ibase_fetch_row(resource result [, int fetch_flags])">Fetch a row  from the results of a query</phpsyntax><phpsyntax function="ibase_field_info" usage="array ibase_field_info(resource query_result, int field_number)">Get information about a field</phpsyntax><phpsyntax function="ibase_free_query" usage="bool ibase_free_query(resource query)">Free memory used by a query</phpsyntax><phpsyntax function="ibase_free_result" usage="bool ibase_free_result(resource result)">Free the memory used by a result</phpsyntax><phpsyntax function="ibase_name_result" usage="bool ibase_name_result(resource result, string name)">Assign a name to a result for use with ... WHERE CURRENT OF &lt;name&gt; statements</phpsyntax><phpsyntax function="ibase_num_fields" usage="int ibase_num_fields(resource query_result)">Get the number of fields in result</phpsyntax><phpsyntax function="ibase_num_params" usage="int ibase_num_params(resource query)">Get the number of params in a prepared query</phpsyntax><phpsyntax function="ibase_num_rows" usage="int ibase_num_rows( resource result_identifier )">Return the number of rows that are available in a result</phpsyntax><phpsyntax function="ibase_param_info" usage="array ibase_param_info(resource query, int field_number)">Get information about a parameter</phpsyntax><phpsyntax function="ibase_prepare" usage="resource ibase_prepare([resource link_identifier, ] string query)">Prepare a query for later execution</phpsyntax><phpsyntax function="ibase_query" usage="mixed ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])">Execute a query</phpsyntax><phpsyntax function="ibase_add_user" usage="bool ibase_add_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])">Add a user to security database</phpsyntax><phpsyntax function="ibase_backup" usage="mixed ibase_backup(resource service_handle, string source_db, string dest_file [, int options [, bool verbose]])">Initiates a backup task in the service manager and returns immediately</phpsyntax><phpsyntax function="ibase_db_info" usage="string ibase_db_info(resource service_handle, string db, int action [, int argument])">Request statistics about a database</phpsyntax><phpsyntax function="ibase_delete_user" usage="bool ibase_delete_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])">Delete a user from security database</phpsyntax><phpsyntax function="ibase_maintain_db" usage="bool ibase_maintain_db(resource service_handle, string db, int action [, int argument])">Execute a maintenance command on the database server</phpsyntax><phpsyntax function="ibase_modify_user" usage="bool ibase_modify_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])">Modify a user in security database</phpsyntax><phpsyntax function="ibase_restore" usage="mixed ibase_restore(resource service_handle, string source_file, string dest_db [, int options [, bool verbose]])">Initiates a restore task in the service manager and returns immediately</phpsyntax><phpsyntax function="ibase_server_info" usage="string ibase_server_info(resource service_handle, int action)">Request information about a database server</phpsyntax><phpsyntax function="ibase_service_attach" usage="resource ibase_service_attach(string host, string dba_username, string dba_password)">Connect to the service manager</phpsyntax><phpsyntax function="ibase_service_detach" usage="bool ibase_service_detach(resource service_handle)">Disconnect from the service manager</phpsyntax><phpsyntax function="ibase_close" usage="bool ibase_close([resource link_identifier])">Close an InterBase connection</phpsyntax><phpsyntax function="ibase_commit" usage="bool ibase_commit( resource link_identifier )">Commit transaction</phpsyntax><phpsyntax function="ibase_commit_ret" usage="bool ibase_commit_ret( resource link_identifier )">Commit transaction and retain the transaction context</phpsyntax><phpsyntax function="ibase_connect" usage="resource ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])">Open a connection to an InterBase database</phpsyntax><phpsyntax function="ibase_drop_db" usage="bool ibase_drop_db([resource link_identifier])">Drop an InterBase database</phpsyntax><phpsyntax function="ibase_errcode" usage="int ibase_errcode(void)">Return error code</phpsyntax><phpsyntax function="ibase_errmsg" usage="string ibase_errmsg(void)">Return error message</phpsyntax><phpsyntax function="ibase_gen_id" usage="int ibase_gen_id(string generator [, int increment [, resource link_identifier ]])">Increments the named generator and returns its new value</phpsyntax><phpsyntax function="ibase_pconnect" usage="resource ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])">Open a persistent connection to an InterBase database</phpsyntax><phpsyntax function="ibase_rollback" usage="bool ibase_rollback( resource link_identifier )">Rollback transaction</phpsyntax><phpsyntax function="ibase_rollback_ret" usage="bool ibase_rollback_ret( resource link_identifier )">Rollback transaction and retain the transaction context</phpsyntax><phpsyntax function="ibase_timefmt" usage="bool ibase_timefmt(string format [, int type ])">Sets the format of timestamp, date and time columns returned from queries</phpsyntax><phpsyntax function="ibase_trans" usage="resource ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])">Start a transaction over one or several databases</phpsyntax><phpsyntax function="ircg_channel_mode" usage="bool ircg_channel_mode(int connection, string channel, string mode_spec, string nick)">Sets channel mode flags for user</phpsyntax><phpsyntax function="ircg_disconnect" usage="bool ircg_disconnect(int connection, string reason)">Terminate IRC connection</phpsyntax><phpsyntax function="ircg_eval_ecmascript_params" usage="array ircg_eval_ecmascript_params(string params)">Decodes a list of JS-encoded parameters into a native array</phpsyntax><phpsyntax function="ircg_fetch_error_msg" usage="array ircg_fetch_error_msg(int connection)">Returns the error from previous ircg operation</phpsyntax><phpsyntax function="ircg_get_username" usage="string ircg_get_username(int connection)">Gets username for connection</phpsyntax><phpsyntax function="ircg_html_encode" usage="string ircg_html_encode(string html_text)">Encodes HTML preserving output</phpsyntax><phpsyntax function="ircg_ignore_add" usage="bool ircg_ignore_add(resource connection, string nick)">Adds a user to your ignore list on a server</phpsyntax><phpsyntax function="ircg_ignore_del" usage="bool ircg_ignore_del(int connection, string nick)">Removes a user from your ignore list</phpsyntax><phpsyntax function="ircg_invite" usage="bool ircg_invite(int connection, string channel, string nickname)">INVITEs nickname to channel</phpsyntax><phpsyntax function="ircg_is_conn_alive" usage="bool ircg_is_conn_alive(int connection)">Checks connection status</phpsyntax><phpsyntax function="ircg_join" usage="bool ircg_join(int connection, string channel [, string chan-key])">Joins a channel on a connected server</phpsyntax><phpsyntax function="ircg_kick" usage="bool ircg_kick(int connection, string channel, string nick, string reason)">Kicks user from channel</phpsyntax><phpsyntax function="ircg_list" usage="bool ircg_list(int connection, string channel)">List topic/user count of channel(s)</phpsyntax><phpsyntax function="ircg_lookup_format_messages" usage="bool ircg_lookup_format_messages(string name)">Selects a set of format strings for display of IRC messages</phpsyntax><phpsyntax function="ircg_lusers" usage="bool ircg_lusers(int connection)">IRC network statistics</phpsyntax><phpsyntax function="ircg_msg" usage="bool ircg_msg(int connection, string recipient, string message [,bool loop-suppress])">Delivers a message to the IRC network</phpsyntax><phpsyntax function="ircg_names" usage="bool ircg_names( int connection, string channel [, string target])">Queries visible usernames</phpsyntax><phpsyntax function="ircg_nick" usage="bool ircg_nick(int connection, string newnick)">Changes the nickname</phpsyntax><phpsyntax function="ircg_nickname_escape" usage="string ircg_nickname_escape(string nick)">Escapes special characters in nickname to be IRC-compliant</phpsyntax><phpsyntax function="ircg_nickname_unescape" usage="string ircg_nickname_unescape(string nick)">Decodes encoded nickname</phpsyntax><phpsyntax function="ircg_notice" usage="bool ircg_notice(int connection, string recipient, string message)">Sends a one-way communication NOTICE to a target</phpsyntax><phpsyntax function="ircg_oper" usage="bool ircg_oper(int connection, string name, string password)">Elevates privileges to IRC OPER</phpsyntax><phpsyntax function="ircg_part" usage="bool ircg_part(int connection, string channel)">Leaves a channel</phpsyntax><phpsyntax function="ircg_pconnect" usage="int ircg_pconnect(string username [, string server [, int port [, string format-msg-set-name [, array ctcp-set [, array user-details [, bool bailout-on-trivial]]]]]])">Create a persistent IRC connection</phpsyntax><phpsyntax function="ircg_register_format_messages" usage="bool ircg_register_format_messages(string name, array messages)">Registers a set of format strings for display of IRC messages</phpsyntax><phpsyntax function="ircg_set_current" usage="bool ircg_set_current(int connection)">Sets current connection for output</phpsyntax><phpsyntax function="ircg_set_file" usage="bool ircg_set_file(int connection, string path)">Sets logfile for connection</phpsyntax><phpsyntax function="ircg_set_on_die" usage="bool ircg_set_on_die(int connection, string host, int port, string data)">Sets hostaction to be executed when connection dies</phpsyntax><phpsyntax function="ircg_set_on_read_data" usage="bool ircg_set_on_read_data(int connection, string host, int port, string data)">Set action to be executed when data is received from a HTTP client</phpsyntax><phpsyntax function="ircg_topic" usage="bool ircg_topic(int connection, string channel, string topic)">Sets topic for channel</phpsyntax><phpsyntax function="ircg_who" usage="bool ircg_who(int connection, string mask [, bool ops_only])">Queries server for WHO information</phpsyntax><phpsyntax function="ircg_whois" usage="bool ircg_whois( int connection, string nick)">Queries user information for nick on server</phpsyntax><phpsyntax function="ldap_add" usage="bool ldap_add(resource link, string dn, array entry)">Add entries to LDAP directory</phpsyntax><phpsyntax function="ldap_bind" usage="bool ldap_bind(resource link [, string dn, string password])">Bind to LDAP directory</phpsyntax><phpsyntax function="ldap_compare" usage="bool ldap_compare(resource link, string dn, string attr, string value)">Determine if an entry has a specific value for one of its attributes</phpsyntax><phpsyntax function="ldap_connect" usage="resource ldap_connect([string host [, int port]])">Connect to an LDAP server</phpsyntax><phpsyntax function="ldap_count_entries" usage="int ldap_count_entries(resource link, resource result)">Count the number of entries in a search result</phpsyntax><phpsyntax function="ldap_delete" usage="bool ldap_delete(resource link, string dn)">Delete an entry from a directory</phpsyntax><phpsyntax function="ldap_errno" usage="int ldap_errno(resource link)">Get the current ldap error number</phpsyntax><phpsyntax function="ldap_error" usage="string ldap_error(resource link)">Get the current ldap error string</phpsyntax><phpsyntax function="ldap_explode_dn" usage="array ldap_explode_dn(string dn, int with_attrib)">Splits DN into its component parts</phpsyntax><phpsyntax function="ldap_first_attribute" usage="string ldap_first_attribute(resource link, resource result_entry, int ber)">Return first attribute</phpsyntax><phpsyntax function="ldap_first_entry" usage="resource ldap_first_entry(resource link, resource result)">Return first result id</phpsyntax><phpsyntax function="ldap_first_reference" usage="resource ldap_first_reference(resource link, resource result)">Return first reference</phpsyntax><phpsyntax function="ldap_free_result" usage="bool ldap_free_result(resource result)">Free result memory</phpsyntax><phpsyntax function="ldap_get_attributes" usage="array ldap_get_attributes(resource link, resource result_entry)">Get attributes from a search result entry</phpsyntax><phpsyntax function="ldap_get_dn" usage="string ldap_get_dn(resource link, resource result_entry)">Get the DN of a result entry</phpsyntax><phpsyntax function="ldap_get_entries" usage="array ldap_get_entries(resource link, resource result)">Get all result entries</phpsyntax><phpsyntax function="ldap_get_option" usage="bool ldap_get_option(resource link, int option, mixed retval)">Get the current value of various session-wide parameters</phpsyntax><phpsyntax function="ldap_get_values" usage="array ldap_get_values(resource link, resource result_entry, string attribute)">Get all values from a result entry</phpsyntax><phpsyntax function="ldap_get_values_len" usage="array ldap_get_values_len(resource link, resource result_entry, string attribute)">Get all values with lengths from a result entry</phpsyntax><phpsyntax function="ldap_list" usage="resource ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])">Single-level search</phpsyntax><phpsyntax function="ldap_mod_add" usage="bool ldap_mod_add(resource link, string dn, array entry)">Add attribute values to current</phpsyntax><phpsyntax function="ldap_mod_del" usage="bool ldap_mod_del(resource link, string dn, array entry)">Delete attribute values</phpsyntax><phpsyntax function="ldap_mod_replace" usage="bool ldap_mod_replace(resource link, string dn, array entry)">Replace attribute values with new ones</phpsyntax><phpsyntax function="ldap_next_attribute" usage="string ldap_next_attribute(resource link, resource result_entry, resource ber)">Get the next attribute in result</phpsyntax><phpsyntax function="ldap_next_entry" usage="resource ldap_next_entry(resource link, resource result_entry)">Get next result entry</phpsyntax><phpsyntax function="ldap_next_reference" usage="resource ldap_next_reference(resource link, resource reference_entry)">Get next reference</phpsyntax><phpsyntax function="ldap_parse_reference" usage="bool ldap_parse_reference(resource link, resource reference_entry, array referrals)">Extract information from reference entry</phpsyntax><phpsyntax function="ldap_parse_result" usage="bool ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)">Extract information from result</phpsyntax><phpsyntax function="ldap_read" usage="resource ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])">Read an entry</phpsyntax><phpsyntax function="ldap_sasl_bind" usage="bool ldap_sasl_bind(resource link)">Bind to LDAP directory using SASL</phpsyntax><phpsyntax function="ldap_search" usage="resource ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])">Search LDAP tree under base_dn</phpsyntax><phpsyntax function="ldap_set_option" usage="bool ldap_set_option(resource link, int option, mixed newval)">Set the value of various session-wide parameters</phpsyntax><phpsyntax function="ldap_set_rebind_proc" usage="bool ldap_set_rebind_proc(resource link, string callback)">Set a callback function to do re-binds on referral chasing.</phpsyntax><phpsyntax function="ldap_sort" usage="bool ldap_sort(resource link, resource result, string sortfilter)">Sort LDAP result entries</phpsyntax><phpsyntax function="ldap_start_tls" usage="bool ldap_start_tls(resource link)">Start TLS</phpsyntax><phpsyntax function="ldap_unbind" usage="bool ldap_unbind(resource link)">Unbind from LDAP directory</phpsyntax><phpsyntax function="libxml_set_streams_context" usage="void libxml_set_streams_context(resource streams_context)">Set the streams context for the next libxml document load or write</phpsyntax><phpsyntax function="mb_convert_case" usage="string mb_convert_case(string sourcestring, int mode [, string encoding])">Returns a case-folded version of sourcestring</phpsyntax><phpsyntax function="mb_convert_encoding" usage="string mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])">Returns converted string in desired encoding</phpsyntax><phpsyntax function="mb_convert_kana" usage="string mb_convert_kana(string str [, string option] [, string encoding])">Conversion between full-width character and half-width character (Japanese)</phpsyntax><phpsyntax function="mb_convert_variables" usage="string mb_convert_variables(string to-encoding, mixed from-encoding [, mixed ...])">Converts the string resource in variables to desired encoding</phpsyntax><phpsyntax function="mb_decode_mimeheader" usage="string mb_decode_mimeheader(string string)">Decodes the MIME "encoded-word" in the string</phpsyntax><phpsyntax function="mb_decode_numericentity" usage="string mb_decode_numericentity(string string, array convmap [, string encoding])">Converts HTML numeric entities to character code</phpsyntax><phpsyntax function="mb_detect_encoding" usage="string mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])">Encodings of the given string is returned (as a string)</phpsyntax><phpsyntax function="mb_encode_mimeheader" usage="string mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]])">Converts the string to MIME "encoded-word" in the format of =?charset?(B|Q)?encoded_string?=</phpsyntax><phpsyntax function="mb_encode_numericentity" usage="string mb_encode_numericentity(string string, array convmap [, string encoding])">Converts specified characters to HTML numeric entities</phpsyntax><phpsyntax function="mb_get_info" usage="string mb_get_info([string type])">Returns the current settings of mbstring</phpsyntax><phpsyntax function="mb_http_input" usage="mixed mb_http_input([string type])">Returns the input encoding</phpsyntax><phpsyntax function="mb_http_output" usage="string mb_http_output([string encoding])">Sets the current output_encoding or returns the current output_encoding as a string</phpsyntax><phpsyntax function="mb_internal_encoding" usage="string mb_internal_encoding([string encoding])">Sets the current internal encoding or Returns the current internal encoding as a string</phpsyntax><phpsyntax function="mb_language" usage="string mb_language([string language])">Sets the current language or Returns the current language as a string</phpsyntax><phpsyntax function="mb_list_encodings" usage="array mb_list_encodings()">Returns an array of all supported encodings</phpsyntax><phpsyntax function="mb_output_handler" usage="string mb_output_handler(string contents, int status)">Returns string in output buffer converted to the http_output encoding</phpsyntax><phpsyntax function="mb_parse_str" usage="bool mb_parse_str(string encoded_string [, array result])">Parses GET/POST/COOKIE data and sets global variables</phpsyntax><phpsyntax function="mb_preferred_mime_name" usage="string mb_preferred_mime_name(string encoding)">Return the preferred MIME name (charset) as a string</phpsyntax><phpsyntax function="mb_send_mail" usage="int mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])">*  Sends an email message with MIME scheme</phpsyntax><phpsyntax function="mb_strcut" usage="string mb_strcut(string str, int start [, int length [, string encoding]])">Returns part of a string</phpsyntax><phpsyntax function="mb_strimwidth" usage="string mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])">Trim the string in terminal width</phpsyntax><phpsyntax function="mb_strlen" usage="int mb_strlen(string str [, string encoding])">Get character numbers of a string</phpsyntax><phpsyntax function="mb_strpos" usage="int mb_strpos(string haystack, string needle [, int offset [, string encoding]])">Find position of first occurrence of a string within another</phpsyntax><phpsyntax function="mb_strrpos" usage="int mb_strrpos(string haystack, string needle [, string encoding])">Find the last occurrence of a character in a string within another</phpsyntax><phpsyntax function="mb_strtolower" usage="string mb_strtolower(string sourcestring [, string encoding])">*  Returns a lowercased version of sourcestring</phpsyntax><phpsyntax function="mb_strtoupper" usage="string mb_strtoupper(string sourcestring [, string encoding])">*  Returns a uppercased version of sourcestring</phpsyntax><phpsyntax function="mb_strwidth" usage="int mb_strwidth(string str [, string encoding])">Gets terminal width of a string</phpsyntax><phpsyntax function="mb_substitute_character" usage="mixed mb_substitute_character([mixed substchar])">Sets the current substitute_character or returns the current substitute_character</phpsyntax><phpsyntax function="mb_substr" usage="string mb_substr(string str, int start [, int length [, string encoding]])">Returns part of a string</phpsyntax><phpsyntax function="mb_substr_count" usage="int mb_substr_count(string haystack, string needle [, string encoding])">Count the number of substring occurrences</phpsyntax><phpsyntax function="mb_ereg" usage="int mb_ereg(string pattern, string string [, array registers])">Regular expression match for multibyte string</phpsyntax><phpsyntax function="mb_ereg_match" usage="bool mb_ereg_match(string pattern, string string [,string option])">Regular expression match for multibyte string</phpsyntax><phpsyntax function="mb_ereg_replace" usage="string mb_ereg_replace(string pattern, string replacement, string string [, string option])">Replace regular expression for multibyte string</phpsyntax><phpsyntax function="mb_ereg_search" usage="bool mb_ereg_search([string pattern[, string option]])">Regular expression search for multibyte string</phpsyntax><phpsyntax function="mb_ereg_search_getpos" usage="int mb_ereg_search_getpos(void)">Get search start position</phpsyntax><phpsyntax function="mb_ereg_search_getregs" usage="array mb_ereg_search_getregs(void)">Get matched substring of the last time</phpsyntax><phpsyntax function="mb_ereg_search_init" usage="bool mb_ereg_search_init(string string [, string pattern[, string option]])">Initialize string and regular expression for search.</phpsyntax><phpsyntax function="mb_ereg_search_pos" usage="array mb_ereg_search_pos([string pattern[, string option]])">Regular expression search for multibyte string</phpsyntax><phpsyntax function="mb_ereg_search_regs" usage="array mb_ereg_search_regs([string pattern[, string option]])">Regular expression search for multibyte string</phpsyntax><phpsyntax function="mb_ereg_search_setpos" usage="bool mb_ereg_search_setpos(int position)">Set search start position</phpsyntax><phpsyntax function="mb_eregi" usage="int mb_eregi(string pattern, string string [, array registers])">Case-insensitive regular expression match for multibyte string</phpsyntax><phpsyntax function="mb_eregi_replace" usage="string mb_eregi_replace(string pattern, string replacement, string string)">Case insensitive replace regular expression for multibyte string</phpsyntax><phpsyntax function="mb_regex_encoding" usage="string mb_regex_encoding([string encoding])">Returns the current encoding for regex as a string.</phpsyntax><phpsyntax function="mb_regex_set_options" usage="string mb_regex_set_options([string options])">Set or get the default options for mbregex functions</phpsyntax><phpsyntax function="mb_split" usage="array mb_split(string pattern, string string [, int limit])">split multibyte string into array by regular expression</phpsyntax><phpsyntax function="mcrypt_cbc" usage="string mcrypt_cbc(int cipher, string key, string data, int mode, string iv)">CBC crypt/decrypt data using key key with cipher cipher starting with iv</phpsyntax><phpsyntax function="mcrypt_cfb" usage="string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)">CFB crypt/decrypt data using key key with cipher cipher starting with iv</phpsyntax><phpsyntax function="mcrypt_create_iv" usage="string mcrypt_create_iv(int size, int source)">Create an initialization vector (IV)</phpsyntax><phpsyntax function="mcrypt_decrypt" usage="string mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)">OFB crypt/decrypt data using key key with cipher cipher starting with iv</phpsyntax><phpsyntax function="mcrypt_ecb" usage="string mcrypt_ecb(int cipher, string key, string data, int mode, string iv)">ECB crypt/decrypt data using key key with cipher cipher starting with iv</phpsyntax><phpsyntax function="mcrypt_enc_get_algorithms_name" usage="string mcrypt_enc_get_algorithms_name(resource td)">Returns the name of the algorithm specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_enc_get_block_size" usage="int mcrypt_enc_get_block_size(resource td)">Returns the block size of the cipher specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_enc_get_iv_size" usage="int mcrypt_enc_get_iv_size(resource td)">Returns the size of the IV in bytes of the algorithm specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_enc_get_key_size" usage="int mcrypt_enc_get_key_size(resource td)">Returns the maximum supported key size in bytes of the algorithm specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_enc_get_modes_name" usage="string mcrypt_enc_get_modes_name(resource td)">Returns the name of the mode specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_enc_get_supported_key_sizes" usage="array mcrypt_enc_get_supported_key_sizes(resource td)">This function decrypts the crypttext</phpsyntax><phpsyntax function="mcrypt_enc_is_block_algorithm" usage="bool mcrypt_enc_is_block_algorithm(resource td)">Returns TRUE if the alrogithm is a block algorithms</phpsyntax><phpsyntax function="mcrypt_enc_is_block_algorithm_mode" usage="bool mcrypt_enc_is_block_algorithm_mode(resource td)">Returns TRUE if the mode is for use with block algorithms</phpsyntax><phpsyntax function="mcrypt_enc_is_block_mode" usage="bool mcrypt_enc_is_block_mode(resource td)">Returns TRUE if the mode outputs blocks</phpsyntax><phpsyntax function="mcrypt_enc_self_test" usage="int mcrypt_enc_self_test(resource td)">This function runs the self test on the algorithm specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_encrypt" usage="string mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)">OFB crypt/decrypt data using key key with cipher cipher starting with iv</phpsyntax><phpsyntax function="mcrypt_generic" usage="string mcrypt_generic(resource td, string data)">This function encrypts the plaintext</phpsyntax><phpsyntax function="mcrypt_generic_deinit" usage="bool mcrypt_generic_deinit(resource td)">This function terminates encrypt specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_generic_end" usage="bool mcrypt_generic_end(resource td)">This function terminates encrypt specified by the descriptor td</phpsyntax><phpsyntax function="mcrypt_generic_init" usage="int mcrypt_generic_init(resource td, string key, string iv)">This function initializes all buffers for the specific module</phpsyntax><phpsyntax function="mcrypt_get_block_size" usage="int mcrypt_get_block_size(string cipher, string module)">Get the key size of cipher</phpsyntax><phpsyntax function="mcrypt_get_cipher_name" usage="string mcrypt_get_cipher_name(string cipher)">Get the key size of cipher</phpsyntax><phpsyntax function="mcrypt_get_iv_size" usage="int mcrypt_get_iv_size(string cipher, string module)">Get the IV size of cipher (Usually the same as the blocksize)</phpsyntax><phpsyntax function="mcrypt_get_key_size" usage="int mcrypt_get_key_size(string cipher, string module)">Get the key size of cipher</phpsyntax><phpsyntax function="mcrypt_list_algorithms" usage="array mcrypt_list_algorithms([string lib_dir])">List all algorithms in "module_dir"</phpsyntax><phpsyntax function="mcrypt_list_modes" usage="array mcrypt_list_modes([string lib_dir])">List all modes "module_dir"</phpsyntax><phpsyntax function="mcrypt_module_close" usage="bool mcrypt_module_close(resource td)">Free the descriptor td</phpsyntax><phpsyntax function="mcrypt_module_get_algo_block_size" usage="int mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])">Returns the block size of the algorithm</phpsyntax><phpsyntax function="mcrypt_module_get_algo_key_size" usage="int mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])">Returns the maximum supported key size of the algorithm</phpsyntax><phpsyntax function="mcrypt_module_get_supported_key_sizes" usage="array mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])">This function decrypts the crypttext</phpsyntax><phpsyntax function="mcrypt_module_is_block_algorithm" usage="bool mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])">Returns TRUE if the algorithm is a block algorithm</phpsyntax><phpsyntax function="mcrypt_module_is_block_algorithm_mode" usage="bool mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])">Returns TRUE if the mode is for use with block algorithms</phpsyntax><phpsyntax function="mcrypt_module_is_block_mode" usage="bool mcrypt_module_is_block_mode(string mode [, string lib_dir])">Returns TRUE if the mode outputs blocks of bytes</phpsyntax><phpsyntax function="mcrypt_module_open" usage="resource mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)">Opens the module of the algorithm and the mode to be used</phpsyntax><phpsyntax function="mcrypt_module_self_test" usage="bool mcrypt_module_self_test(string algorithm [, string lib_dir])">Does a self test of the module "module"</phpsyntax><phpsyntax function="mcrypt_ofb" usage="string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)">OFB crypt/decrypt data using key key with cipher cipher starting with iv</phpsyntax><phpsyntax function="mdecrypt_generic" usage="string mdecrypt_generic(resource td, string data)">This function decrypts the plaintext</phpsyntax><phpsyntax function="mcve_adduser" usage="int mcve_adduser(resource conn, string admin_password, int usersetup)">Add an MCVE user using usersetup structure</phpsyntax><phpsyntax function="mcve_adduserarg" usage="int mcve_adduserarg(resource usersetup, int argtype, string argval)">Add a value to user configuration structure</phpsyntax><phpsyntax function="mcve_bt" usage="int mcve_bt(resource conn, string username, string password)">Get unsettled batch totals</phpsyntax><phpsyntax function="mcve_checkstatus" usage="int mcve_checkstatus(resource conn, int identifier)">Check to see if a transaction has completed</phpsyntax><phpsyntax function="mcve_chkpwd" usage="int mcve_chkpwd(resource conn, string username, string password)">Verify Password</phpsyntax><phpsyntax function="mcve_chngpwd" usage="int mcve_chngpwd(resource conn, string admin_password, string new_password)">Change the system administrator's password</phpsyntax><phpsyntax function="mcve_completeauthorizations" usage="int mcve_completeauthorizations(resource conn, int &amp;array)">Number of complete authorizations in queue, returning an array of their identifiers</phpsyntax><phpsyntax function="mcve_connect" usage="int mcve_connect(resource conn)">Establish the connection to MCVE</phpsyntax><phpsyntax function="mcve_connectionerror" usage="string mcve_connectionerror(resource conn)">Get a textual representation of why a connection failed</phpsyntax><phpsyntax function="mcve_deleteresponse" usage="bool mcve_deleteresponse(resource conn, int identifier)">Delete specified transaction from MCVE_CONN structure</phpsyntax><phpsyntax function="mcve_deletetrans" usage="bool mcve_deletetrans(resource conn, int identifier)">Delete specified transaction from MCVE_CONN structure</phpsyntax><phpsyntax function="mcve_deleteusersetup" usage="void mcve_deleteusersetup(resource usersetup)">Deallocate data associated with usersetup structure</phpsyntax><phpsyntax function="mcve_deluser" usage="int mcve_deluser(resource conn, string admin_password, string username)">Delete an MCVE user account</phpsyntax><phpsyntax function="mcve_destroyconn" usage="void mcve_destroyconn(resource conn)">Destroy the connection and MCVE_CONN structure</phpsyntax><phpsyntax function="mcve_destroyengine" usage="void mcve_destroyengine(void)">Free memory associated with IP/SSL connectivity</phpsyntax><phpsyntax function="mcve_disableuser" usage="int mcve_disableuser(resource conn, string admin_password, string username)">Disable an active MCVE user account</phpsyntax><phpsyntax function="mcve_edituser" usage="int mcve_edituser(resource conn, string admin_password, int usersetup)">Edit MCVE user using usersetup structure</phpsyntax><phpsyntax function="mcve_enableuser" usage="int mcve_enableuser(resource conn, string admin_password, string username)">Enable an inactive MCVE user account</phpsyntax><phpsyntax function="mcve_force" usage="int mcve_force(resiurce conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)">Send a FORCE to MCVE.  (typically, a phone-authorization)</phpsyntax><phpsyntax function="mcve_getcell" usage="string mcve_getcell(resource conn, int identifier, string column, int row)">Get a specific cell from a comma delimited response by column name</phpsyntax><phpsyntax function="mcve_getcellbynum" usage="string mcve_getcellbynum(resource conn, int identifier, int column, int row)">Get a specific cell from a comma delimited response by column number</phpsyntax><phpsyntax function="mcve_getcommadelimited" usage="string mcve_getcommadelimited(resource conn, int identifier)">Get the RAW comma delimited data returned from MCVE</phpsyntax><phpsyntax function="mcve_getheader" usage="string mcve_getheader(resource conn, int identifier, int column_num)">Get the name of the column in a comma-delimited response</phpsyntax><phpsyntax function="mcve_getuserarg" usage="string mcve_getuserarg(resource usersetup, int argtype)">Grab a value from usersetup structure</phpsyntax><phpsyntax function="mcve_getuserparam" usage="string mcve_getuserparam(resource conn, long identifier, int key)">Get a user response parameter</phpsyntax><phpsyntax function="mcve_gft" usage="int mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)">Audit MCVE for Failed transactions</phpsyntax><phpsyntax function="mcve_gl" usage="int mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)">Audit MCVE for settled transactions</phpsyntax><phpsyntax function="mcve_gut" usage="int mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)">Audit MCVE for Unsettled Transactions</phpsyntax><phpsyntax function="mcve_initconn" usage="resource mcve_initconn(void)">Create and initialize an MCVE_CONN structure</phpsyntax><phpsyntax function="mcve_initengine" usage="int mcve_initengine(string location)">Ready the client for IP/SSL Communication</phpsyntax><phpsyntax function="mcve_initusersetup" usage="resource mcve_initusersetup(void)">Initialize structure to store user data</phpsyntax><phpsyntax function="mcve_iscommadelimited" usage="int mcve_iscommadelimited(resource conn, int identifier)">Checks to see if response is comma delimited</phpsyntax><phpsyntax function="mcve_liststats" usage="int mcve_liststats(resource conn, string admin_password)">List statistics for all users on MCVE system</phpsyntax><phpsyntax function="mcve_listusers" usage="int mcve_listusers(resource conn, string admin_password)">List all users on MCVE system</phpsyntax><phpsyntax function="mcve_maxconntimeout" usage="bool mcve_maxconntimeout(resource conn, int secs)">The maximum amount of time the API will attempt a connection to MCVE</phpsyntax><phpsyntax function="mcve_monitor" usage="int mcve_monitor(resource conn)">Perform communication with MCVE (send/receive data)   Non-blocking</phpsyntax><phpsyntax function="mcve_numcolumns" usage="int mcve_numcolumns(resource conn, int identifier)">Number of columns returned in a comma delimited response</phpsyntax><phpsyntax function="mcve_numrows" usage="int mcve_numrows(resource conn, int identifier)">Number of rows returned in a comma delimited response</phpsyntax><phpsyntax function="mcve_override" usage="int mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)">Send an OVERRIDE to MCVE</phpsyntax><phpsyntax function="mcve_parsecommadelimited" usage="int mcve_parsecommadelimited(resource conn, int identifier)">Parse the comma delimited response so mcve_getcell, etc will work</phpsyntax><phpsyntax function="mcve_ping" usage="int mcve_ping(resource conn)">Send a ping request to MCVE</phpsyntax><phpsyntax function="mcve_preauth" usage="int mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)">Send a PREAUTHORIZATION to MCVE</phpsyntax><phpsyntax function="mcve_preauthcompletion" usage="int mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)">Complete a PREAUTHORIZATION... Ready it for settlement</phpsyntax><phpsyntax function="mcve_qc" usage="int mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)">Audit MCVE for a list of transactions in the outgoing queue</phpsyntax><phpsyntax function="mcve_responseparam" usage="string mcve_responseparam(resource conn, long identifier, string key)">Get a custom response parameter</phpsyntax><phpsyntax function="mcve_return" usage="int mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)">Issue a RETURN or CREDIT to MCVE</phpsyntax><phpsyntax function="mcve_returncode" usage="int mcve_returncode(resource conn, int identifier)">Grab the exact return code from the transaction</phpsyntax><phpsyntax function="mcve_returnstatus" usage="int mcve_returnstatus(resource conn, int identifier)">Check to see if the transaction was successful</phpsyntax><phpsyntax function="mcve_sale" usage="int mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)">Send a SALE to MCVE</phpsyntax><phpsyntax function="mcve_setblocking" usage="int mcve_setblocking(resource conn, int tf)">Set blocking/non-blocking mode for connection</phpsyntax><phpsyntax function="mcve_setdropfile" usage="int mcve_setdropfile(resource conn, string directory)">Set the connection method to Drop-File</phpsyntax><phpsyntax function="mcve_setip" usage="int mcve_setip(resource conn, string host, int port)">Set the connection method to IP</phpsyntax><phpsyntax function="mcve_setssl" usage="int mcve_setssl(resource conn, string host, int port)">Set the connection method to SSL</phpsyntax><phpsyntax function="mcve_setssl_files" usage="int mcve_setssl_files(string sslkeyfile, string sslcertfile)">Set certificate key files and certificates if server requires client certificate     verification</phpsyntax><phpsyntax function="mcve_settimeout" usage="int mcve_settimeout(resource conn, int seconds)">Set maximum transaction time (per trans)</phpsyntax><phpsyntax function="mcve_settle" usage="int mcve_settle(resource conn, string username, string password, string batch)">Issue a settlement command to do a batch deposit</phpsyntax><phpsyntax function="mcve_text_avs" usage="string mcve_text_avs(string code)">Get a textual representation of the return_avs</phpsyntax><phpsyntax function="mcve_text_code" usage="string mcve_text_code(string code)">Get a textual representation of the return_code</phpsyntax><phpsyntax function="mcve_text_cv" usage="string mcve_text_cv(int code)">Get a textual representation of the return_cv</phpsyntax><phpsyntax function="mcve_transactionauth" usage="string mcve_transactionauth(resource conn, int identifier)">Get the authorization number returned for the transaction (alpha-numeric)</phpsyntax><phpsyntax function="mcve_transactionavs" usage="int mcve_transactionavs(resource conn, int identifier)">Get the Address Verification return status</phpsyntax><phpsyntax function="mcve_transactionbatch" usage="int mcve_transactionbatch(resource conn, int identifier)">Get the batch number associated with the transaction</phpsyntax><phpsyntax function="mcve_transactioncv" usage="int mcve_transactioncv(resource conn, int identifier)">Get the CVC2/CVV2/CID return status</phpsyntax><phpsyntax function="mcve_transactionid" usage="int mcve_transactionid(resource conn, int identifier)">Get the unique system id for the transaction</phpsyntax><phpsyntax function="mcve_transactionitem" usage="int mcve_transactionitem(resource conn, int identifier)">Get the ITEM number in the associated batch for this transaction</phpsyntax><phpsyntax function="mcve_transactionssent" usage="int mcve_transactionssent(resource conn)">Check to see if outgoing buffer is clear</phpsyntax><phpsyntax function="mcve_transactiontext" usage="string mcve_transactiontext(resource conn, int identifier)">Get verbiage (text) return from MCVE or processing institution</phpsyntax><phpsyntax function="mcve_transinqueue" usage="int mcve_transinqueue(resource conn)">Number of transactions in client-queue</phpsyntax><phpsyntax function="mcve_transnew" usage="int mcve_transnew(resource conn)">Start a new transaction</phpsyntax><phpsyntax function="mcve_transparam" usage="int mcve_transparam(resource conn, long identifier, int key, ...)">Add a parameter to a transaction</phpsyntax><phpsyntax function="mcve_transsend" usage="int mcve_transsend(resource conn, long identifier)">Finalize and send the transaction</phpsyntax><phpsyntax function="mcve_ub" usage="int mcve_ub(resource conn, string username, string password)">Get a list of all Unsettled batches</phpsyntax><phpsyntax function="mcve_uwait" usage="int mcve_uwait(long microsecs)">Wait x microsecs</phpsyntax><phpsyntax function="mcve_verifyconnection" usage="bool mcve_verifyconnection(resource conn, int tf)">Set whether or not to PING upon connect to verify connection</phpsyntax><phpsyntax function="mcve_verifysslcert" usage="bool mcve_verifysslcert(resource conn, int tf)">Set whether or not to verify the server ssl certificate</phpsyntax><phpsyntax function="mcve_void" usage="int mcve_void(resource conn, string username, string password, int sid, int ptrannum)">VOID a transaction in the settlement queue</phpsyntax><phpsyntax function="mhash" usage="string mhash(int hash, string data [, string key])">Hash data with hash</phpsyntax><phpsyntax function="mhash_count" usage="int mhash_count(void)">Gets the number of available hashes</phpsyntax><phpsyntax function="mhash_get_block_size" usage="int mhash_get_block_size(int hash)">Gets the block size of hash</phpsyntax><phpsyntax function="mhash_get_hash_name" usage="string mhash_get_hash_name(int hash)">Gets the name of hash</phpsyntax><phpsyntax function="mime_content_type" usage="string mime_content_type(string filename|resource stream)">Return content-type for file</phpsyntax><phpsyntax function="ming_keypress" usage="int ming_keypress(string str)">Returns the action flag for keyPress(char)</phpsyntax><phpsyntax function="ming_setscale" usage="void ming_setscale(int scale)">Set scale (?)</phpsyntax><phpsyntax function="ming_useconstants" usage="void ming_useconstants(int use)">Use constant pool (?)</phpsyntax><phpsyntax function="ming_useswfversion" usage="void ming_useswfversion(int version)">Use SWF version (?)</phpsyntax><phpsyntax function="swfaction_init" usage="object swfaction_init(string)">Returns a new SWFAction object, compiling the given script</phpsyntax><phpsyntax function="swfbitmap_init" usage="class swfbitmap_init(mixed file [, mixed maskfile])">Returns a new SWFBitmap object from jpg (with optional mask) or dbl file</phpsyntax><phpsyntax function="swfbutton_init" usage="object swfbutton_init(void)">Returns a new SWFButton object</phpsyntax><phpsyntax function="swfdisplayitem_move" usage="void swfdisplayitem_move(float dx, float dy)">Displaces this SWFDisplayItem by (dx, dy) in movie coordinates</phpsyntax><phpsyntax function="swfdisplayitem_rotate" usage="void swfdisplayitem_rotate(float degrees)">Rotates this SWFDisplayItem the given (clockwise) degrees from its current orientation</phpsyntax><phpsyntax function="swfdisplayitem_scale" usage="void swfdisplayitem_scale(float xScale, float yScale)">Multiplies this SWFDisplayItem's current x scale by xScale, its y scale by yScale</phpsyntax><phpsyntax function="swffill_init" usage="class swffill_init(void)">Returns a new SWFFill object</phpsyntax><phpsyntax function="swffont_init" usage="object swffont_init(string filename)">Returns a new SWFFont object from given file</phpsyntax><phpsyntax function="swfgradient_init" usage="class swfgradient_init(void)">Returns a new SWFGradient object</phpsyntax><phpsyntax function="swfmorph_init" usage="object swfmorph_init(void)">Returns a new SWFMorph object</phpsyntax><phpsyntax function="swfmovie_add" usage="object swfmovie_add(object SWFBlock)"/><phpsyntax function="swfmovie_init" usage="object swfmovie_init(int version)">Creates swfmovie object according to the passed version</phpsyntax><phpsyntax function="swfmovie_labelframe" usage="void swfmovie_labelframe(object SWFBlock)"/><phpsyntax function="swfmovie_labelframe" usage="void swfmovie_labelframe(string label)">Labels frame</phpsyntax><phpsyntax function="swfmovie_nextframe" usage="void swfmovie_nextframe(void)"/><phpsyntax function="swfmovie_output" usage="int swfmovie_output([int compression])"/><phpsyntax function="swfmovie_save" usage="int swfmovie_save(mixed where [, int compression])">Saves the movie. 'where' can be stream and the movie will be saved there otherwise it is treated as string and written in file with that name</phpsyntax><phpsyntax function="swfshape_addfill" usage="object swfshape_addfill(mixed arg1, int arg2, [int b [, int a]])">Returns a fill object, for use with swfshape_setleftfill and swfshape_setrightfill. If 1 or 2 parameter(s) is (are) passed first should be object (from gradient class) and the second int (flags). Gradient fill is performed. If 3 or 4 parameters are passed : r, g, b [, a]. Solid fill is performed.</phpsyntax><phpsyntax function="swfshape_drawarc" usage="void swfshape_drawarc(float r, float startAngle, float endAngle)">Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured counterclockwise from 12 o'clock</phpsyntax><phpsyntax function="swfshape_drawcircle" usage="void swfshape_drawcircle(float r)">Draws a circle of radius r centered at the current location, in a counter-clockwise fashion</phpsyntax><phpsyntax function="swfshape_drawcubic" usage="void swfshape_drawcubic(float bx, float by, float cx, float cy, float dx, float dy)">Draws a cubic bezier curve using the current position and the three given points as control points</phpsyntax><phpsyntax function="swfshape_drawcubic" usage="void swfshape_drawcubic(float bx, float by, float cx, float cy, float dx, float dy)">Draws a cubic bezier curve using the current position and the three given points as control points</phpsyntax><phpsyntax function="swfshape_drawcurve" usage="void swfshape_drawcurve(float adx, float ady, float bdx, float bdy [, float cdx, float cdy])">Draws a curve from the current pen position (x, y) to the point (x+bdx, y+bdy) in the current line style, using point (x+adx, y+ady) as a control point or draws a cubic bezier to point (x+cdx, x+cdy) with control points (x+adx, y+ady) and (x+bdx, y+bdy)</phpsyntax><phpsyntax function="swfshape_drawcurveto" usage="void swfshape_drawcurveto(float ax, float ay, float bx, float by [, float dx, float dy])">Draws a curve from the current pen position (x,y) to the point (bx, by) in the current line style, using point (ax, ay) as a control point. Or draws a cubic bezier to point (dx, dy) with control points (ax, ay) and (bx, by)</phpsyntax><phpsyntax function="swfshape_drawglyph" usage="void swfshape_drawglyph(SWFFont font, string character [, int size])">Draws the first character in the given string into the shape using the glyph definition from the given font</phpsyntax><phpsyntax function="swfshape_drawline" usage="void swfshape_drawline(float dx, float dy)">Draws a line from the current pen position (x, y) to the point (x+dx, y+dy) in the current line style</phpsyntax><phpsyntax function="swfshape_drawlineto" usage="void swfshape_drawlineto(float x, float y)">Draws a line from the current pen position to shape coordinates (x, y) in the current line style</phpsyntax><phpsyntax function="swfshape_init" usage="object swfshape_init(void)">Returns a new SWFShape object</phpsyntax><phpsyntax function="swfshape_movepen" usage="void swfshape_movepen(float x, float y)">Moves the pen from its current location by vector (x, y)</phpsyntax><phpsyntax function="swfshape_movepento" usage="void swfshape_movepento(float x, float y)">Moves the pen to shape coordinates (x, y)</phpsyntax><phpsyntax function="swfshape_setleftfill" usage="void swfshape_setleftfill(int arg1 [, int g ,int b [,int a]])">Sets the left side fill style to fill in case only one parameter is passed. When 3 or 4 parameters are passed they are treated as : int r, int g, int b, int a . Solid fill is performed in this case before setting left side fill type.</phpsyntax><phpsyntax function="swfshape_setleftfill" usage="void swfshape_setleftfill(int arg1 [, int g ,int b [,int a]])">Sets the right side fill style to fill in case only one parameter is passed. When 3 or 4 parameters are passed they are treated as : int r, int g, int b, int a . Solid fill is performed in this case before setting right side fill type.</phpsyntax><phpsyntax function="swfshape_setline" usage="void swfshape_setline(int width, int r, int g, int b [, int a])">Sets the current line style for this SWFShape</phpsyntax><phpsyntax function="swfsound_init" usage="class swfsound_init(string filename, int flags)">Returns a new SWFSound object from given file</phpsyntax><phpsyntax function="swfsprite_add" usage="object swfsprite_add(object SWFCharacter)">Adds the character to the sprite, returns a displayitem object</phpsyntax><phpsyntax function="swfsprite_init" usage="class swfsprite_init(void)">Returns a new SWFSprite object</phpsyntax><phpsyntax function="swfsprite_remove" usage="void swfsprite_remove(object SWFDisplayItem)">Remove the named character from the sprite's display list</phpsyntax><phpsyntax function="swftext_init" usage="class swftext_init(void)">Returns new SWFText object</phpsyntax><phpsyntax function="swftextfield_align" usage="void swftextfield_align(int alignment)">Sets the alignment of this textfield</phpsyntax><phpsyntax function="swftextfield_init" usage="object swftextfield_init([int flags])">Returns a new SWFTextField object</phpsyntax><phpsyntax function="udm_add_search_limit" usage="int udm_add_search_limit(int agent, int var, string val)">Add mnoGoSearch search restrictions</phpsyntax><phpsyntax function="udm_alloc_agent" usage="int udm_alloc_agent(string dbaddr [, string dbmode])">Allocate mnoGoSearch session</phpsyntax><phpsyntax function="udm_alloc_agent_array" usage="int udm_alloc_agent_array(array dbaddr)">Allocate mnoGoSearch session</phpsyntax><phpsyntax function="udm_api_version" usage="int udm_api_version()">Get mnoGoSearch API version</phpsyntax><phpsyntax function="udm_cat_list" usage="array udm_cat_list(int agent, string category)">Get mnoGoSearch categories list with the same root</phpsyntax><phpsyntax function="udm_cat_path" usage="array udm_cat_path(int agent, string category)">Get mnoGoSearch categories path from the root to the given catgory</phpsyntax><phpsyntax function="udm_check_charset" usage="int udm_check_charset(int agent, string charset)">Check if the given charset is known to mnogosearch</phpsyntax><phpsyntax function="udm_check_stored" usage="int udm_check_stored(int agent, int link, string doc_id)">Open connection to stored</phpsyntax><phpsyntax function="udm_clear_search_limits" usage="int udm_clear_search_limits(int agent)">Clear all mnoGoSearch search restrictions</phpsyntax><phpsyntax function="udm_close_stored" usage="int udm_close_stored(int agent, int link)">Open connection to stored</phpsyntax><phpsyntax function="udm_errno" usage="int udm_errno(int agent)">Get mnoGoSearch error number</phpsyntax><phpsyntax function="udm_error" usage="string udm_error(int agent)">Get mnoGoSearch error message</phpsyntax><phpsyntax function="udm_find" usage="int udm_find(int agent, string query)">Perform search</phpsyntax><phpsyntax function="udm_free_agent" usage="int udm_free_agent(int agent)">Free mnoGoSearch session</phpsyntax><phpsyntax function="udm_free_ispell_data" usage="int udm_free_ispell_data(int agent)">Free memory allocated for ispell data</phpsyntax><phpsyntax function="udm_free_res" usage="int udm_free_res(int res)">mnoGoSearch free result</phpsyntax><phpsyntax function="udm_get_doc_count" usage="int udm_get_doc_count(int agent)">Get total number of documents in database</phpsyntax><phpsyntax function="udm_get_res_field" usage="string udm_get_res_field(int res, int row, int field)">Fetch mnoGoSearch result field</phpsyntax><phpsyntax function="udm_get_res_field_ex" usage="string udm_get_res_field_ex(int res, int row, string field)">Fetch mnoGoSearch result field</phpsyntax><phpsyntax function="udm_get_res_param" usage="string udm_get_res_param(int res, int param)">Get mnoGoSearch result parameters</phpsyntax><phpsyntax function="udm_load_ispell_data" usage="int udm_load_ispell_data(int agent, int var, string val1, [string charset], string val2, int flag)">Load ispell data</phpsyntax><phpsyntax function="udm_make_excerpt" usage="int udm_make_excerpt(int agent, int res, int row)">Perform search</phpsyntax><phpsyntax function="udm_open_stored" usage="int udm_open_stored(int agent, string storedaddr)">Open connection to stored</phpsyntax><phpsyntax function="udm_parse_query_string" usage="int udm_parse_query_string(int agent, string str)">Parses query string, initialises variables and search limits taken from it</phpsyntax><phpsyntax function="udm_set_agent_param" usage="int udm_set_agent_param(int agent, int var, string val)">Set mnoGoSearch agent session parameters</phpsyntax><phpsyntax function="udm_set_agent_param_ex" usage="int udm_set_agent_param_ex(int agent, string var, string val)">Set mnoGoSearch agent session parameters extended</phpsyntax><phpsyntax function="msession_call" usage="string msession_call(string fn_name, [, string param1 ], ... [,string param4])">Call the plugin function named fn_name</phpsyntax><phpsyntax function="msession_connect" usage="bool msession_connect(string host, string port)">Connect to msession sever</phpsyntax><phpsyntax function="msession_count" usage="int msession_count(void)">Get session count</phpsyntax><phpsyntax function="msession_create" usage="bool msession_create(string session)">Create a session</phpsyntax><phpsyntax function="msession_ctl" usage="int msession_ctl(string name)">Lock a session</phpsyntax><phpsyntax function="msession_destroy" usage="bool msession_destroy(string name)">Destroy a session</phpsyntax><phpsyntax function="msession_disconnect" usage="void msession_disconnect(void)">Disconnect from msession server</phpsyntax><phpsyntax function="msession_exec" usage="string msession_exec(string cmdline)">executes a program on msession system</phpsyntax><phpsyntax function="msession_find" usage="array msession_find(string name, string value)">Find all sessions with name and value</phpsyntax><phpsyntax function="msession_get" usage="string msession_get(string session, string name, string default_value)">Get value from session</phpsyntax><phpsyntax function="msession_get_array" usage="array msession_get_array(string session)">Get array of msession variables</phpsyntax><phpsyntax function="msession_get_data" usage="string msession_get_data(string session)">Get data session unstructured data. (PHP sessions use this)</phpsyntax><phpsyntax function="msession_inc" usage="string msession_inc(string session, string name)">Increment value in session</phpsyntax><phpsyntax function="msession_list" usage="array msession_list(void)">List all sessions</phpsyntax><phpsyntax function="msession_listvar" usage="array msession_listvar(string name)">return associative array of value:session for all sessions with a variable named 'name'</phpsyntax><phpsyntax function="msession_lock" usage="int msession_lock(string name)">Lock a session</phpsyntax><phpsyntax function="msession_ping" usage="bool msession_ping(void)">returns non-zero if msession is alive</phpsyntax><phpsyntax function="msession_plugin" usage="string msession_plugin(string session, string val [, string param ])">Call the personality plugin escape function</phpsyntax><phpsyntax function="msession_randstr" usage="string msession_randstr(int num_chars)">Get random string</phpsyntax><phpsyntax function="msession_set" usage="bool msession_set(string session, string name, string value)">Set value in session</phpsyntax><phpsyntax function="msession_set_array" usage="bool msession_set_array(string session, array tuples)">Set msession variables from an array</phpsyntax><phpsyntax function="msession_set_data" usage="bool msession_set_data(string session, string value)">Set data session unstructured data. (PHP sessions use this)</phpsyntax><phpsyntax function="msession_timeout" usage="int msession_timeout(string session [, int param ])">Set/get session timeout</phpsyntax><phpsyntax function="msession_uniq" usage="string msession_uniq(int num_chars)">Get uniq id</phpsyntax><phpsyntax function="msession_unlock" usage="int msession_unlock(string session, int key)">Unlock a session</phpsyntax><phpsyntax function="msql_affected_rows" usage="int msql_affected_rows(resource query)">Return number of affected rows</phpsyntax><phpsyntax function="msql_close" usage="bool msql_close([resource link_identifier])">Close an mSQL connection</phpsyntax><phpsyntax function="msql_connect" usage="int msql_connect([string hostname[:port]] [, string username] [, string password])">Open a connection to an mSQL Server</phpsyntax><phpsyntax function="msql_create_db" usage="bool msql_create_db(string database_name [, resource link_identifier])">Create an mSQL database</phpsyntax><phpsyntax function="msql_data_seek" usage="bool msql_data_seek(resource query, int row_number)">Move internal result pointer</phpsyntax><phpsyntax function="msql_db_query" usage="resource msql_db_query(string database_name, string query [, resource link_identifier])">Send an SQL query to mSQL</phpsyntax><phpsyntax function="msql_drop_db" usage="bool msql_drop_db(string database_name [, resource link_identifier])">Drop (delete) an mSQL database</phpsyntax><phpsyntax function="msql_error" usage="string msql_error(void)">Returns the text of the error message from previous mSQL operation</phpsyntax><phpsyntax function="msql_fetch_array" usage="array msql_fetch_array(resource query [, int result_type])">Fetch a result row as an associative array</phpsyntax><phpsyntax function="msql_fetch_field" usage="object msql_fetch_field(resource query [, int field_offset])">Get column information from a result and return as an object</phpsyntax><phpsyntax function="msql_fetch_object" usage="object msql_fetch_object(resource query [, resource result_type])">Fetch a result row as an object</phpsyntax><phpsyntax function="msql_fetch_row" usage="array msql_fetch_row(resource query)">Get a result row as an enumerated array</phpsyntax><phpsyntax function="msql_field_flags" usage="string msql_field_flags(resource query, int field_offset)">Get the flags associated with the specified field in a result</phpsyntax><phpsyntax function="msql_field_len" usage="int msql_field_len(int query, int field_offet)">Returns the length of the specified field</phpsyntax><phpsyntax function="msql_field_name" usage="string msql_field_name(resource query, int field_index)">Get the name of the specified field in a result</phpsyntax><phpsyntax function="msql_field_seek" usage="bool msql_field_seek(resource query, int field_offset)">Set result pointer to a specific field offset</phpsyntax><phpsyntax function="msql_field_table" usage="string msql_field_table(resource query, int field_offset)">Get name of the table the specified field is in</phpsyntax><phpsyntax function="msql_field_type" usage="string msql_field_type(resource query, int field_offset)">Get the type of the specified field in a result</phpsyntax><phpsyntax function="msql_free_result" usage="bool msql_free_result(resource query)">Free result memory</phpsyntax><phpsyntax function="msql_list_dbs" usage="resource msql_list_dbs([resource link_identifier])">List databases available on an mSQL server</phpsyntax><phpsyntax function="msql_list_fields" usage="resource msql_list_fields(string database_name, string table_name [, resource link_identifier])">List mSQL result fields</phpsyntax><phpsyntax function="msql_list_tables" usage="resource msql_list_tables(string database_name [, resource link_identifier])">List tables in an mSQL database</phpsyntax><phpsyntax function="msql_num_fields" usage="int msql_num_fields(resource query)">Get number of fields in a result</phpsyntax><phpsyntax function="msql_num_rows" usage="int msql_num_rows(resource query)">Get number of rows in a result</phpsyntax><phpsyntax function="msql_pconnect" usage="int msql_pconnect([string hostname[:port]] [, string username] [, string password])">Open a persistent connection to an mSQL Server</phpsyntax><phpsyntax function="msql_query" usage="resource msql_query(string query [, resource link_identifier])">Send an SQL query to mSQL</phpsyntax><phpsyntax function="msql_result" usage="string msql_result(int query, int row [, mixed field])">Get result data</phpsyntax><phpsyntax function="msql_select_db" usage="bool msql_select_db(string database_name [, resource link_identifier])">Select an mSQL database</phpsyntax><phpsyntax function="mssql_bind" usage="bool mssql_bind(resource stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])">Adds a parameter to a stored procedure or a remote stored procedure</phpsyntax><phpsyntax function="mssql_close" usage="bool mssql_close([resource conn_id])">Closes a connection to a MS-SQL server</phpsyntax><phpsyntax function="mssql_connect" usage="int mssql_connect([string servername [, string username [, string password]]])">Establishes a connection to a MS-SQL server</phpsyntax><phpsyntax function="mssql_data_seek" usage="bool mssql_data_seek(resource result_id, int offset)">Moves the internal row pointer of the MS-SQL result associated with the specified result identifier to pointer to the specified row number</phpsyntax><phpsyntax function="mssql_execute" usage="mixed mssql_execute(resource stmt [, bool skip_results = false])">Executes a stored procedure on a MS-SQL server database</phpsyntax><phpsyntax function="mssql_fetch_array" usage="array mssql_fetch_array(resource result_id [, int result_type])">Returns an associative array of the current row in the result set specified by result_id</phpsyntax><phpsyntax function="mssql_fetch_assoc" usage="array mssql_fetch_assoc(resource result_id)">Returns an associative array of the current row in the result set specified by result_id</phpsyntax><phpsyntax function="mssql_fetch_batch" usage="int mssql_fetch_batch(resource result_index)">Returns the next batch of records</phpsyntax><phpsyntax function="mssql_fetch_field" usage="object mssql_fetch_field(resource result_id [, int offset])">Gets information about certain fields in a query result</phpsyntax><phpsyntax function="mssql_fetch_object" usage="object mssql_fetch_object(resource result_id [, int result_type])">Returns a psuedo-object of the current row in the result set specified by result_id</phpsyntax><phpsyntax function="mssql_fetch_row" usage="array mssql_fetch_row(resource result_id)">Returns an array of the current row in the result set specified by result_id</phpsyntax><phpsyntax function="mssql_field_length" usage="int mssql_field_length(resource result_id [, int offset])">Get the length of a MS-SQL field</phpsyntax><phpsyntax function="mssql_field_name" usage="string mssql_field_name(resource result_id [, int offset])">Returns the name of the field given by offset in the result set given by result_id</phpsyntax><phpsyntax function="mssql_field_seek" usage="bool mssql_field_seek(int result_id, int offset)">Seeks to the specified field offset</phpsyntax><phpsyntax function="mssql_field_type" usage="string mssql_field_type(resource result_id [, int offset])">Returns the type of a field</phpsyntax><phpsyntax function="mssql_free_result" usage="bool mssql_free_result(resource result_index)">Free a MS-SQL result index</phpsyntax><phpsyntax function="mssql_free_statement" usage="bool mssql_free_statement(resource result_index)">Free a MS-SQL statement index</phpsyntax><phpsyntax function="mssql_get_last_message" usage="string mssql_get_last_message(void)">Gets the last message from the MS-SQL server</phpsyntax><phpsyntax function="mssql_guid_string" usage="string mssql_guid_string(string binary [,int short_format])">Converts a 16 byte binary GUID to a string</phpsyntax><phpsyntax function="mssql_init" usage="int mssql_init(string sp_name [, resource conn_id])">Initializes a stored procedure or a remote stored procedure</phpsyntax><phpsyntax function="mssql_min_error_severity" usage="void mssql_min_error_severity(int severity)">Sets the lower error severity</phpsyntax><phpsyntax function="mssql_min_message_severity" usage="void mssql_min_message_severity(int severity)">Sets the lower message severity</phpsyntax><phpsyntax function="mssql_next_result" usage="bool mssql_next_result(resource result_id)">Move the internal result pointer to the next result</phpsyntax><phpsyntax function="mssql_num_fields" usage="int mssql_num_fields(resource mssql_result_index)">Returns the number of fields fetched in from the result id specified</phpsyntax><phpsyntax function="mssql_num_rows" usage="int mssql_num_rows(resource mssql_result_index)">Returns the number of rows fetched in from the result id specified</phpsyntax><phpsyntax function="mssql_pconnect" usage="int mssql_pconnect([string servername [, string username [, string password]]])">Establishes a persistent connection to a MS-SQL server</phpsyntax><phpsyntax function="mssql_query" usage="resource mssql_query(string query [, resource conn_id [, int batch_size]])">Perform an SQL query on a MS-SQL server database</phpsyntax><phpsyntax function="mssql_result" usage="string mssql_result(resource result_id, int row, mixed field)">Returns the contents of one cell from a MS-SQL result set</phpsyntax><phpsyntax function="mssql_rows_affected" usage="int mssql_rows_affected(resource conn_id)">Returns the number of records affected by the query</phpsyntax><phpsyntax function="mssql_select_db" usage="bool mssql_select_db(string database_name [, resource conn_id])">Select a MS-SQL database</phpsyntax><phpsyntax function="mysql_affected_rows" usage="int mysql_affected_rows([int link_identifier])">Gets number of affected rows in previous MySQL operation</phpsyntax><phpsyntax function="mysql_client_encoding" usage="string mysql_client_encoding([int link_identifier])">Returns the default character set for the current connection</phpsyntax><phpsyntax function="mysql_close" usage="bool mysql_close([int link_identifier])">Close a MySQL connection</phpsyntax><phpsyntax function="mysql_connect" usage="resource mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])">Opens a connection to a MySQL Server</phpsyntax><phpsyntax function="mysql_create_db" usage="bool mysql_create_db(string database_name [, int link_identifier])">Create a MySQL database</phpsyntax><phpsyntax function="mysql_data_seek" usage="bool mysql_data_seek(resource result, int row_number)">Move internal result pointer</phpsyntax><phpsyntax function="mysql_db_query" usage="resource mysql_db_query(string database_name, string query [, int link_identifier])">Sends an SQL query to MySQL</phpsyntax><phpsyntax function="mysql_drop_db" usage="bool mysql_drop_db(string database_name [, int link_identifier])">Drops (delete) a MySQL database</phpsyntax><phpsyntax function="mysql_errno" usage="int mysql_errno([int link_identifier])">Returns the number of the error message from previous MySQL operation</phpsyntax><phpsyntax function="mysql_error" usage="string mysql_error([int link_identifier])">Returns the text of the error message from previous MySQL operation</phpsyntax><phpsyntax function="mysql_escape_string" usage="string mysql_escape_string(string to_be_escaped)">Escape string for mysql query</phpsyntax><phpsyntax function="mysql_fetch_array" usage="array mysql_fetch_array(resource result [, int result_type])">Fetch a result row as an array (associative, numeric or both)</phpsyntax><phpsyntax function="mysql_fetch_assoc" usage="array mysql_fetch_assoc(resource result)">Fetch a result row as an associative array</phpsyntax><phpsyntax function="mysql_fetch_field" usage="object mysql_fetch_field(resource result [, int field_offset])">Gets column information from a result and return as an object</phpsyntax><phpsyntax function="mysql_fetch_lengths" usage="array mysql_fetch_lengths(resource result)">Gets max data size of each column in a result</phpsyntax><phpsyntax function="mysql_fetch_object" usage="object mysql_fetch_object(resource result [, string class_name [, NULL|array ctor_params]])">Fetch a result row as an object</phpsyntax><phpsyntax function="mysql_fetch_row" usage="array mysql_fetch_row(resource result)">Gets a result row as an enumerated array</phpsyntax><phpsyntax function="mysql_field_flags" usage="string mysql_field_flags(resource result, int field_offset)">Gets the flags associated with the specified field in a result</phpsyntax><phpsyntax function="mysql_field_len" usage="int mysql_field_len(resource result, int field_offset)">Returns the length of the specified field</phpsyntax><phpsyntax function="mysql_field_name" usage="string mysql_field_name(resource result, int field_index)">Gets the name of the specified field in a result</phpsyntax><phpsyntax function="mysql_field_seek" usage="bool mysql_field_seek(resource result, int field_offset)">Sets result pointer to a specific field offset</phpsyntax><phpsyntax function="mysql_field_table" usage="string mysql_field_table(resource result, int field_offset)">Gets name of the table the specified field is in</phpsyntax><phpsyntax function="mysql_field_type" usage="string mysql_field_type(resource result, int field_offset)">Gets the type of the specified field in a result</phpsyntax><phpsyntax function="mysql_free_result" usage="bool mysql_free_result(resource result)">Free result memory</phpsyntax><phpsyntax function="mysql_get_client_info" usage="string mysql_get_client_info(void)">Returns a string that represents the client library version</phpsyntax><phpsyntax function="mysql_get_host_info" usage="string mysql_get_host_info([int link_identifier])">Returns a string describing the type of connection in use, including the server host name</phpsyntax><phpsyntax function="mysql_get_proto_info" usage="int mysql_get_proto_info([int link_identifier])">Returns the protocol version used by current connection</phpsyntax><phpsyntax function="mysql_get_server_info" usage="string mysql_get_server_info([int link_identifier])">Returns a string that represents the server version number</phpsyntax><phpsyntax function="mysql_info" usage="string mysql_info([int link_identifier])">Returns a string containing information about the most recent query</phpsyntax><phpsyntax function="mysql_insert_id" usage="int mysql_insert_id([int link_identifier])">Gets the ID generated from the previous INSERT operation</phpsyntax><phpsyntax function="mysql_list_dbs" usage="resource mysql_list_dbs([int link_identifier])">List databases available on a MySQL server</phpsyntax><phpsyntax function="mysql_list_fields" usage="resource mysql_list_fields(string database_name, string table_name [, int link_identifier])">List MySQL result fields</phpsyntax><phpsyntax function="mysql_list_processes" usage="resource mysql_list_processes([int link_identifier])">Returns a result set describing the current server threads</phpsyntax><phpsyntax function="mysql_list_tables" usage="resource mysql_list_tables(string database_name [, int link_identifier])">List tables in a MySQL database</phpsyntax><phpsyntax function="mysql_num_fields" usage="int mysql_num_fields(resource result)">Gets number of fields in a result</phpsyntax><phpsyntax function="mysql_num_rows" usage="int mysql_num_rows(resource result)">Gets number of rows in a result</phpsyntax><phpsyntax function="mysql_pconnect" usage="resource mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])">Opens a persistent connection to a MySQL Server</phpsyntax><phpsyntax function="mysql_ping" usage="bool mysql_ping([int link_identifier])">Ping a server connection. If no connection then reconnect.</phpsyntax><phpsyntax function="mysql_query" usage="resource mysql_query(string query [, int link_identifier])">Sends an SQL query to MySQL</phpsyntax><phpsyntax function="mysql_real_escape_string" usage="string mysql_real_escape_string(string to_be_escaped [, int link_identifier])">Escape special characters in a string for use in a SQL statement, taking into account the current charset of the connection</phpsyntax><phpsyntax function="mysql_result" usage="mixed mysql_result(resource result, int row [, mixed field])">Gets result data</phpsyntax><phpsyntax function="mysql_select_db" usage="bool mysql_select_db(string database_name [, int link_identifier])">Selects a MySQL database</phpsyntax><phpsyntax function="mysql_stat" usage="string mysql_stat([int link_identifier])">Returns a string containing status information</phpsyntax><phpsyntax function="mysql_thread_id" usage="int mysql_thread_id([int link_identifier])">Returns the thread id of current connection</phpsyntax><phpsyntax function="mysql_unbuffered_query" usage="resource mysql_unbuffered_query(string query [, int link_identifier])">Sends an SQL query to MySQL, without fetching and buffering the result rows</phpsyntax><phpsyntax function="mysqli_affected_rows" usage="mixed mysqli_affected_rows(object link)">Get number of affected rows in previous MySQL operation</phpsyntax><phpsyntax function="mysqli_autocommit" usage="bool mysqli_autocommit(object link, bool mode)">Turn auto commit on or of</phpsyntax><phpsyntax function="mysqli_change_user" usage="bool mysqli_change_user(object link, string user, string password, string database)">Change logged-in user of the active connection</phpsyntax><phpsyntax function="mysqli_character_set_name" usage="string mysqli_character_set_name(object link)">Returns the name of the character set used for this connection</phpsyntax><phpsyntax function="mysqli_close" usage="bool mysqli_close(object link)">Close connection</phpsyntax><phpsyntax function="mysqli_commit" usage="bool mysqli_commit(object link)">Commit outstanding actions and close transaction</phpsyntax><phpsyntax function="mysqli_data_seek" usage="bool mysqli_data_seek(object result, int offset)">Move internal result pointer</phpsyntax><phpsyntax function="mysqli_debug" usage="void mysqli_debug(string debug)"/><phpsyntax function="mysqli_dump_debug_info" usage="bool mysqli_dump_debug_info(object link)"/><phpsyntax function="mysqli_errno" usage="int mysqli_errno(object link)">Returns the numerical value of the error message from previous MySQL operation</phpsyntax><phpsyntax function="mysqli_error" usage="string mysqli_error(object link)">Returns the text of the error message from previous MySQL operation</phpsyntax><phpsyntax function="mysqli_field_count" usage="int mysqli_field_count(object link)">Fetch the number of fields returned by the last query for the given link</phpsyntax><phpsyntax function="mysqli_field_seek" usage="int mysqli_field_seek(object result, int fieldnr)">Set result pointer to a specified field offset</phpsyntax><phpsyntax function="mysqli_field_tell" usage="int mysqli_field_tell(object result)">Get current field offset of result pointer</phpsyntax><phpsyntax function="mysqli_free_result" usage="void mysqli_free_result(object result)">Free query result memory for the given result handle</phpsyntax><phpsyntax function="mysqli_get_client_info" usage="string mysqli_get_client_info(void)">Get MySQL client info</phpsyntax><phpsyntax function="mysqli_get_client_version" usage="int mysqli_get_client_version(void)">Get MySQL client info</phpsyntax><phpsyntax function="mysqli_get_proto_info" usage="int mysqli_get_proto_info(object link)">Get MySQL protocol information</phpsyntax><phpsyntax function="mysqli_get_server_info" usage="string mysqli_get_server_info(object link)">Get MySQL server info</phpsyntax><phpsyntax function="mysqli_get_server_version" usage="int mysqli_get_server_version(object link)">Return the MySQL version for the server referenced by the given link</phpsyntax><phpsyntax function="mysqli_info" usage="string mysqli_info(object link)">Get information about the most recent query</phpsyntax><phpsyntax function="mysqli_init" usage="resource mysqli_init(void)">Initialize mysqli and return a resource for use with mysql_real_connect</phpsyntax><phpsyntax function="mysqli_insert_id" usage="mixed mysqli_insert_id(object link)">Get the ID generated from the previous INSERT operation</phpsyntax><phpsyntax function="mysqli_kill" usage="bool mysqli_kill(object link, int processid)">Kill a mysql process on the server</phpsyntax><phpsyntax function="mysqli_more_results" usage="bool mysqli_more_results(object link)">check if there any more query results from a multi query</phpsyntax><phpsyntax function="mysqli_next_result" usage="bool mysqli_next_result(object link)">read next result from multi_query</phpsyntax><phpsyntax function="mysqli_num_fields" usage="int mysqli_num_fields(object result)">Get number of fields in result</phpsyntax><phpsyntax function="mysqli_num_rows" usage="mixed mysqli_num_rows(object result)">Get number of rows in result</phpsyntax><phpsyntax function="mysqli_options" usage="bool mysqli_options(object link, int flags, mixed values)">Set options</phpsyntax><phpsyntax function="mysqli_ping" usage="bool mysqli_ping(object link)">Ping a server connection or reconnect if there is no connection</phpsyntax><phpsyntax function="mysqli_prepare" usage="mixed mysqli_prepare(object link, string query)">Prepare a SQL statement for execution</phpsyntax><phpsyntax function="mysqli_real_connect" usage="bool mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])">Open a connection to a mysql server</phpsyntax><phpsyntax function="mysqli_real_escape_string" usage="string mysqli_real_escape_string(object link, string escapestr)">Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection</phpsyntax><phpsyntax function="mysqli_real_query" usage="bool mysqli_real_query(object link, string query)">Binary-safe version of mysql_query()</phpsyntax><phpsyntax function="mysqli_rollback" usage="bool mysqli_rollback(object link)">Undo actions from current transaction</phpsyntax><phpsyntax function="mysqli_select_db" usage="string mysqli_select_db(object link, string dbname)">Select a MySQL database</phpsyntax><phpsyntax function="mysqli_send_long_data" usage="bool mysqli_send_long_data(object stmt, int param_nr, string data)"/><phpsyntax function="mysqli_server_end" usage="void mysqli_server_end(void)"/><phpsyntax function="mysqli_server_init" usage="bool mysqli_server_init(void)">initialize embedded server</phpsyntax><phpsyntax function="mysqli_sqlstate" usage="string mysqli_sqlstate(object link)">Returns the SQLSTATE error from previous MySQL operation</phpsyntax><phpsyntax function="mysqli_ssl_set" usage="bool mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])"/><phpsyntax function="mysqli_stat" usage="mixed mysqli_stat(object link)">Get current system status</phpsyntax><phpsyntax function="mysqli_stmt_affected_rows" usage="mixed mysqli_stmt_affected_rows(object stmt)">Return the number of rows affected in the last query for the given link</phpsyntax><phpsyntax function="mysqli_stmt_bind_param" usage="bool mysqli_stmt_bind_param(object stmt, string types, mixed variable [,mixed,....])">Bind variables to a prepared statement as parameters</phpsyntax><phpsyntax function="mysqli_stmt_bind_result" usage="bool mysqli_stmt_bind_result(object stmt, mixed var, [,mixed, ...])">Bind variables to a prepared statement for result storage</phpsyntax><phpsyntax function="mysqli_stmt_close" usage="bool mysqli_stmt_close(object stmt)">Close statement</phpsyntax><phpsyntax function="mysqli_stmt_data_seek" usage="void mysqli_stmt_data_seek(object stmt, int offset)">Move internal result pointer</phpsyntax><phpsyntax function="mysqli_stmt_errno" usage="int mysqli_stmt_errno(object stmt)"/><phpsyntax function="mysqli_stmt_error" usage="string mysqli_stmt_error(object stmt)"/><phpsyntax function="mysqli_stmt_execute" usage="bool mysqli_stmt_execute(object stmt)">Execute a prepared statement</phpsyntax><phpsyntax function="mysqli_stmt_fetch" usage="mixed mysqli_stmt_fetch(object stmt)">Fetch results from a prepared statement into the bound variables</phpsyntax><phpsyntax function="mysqli_stmt_free_result" usage="void mysqli_stmt_free_result(object stmt)">Free stored result memory for the given statement handle</phpsyntax><phpsyntax function="mysqli_stmt_init" usage="object mysqli_stmt_init(object link)">Initialize statement object</phpsyntax><phpsyntax function="mysqli_stmt_num_rows" usage="mixed mysqli_stmt_num_rows(object stmt)">Return the number of rows in statements result set</phpsyntax><phpsyntax function="mysqli_stmt_prepare" usage="bool mysqli_stmt_prepare(object link, string query)">prepare server side statement with query</phpsyntax><phpsyntax function="mysqli_stmt_reset" usage="void mysqli_stmt_reset(object stmt)">reset a prepared statement</phpsyntax><phpsyntax function="mysqli_stmt_result_metadata" usage="mixed mysqli_stmt_result_metadata(object stmt)">return result set from statement</phpsyntax><phpsyntax function="mysqli_stmt_sqlstate" usage="string mysqli_stmt_sqlstate(object stmt)"/><phpsyntax function="mysqli_stmt_store_result" usage="bool mysqli_stmt_store_result(stmt)"/><phpsyntax function="mysqli_store_result" usage="object mysqli_store_result(object link)">Buffer result set on client</phpsyntax><phpsyntax function="mysqli_thread_id" usage="int mysqli_thread_id(object link)">Return the current thread ID</phpsyntax><phpsyntax function="mysqli_thread_safe" usage="bool mysqli_thread_safe(void)">Return whether thread safety is given or not</phpsyntax><phpsyntax function="mysqli_use_result" usage="mixed mysqli_use_result(object link)">Directly retrieve query results - do not buffer results on client side</phpsyntax><phpsyntax function="mysqli_connect" usage="object mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])">Open a connection to a mysql server</phpsyntax><phpsyntax function="mysqli_connect_errno" usage="int mysqli_connect_errno(void)">Returns the numerical value of the error message from last connect command</phpsyntax><phpsyntax function="mysqli_connect_error" usage="string mysqli_connect_error(void)">Returns the text of the error message from previous MySQL operation</phpsyntax><phpsyntax function="mysqli_embedded_connect" usage="object mysqli_embedded_connect(void)">Open a connection to a embedded mysql server</phpsyntax><phpsyntax function="mysqli_multi_query" usage="bool mysqli_multi_query(object link, string query)">Binary-safe version of mysql_query()</phpsyntax><phpsyntax function="mysqli_query" usage="mixed mysqli_query(object link, string query [,int resultmode])"/><phpsyntax function="mysqli_disable_reads_from_master" usage="void mysqli_disable_reads_from_master(object link)"/><phpsyntax function="mysqli_disable_rpl_parse" usage="void mysqli_disable_rpl_parse(object link)"/><phpsyntax function="mysqli_enable_reads_from_master" usage="void mysqli_enable_reads_from_master(object link)"/><phpsyntax function="mysqli_enable_rpl_parse" usage="void mysqli_enable_rpl_parse(object link)"/><phpsyntax function="mysqli_master_query" usage="bool mysqli_master_query(object link, string query)">Enforce execution of a query on the master in a master/slave setup</phpsyntax><phpsyntax function="mysqli_rpl_parse_enabled" usage="int mysqli_rpl_parse_enabled(object link)"/><phpsyntax function="mysqli_rpl_probe" usage="bool mysqli_rpl_probe(object link)"/><phpsyntax function="mysqli_rpl_query_type" usage="int mysqli_rpl_query_type(string query)"/><phpsyntax function="mysqli_send_query" usage="bool mysqli_send_query(object link, string query)"/><phpsyntax function="mysqli_slave_query" usage="bool mysqli_slave_query(object link, string query)">Enforce execution of a query on a slave in a master/slave setup</phpsyntax><phpsyntax function="ncurses_addch" usage="int ncurses_addch(int ch)">Adds character at current position and advance cursor</phpsyntax><phpsyntax function="ncurses_addchnstr" usage="int ncurses_addchnstr(string s, int n)">Adds attributed string with specified length at current position</phpsyntax><phpsyntax function="ncurses_addchstr" usage="int ncurses_addchstr(string s)">Adds attributed string at current position</phpsyntax><phpsyntax function="ncurses_addnstr" usage="int ncurses_addnstr(string s, int n)">Adds string with specified length at current position</phpsyntax><phpsyntax function="ncurses_addstr" usage="int ncurses_addstr(string text)">Outputs text at current position</phpsyntax><phpsyntax function="ncurses_assume_default_colors" usage="int ncurses_assume_default_colors(int fg, int bg)">Defines default colors for color 0</phpsyntax><phpsyntax function="ncurses_attroff" usage="int ncurses_attroff(int attributes)">Turns off the given attributes</phpsyntax><phpsyntax function="ncurses_attron" usage="int ncurses_attron(int attributes)">Turns on the given attributes</phpsyntax><phpsyntax function="ncurses_attrset" usage="int ncurses_attrset(int attributes)">Sets given attributes</phpsyntax><phpsyntax function="ncurses_baudrate" usage="int ncurses_baudrate(void)">Returns baudrate of terminal</phpsyntax><phpsyntax function="ncurses_beep" usage="int ncurses_beep(void)">Let the terminal beep</phpsyntax><phpsyntax function="ncurses_bkgd" usage="int ncurses_bkgd(int attrchar)">Sets background property for terminal screen</phpsyntax><phpsyntax function="ncurses_bkgdset" usage="void ncurses_bkgdset(int attrchar)">Controls screen background</phpsyntax><phpsyntax function="ncurses_border" usage="int ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)">Draws a border around the screen using attributed characters</phpsyntax><phpsyntax function="ncurses_bottom_panel" usage="int ncurses_bottom_panel(resource panel)">Moves a visible panel to the bottom of the stack</phpsyntax><phpsyntax function="ncurses_can_change_color" usage="bool ncurses_can_change_color(void)">Checks if we can change terminals colors</phpsyntax><phpsyntax function="ncurses_cbreak" usage="bool ncurses_cbreak(void)">Switches of input buffering</phpsyntax><phpsyntax function="ncurses_clear" usage="bool ncurses_clear(void)">Clears screen</phpsyntax><phpsyntax function="ncurses_clrtobot" usage="bool ncurses_clrtobot(void)">Clears screen from current position to bottom</phpsyntax><phpsyntax function="ncurses_clrtoeol" usage="bool ncurses_clrtoeol(void)">Clears screen from current position to end of line</phpsyntax><phpsyntax function="ncurses_color_content" usage="int ncurses_color_content(int color, int &amp;r, int &amp;g, int &amp;b)">Gets the RGB value for color</phpsyntax><phpsyntax function="ncurses_color_set" usage="int ncurses_color_set(int pair)">Sets fore- and background color</phpsyntax><phpsyntax function="ncurses_curs_set" usage="int ncurses_curs_set(int visibility)">Sets cursor state</phpsyntax><phpsyntax function="ncurses_def_prog_mode" usage="int ncurses_def_prog_mode(void)">Saves terminals (program) mode</phpsyntax><phpsyntax function="ncurses_def_shell_mode" usage="int ncurses_def_shell_mode(void)">Saves terminal (shell) mode</phpsyntax><phpsyntax function="ncurses_define_key" usage="int ncurses_define_key(string definition, int keycode)">Defines a keycode</phpsyntax><phpsyntax function="ncurses_del_panel" usage="bool ncurses_del_panel(resource panel)">Remove panel from the stack and delete it (but not the associated window)</phpsyntax><phpsyntax function="ncurses_delay_output" usage="int ncurses_delay_output(int milliseconds)">Delays output on terminal using padding characters</phpsyntax><phpsyntax function="ncurses_delch" usage="int ncurses_delch(void)">Deletes character at current position, move rest of line left</phpsyntax><phpsyntax function="ncurses_deleteln" usage="int ncurses_deleteln(void)">Deletes line at current position, move rest of screen up</phpsyntax><phpsyntax function="ncurses_delwin" usage="int ncurses_delwin(resource window)">Deletes a ncurses window</phpsyntax><phpsyntax function="ncurses_doupdate" usage="int ncurses_doupdate(void)">Writes all prepared refreshes to terminal</phpsyntax><phpsyntax function="ncurses_echo" usage="int ncurses_echo(void)">Activates keyboard input echo</phpsyntax><phpsyntax function="ncurses_echochar" usage="int ncurses_echochar(int character)">Single character output including refresh</phpsyntax><phpsyntax function="ncurses_end" usage="int ncurses_end(void)">Stops using ncurses, clean up the screen</phpsyntax><phpsyntax function="ncurses_erase" usage="int ncurses_erase(void)">Erases terminal screen</phpsyntax><phpsyntax function="ncurses_erasechar" usage="string ncurses_erasechar(void)">Returns current erase character</phpsyntax><phpsyntax function="ncurses_filter" usage="void ncurses_filter(void)"/><phpsyntax function="ncurses_flash" usage="int ncurses_flash(void)">Flashes terminal screen (visual bell)</phpsyntax><phpsyntax function="ncurses_flushinp" usage="int ncurses_flushinp(void)">Flushes keyboard input buffer</phpsyntax><phpsyntax function="ncurses_getch" usage="int ncurses_getch(void)">Reads a character from keyboard</phpsyntax><phpsyntax function="ncurses_getmaxyx" usage="void ncurses_getmaxyx(resource window, int &amp;y, int &amp;x)">Returns the size of a window</phpsyntax><phpsyntax function="ncurses_getmouse" usage="bool ncurses_getmouse(array &amp;mevent)">Reads mouse event from queue. The content of mevent is cleared before new data is added.</phpsyntax><phpsyntax function="ncurses_getyx" usage="void ncurses_getyx(resource window, int &amp;y, int &amp;x)">Returns the current cursor position for a window</phpsyntax><phpsyntax function="ncurses_halfdelay" usage="int ncurses_halfdelay(int tenth)">Puts terminal into halfdelay mode</phpsyntax><phpsyntax function="ncurses_has_colors" usage="bool ncurses_has_colors(void)">Checks if terminal has colors</phpsyntax><phpsyntax function="ncurses_has_ic" usage="int ncurses_has_ic(void)">Checks for insert- and delete-capabilities</phpsyntax><phpsyntax function="ncurses_has_il" usage="int ncurses_has_il(void)">Checks for line insert- and delete-capabilities</phpsyntax><phpsyntax function="ncurses_has_key" usage="int ncurses_has_key(int keycode)">Checks for presence of a function key on terminal keyboard</phpsyntax><phpsyntax function="ncurses_hide_panel" usage="int ncurses_hide_panel(resource panel)">Remove panel from the stack, making it invisible</phpsyntax><phpsyntax function="ncurses_hline" usage="int ncurses_hline(int charattr, int n)">Draws a horizontal line at current position using an attributed character and max. n characters long</phpsyntax><phpsyntax function="ncurses_inch" usage="string ncurses_inch(void)">Gets character and attribute at current position</phpsyntax><phpsyntax function="ncurses_init" usage="int ncurses_init(void)">Initializes ncurses</phpsyntax><phpsyntax function="ncurses_init_color" usage="int ncurses_init_color(int color, int r, int g, int b)">Sets new RGB value for color</phpsyntax><phpsyntax function="ncurses_init_pair" usage="int ncurses_init_pair(int pair, int fg, int bg)">Allocates a color pair</phpsyntax><phpsyntax function="ncurses_insch" usage="int ncurses_insch(int character)">Inserts character moving rest of line including character at current position</phpsyntax><phpsyntax function="ncurses_insdelln" usage="int ncurses_insdelln(int count)">Inserts lines before current line scrolling down (negative numbers delete and scroll up)</phpsyntax><phpsyntax function="ncurses_insertln" usage="int ncurses_insertln(void)">Inserts a line, move rest of screen down</phpsyntax><phpsyntax function="ncurses_insstr" usage="int ncurses_insstr(string text)">Inserts string at current position, moving rest of line right</phpsyntax><phpsyntax function="ncurses_instr" usage="int ncurses_instr(string &amp;buffer)">Reads string from terminal screen</phpsyntax><phpsyntax function="ncurses_isendwin" usage="int ncurses_isendwin(void)">Ncurses is in endwin mode, normal screen output may be performed</phpsyntax><phpsyntax function="ncurses_keyok" usage="int ncurses_keyok(int keycode, int enable)">Enables or disable a keycode</phpsyntax><phpsyntax function="ncurses_keypad" usage="int ncurses_keypad(resource window, bool bf)">Turns keypad on or off</phpsyntax><phpsyntax function="ncurses_killchar" usage="string ncurses_killchar(void)">Returns current line kill character</phpsyntax><phpsyntax function="ncurses_longname" usage="string ncurses_longname(void)">Returns terminal description</phpsyntax><phpsyntax function="ncurses_meta" usage="int ncurses_meta(resource window, bool 8bit)">Enables/Disable 8-bit meta key information</phpsyntax><phpsyntax function="ncurses_mouse_trafo" usage="bool ncurses_mouse_trafo(int &amp;y, int &amp;x, bool toscreen)">Transforms coordinates</phpsyntax><phpsyntax function="ncurses_mouseinterval" usage="int ncurses_mouseinterval(int milliseconds)">Sets timeout for mouse button clicks</phpsyntax><phpsyntax function="ncurses_mousemask" usage="int ncurses_mousemask(int newmask, int &amp;oldmask)">Returns and sets mouse options</phpsyntax><phpsyntax function="ncurses_move" usage="int ncurses_move(int y, int x)">Moves output position</phpsyntax><phpsyntax function="ncurses_move_panel" usage="int ncurses_move_panel(resource panel, int startx, int starty)">Moves a panel so that it's upper-left corner is at [startx, starty]</phpsyntax><phpsyntax function="ncurses_mvaddch" usage="int ncurses_mvaddch(int y, int x, int c)">Moves current position and add character</phpsyntax><phpsyntax function="ncurses_mvaddchnstr" usage="int ncurses_mvaddchnstr(int y, int x, string s, int n)">Moves position and add attrributed string with specified length</phpsyntax><phpsyntax function="ncurses_mvaddchstr" usage="int ncurses_mvaddchstr(int y, int x, string s)">Moves position and add attributed string</phpsyntax><phpsyntax function="ncurses_mvaddnstr" usage="int ncurses_mvaddnstr(int y, int x, string s, int n)">Moves position and add string with specified length</phpsyntax><phpsyntax function="ncurses_mvaddstr" usage="int ncurses_mvaddstr(int y, int x, string s)">Moves position and add string</phpsyntax><phpsyntax function="ncurses_mvcur" usage="int ncurses_mvcur(int old_y,int old_x, int new_y, int new_x)">Moves cursor immediately</phpsyntax><phpsyntax function="ncurses_mvdelch" usage="int ncurses_mvdelch(int y, int x)">Moves position and delete character, shift rest of line left</phpsyntax><phpsyntax function="ncurses_mvgetch" usage="int ncurses_mvgetch(int y, int x)">Moves position and get character at new position</phpsyntax><phpsyntax function="ncurses_mvhline" usage="int ncurses_mvhline(int y, int x, int attrchar, int n)">Sets new position and draw a horizontal line using an attributed character and max. n characters long</phpsyntax><phpsyntax function="ncurses_mvinch" usage="int ncurses_mvinch(int y, int x)">Moves position and get attributed character at new position</phpsyntax><phpsyntax function="ncurses_mvvline" usage="int ncurses_mvvline(int y, int x, int attrchar, int n)">Sets new position and draw a vertical line using an attributed character and max. n characters long</phpsyntax><phpsyntax function="ncurses_mvwaddstr" usage="int ncurses_mvwaddstr(resource window, int y, int x, string text)">Adds string at new position in window</phpsyntax><phpsyntax function="ncurses_napms" usage="int ncurses_napms(int milliseconds)">Sleep</phpsyntax><phpsyntax function="ncurses_new_panel" usage="resource ncurses_new_panel(resource window)">Create a new panel and associate it with window</phpsyntax><phpsyntax function="ncurses_newpad" usage="resource ncurses_newpad(int rows, int cols)">Creates a new pad (window)</phpsyntax><phpsyntax function="ncurses_newwin" usage="int ncurses_newwin(int rows, int cols, int y, int x)">Creates a new window</phpsyntax><phpsyntax function="ncurses_nl" usage="int ncurses_nl(void)">Translates newline and carriage return / line feed</phpsyntax><phpsyntax function="ncurses_nocbreak" usage="int ncurses_nocbreak(void)">Switches terminal to cooked mode</phpsyntax><phpsyntax function="ncurses_noecho" usage="int ncurses_noecho(void)">Switches off keyboard input echo</phpsyntax><phpsyntax function="ncurses_nonl" usage="int ncurses_nonl(void)">Do not ranslate newline and carriage return / line feed</phpsyntax><phpsyntax function="ncurses_noqiflush" usage="int ncurses_noqiflush(void)">Do not flush on signal characters</phpsyntax><phpsyntax function="ncurses_noraw" usage="bool ncurses_noraw(void)">Switches terminal out of raw mode</phpsyntax><phpsyntax function="ncurses_pair_content" usage="int ncurses_pair_content(int pair, int &amp;f, int &amp;b)">Gets the RGB value for color</phpsyntax><phpsyntax function="ncurses_panel_above" usage="resource ncurses_panel_above(resource panel)">Returns the panel above panel. If panel is null, returns the bottom panel in the stack</phpsyntax><phpsyntax function="ncurses_panel_below" usage="resource ncurses_panel_below(resource panel)">Returns the panel below panel. If panel is null, returns the top panel in the stack</phpsyntax><phpsyntax function="ncurses_panel_window" usage="resource ncurses_panel_window(resource panel)">Returns the window associated with panel</phpsyntax><phpsyntax function="ncurses_pnoutrefresh" usage="int ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)">Copys a region from a pad into the virtual screen</phpsyntax><phpsyntax function="ncurses_prefresh" usage="int ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)">Copys a region from a pad into the virtual screen</phpsyntax><phpsyntax function="ncurses_putp" usage="int ncurses_putp(string text)">???</phpsyntax><phpsyntax function="ncurses_qiflush" usage="void ncurses_qiflush(void)">Flushes on signal characters</phpsyntax><phpsyntax function="ncurses_raw" usage="int ncurses_raw(void)">Switches terminal into raw mode</phpsyntax><phpsyntax function="ncurses_refresh" usage="int ncurses_refresh(int ch)">Refresh screen</phpsyntax><phpsyntax function="ncurses_replace_panel" usage="int ncurses_replace_panel(resource panel, resource window)">Replaces the window associated with panel</phpsyntax><phpsyntax function="ncurses_reset_prog_mode" usage="int ncurses_reset_prog_mode(void)">Resets the prog mode saved by def_prog_mode</phpsyntax><phpsyntax function="ncurses_reset_shell_mode" usage="int ncurses_reset_shell_mode(void)">Resets the shell mode saved by def_shell_mode</phpsyntax><phpsyntax function="ncurses_resetty" usage="int ncurses_resetty(void)">Restores saved terminal state</phpsyntax><phpsyntax function="ncurses_savetty" usage="int ncurses_savetty(void)">Saves terminal state</phpsyntax><phpsyntax function="ncurses_scr_dump" usage="int ncurses_scr_dump(string filename)">Dumps screen content to file</phpsyntax><phpsyntax function="ncurses_scr_init" usage="int ncurses_scr_init(string filename)">Initializes screen from file dump</phpsyntax><phpsyntax function="ncurses_scr_restore" usage="int ncurses_scr_restore(string filename)">Restores screen from file dump</phpsyntax><phpsyntax function="ncurses_scr_set" usage="int ncurses_scr_set(string filename)">Inherits screen from file dump</phpsyntax><phpsyntax function="ncurses_scrl" usage="int ncurses_scrl(int count)">Scrolls window content up or down without changing current position</phpsyntax><phpsyntax function="ncurses_show_panel" usage="int ncurses_show_panel(resource panel)">Places an invisible panel on top of the stack, making it visible</phpsyntax><phpsyntax function="ncurses_slk_attr" usage="int ncurses_slk_attr(void)">Returns current soft label keys attribute</phpsyntax><phpsyntax function="ncurses_slk_attroff" usage="int ncurses_slk_attroff(int intarg)">???</phpsyntax><phpsyntax function="ncurses_slk_attron" usage="int ncurses_slk_attron(int intarg)">???</phpsyntax><phpsyntax function="ncurses_slk_attrset" usage="int ncurses_slk_attrset(int intarg)">???</phpsyntax><phpsyntax function="ncurses_slk_clear" usage="int ncurses_slk_clear(void)">Clears soft label keys from screen</phpsyntax><phpsyntax function="ncurses_slk_color" usage="int ncurses_slk_color(int intarg)">Sets color for soft label keys</phpsyntax><phpsyntax function="ncurses_slk_init" usage="int ncurses_slk_init(int intarg)">Inits soft label keys</phpsyntax><phpsyntax function="ncurses_slk_noutrefresh" usage="int ncurses_slk_noutrefresh(void)">Copies soft label keys to virtual screen</phpsyntax><phpsyntax function="ncurses_slk_refresh" usage="int ncurses_slk_refresh(void)">Copies soft label keys to screen</phpsyntax><phpsyntax function="ncurses_slk_restore" usage="int ncurses_slk_restore(void)">Restores soft label keys</phpsyntax><phpsyntax function="ncurses_slk_set" usage="bool ncurses_slk_set(int labelnr, string label, int format)">Sets function key labels</phpsyntax><phpsyntax function="ncurses_slk_touch" usage="int ncurses_slk_touch(void)">Forces output when ncurses_slk_noutrefresh is performed</phpsyntax><phpsyntax function="ncurses_standend" usage="int ncurses_standend(void)">Stops using 'standout' attribute</phpsyntax><phpsyntax function="ncurses_standout" usage="int ncurses_standout(void)">Starts using 'standout' attribute</phpsyntax><phpsyntax function="ncurses_start_color" usage="int ncurses_start_color(void)">Starts using colors</phpsyntax><phpsyntax function="ncurses_termattrs" usage="int ncurses_termattrs(void)">Returns a logical OR of all attribute flags supported by terminal</phpsyntax><phpsyntax function="ncurses_termname" usage="string ncurses_termname(void)">Returns terminal name</phpsyntax><phpsyntax function="ncurses_timeout" usage="void ncurses_timeout(int millisec)">Sets timeout for special key sequences</phpsyntax><phpsyntax function="ncurses_top_panel" usage="int ncurses_top_panel(resource panel)">Moves a visible panel to the top of the stack</phpsyntax><phpsyntax function="ncurses_typeahead" usage="int ncurses_typeahead(int fd)">Specifys different filedescriptor for typeahead checking</phpsyntax><phpsyntax function="ncurses_ungetch" usage="int ncurses_ungetch(int keycode)">Puts a character back into the input stream</phpsyntax><phpsyntax function="ncurses_ungetmouse" usage="int ncurses_ungetmouse(array mevent)">Pushes mouse event to queue</phpsyntax><phpsyntax function="ncurses_update_panels" usage="void ncurses_update_panels(void)">Refreshes the virtual screen to reflect the relations between panels in the stack.</phpsyntax><phpsyntax function="ncurses_use_default_colors" usage="int ncurses_use_default_colors(void)">Assigns terminal default colors to color id -1</phpsyntax><phpsyntax function="ncurses_use_env" usage="void ncurses_use_env(int flag)">Controls use of environment information about terminal size</phpsyntax><phpsyntax function="ncurses_use_extended_names" usage="int ncurses_use_extended_names(bool flag)">Controls use of extended names in terminfo descriptions</phpsyntax><phpsyntax function="ncurses_vidattr" usage="int ncurses_vidattr(int intarg)">???</phpsyntax><phpsyntax function="ncurses_vline" usage="int ncurses_vline(int charattr, int n)">Draws a vertical line at current position using an attributed character and max. n characters long</phpsyntax><phpsyntax function="ncurses_waddch" usage="int ncurses_waddch(resource window, int ch)">Adds character at current position in a window and advance cursor</phpsyntax><phpsyntax function="ncurses_waddstr" usage="int ncurses_waddstr(resource window, string str [, int n])">Outputs text at current postion in window</phpsyntax><phpsyntax function="ncurses_wattroff" usage="int ncurses_wattroff(resource window, int attrs)">Turns off attributes for a window</phpsyntax><phpsyntax function="ncurses_wattron" usage="int ncurses_wattron(resource window, int attrs)">Turns on attributes for a window</phpsyntax><phpsyntax function="ncurses_wattrset" usage="int ncurses_wattrset(resource window, int attrs)">Set the attributes for a window</phpsyntax><phpsyntax function="ncurses_wborder" usage="int ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)">Draws a border around the window using attributed characters</phpsyntax><phpsyntax function="ncurses_wclear" usage="int ncurses_wclear(resource window)">Clears window</phpsyntax><phpsyntax function="ncurses_wcolor_set" usage="int ncurses_wcolor_set(resource window, int color_pair)">Sets windows color pairings</phpsyntax><phpsyntax function="ncurses_werase" usage="int ncurses_werase(resource window)">Erase window contents</phpsyntax><phpsyntax function="ncurses_wgetch" usage="int ncurses_wgetch(resource window)">Reads a character from keyboard (window)</phpsyntax><phpsyntax function="ncurses_whline" usage="int ncurses_whline(resource window, int charattr, int n)">Draws a horizontal line in a window at current position using an attributed character and max. n characters long</phpsyntax><phpsyntax function="ncurses_wmouse_trafo" usage="bool ncurses_wmouse_trafo(resource window, int &amp;y, int &amp;x, bool toscreen)">Transforms window/stdscr coordinates</phpsyntax><phpsyntax function="ncurses_wmove" usage="int ncurses_wmove(resource window, int y, int x)">Moves windows output position</phpsyntax><phpsyntax function="ncurses_wnoutrefresh" usage="int ncurses_wnoutrefresh(resource window)">Copies window to virtual screen</phpsyntax><phpsyntax function="ncurses_wrefresh" usage="int ncurses_wrefresh(resource window)">Refreshes window on terminal screen</phpsyntax><phpsyntax function="ncurses_wstandend" usage="int ncurses_wstandend(resource window)">End standout mode for a window</phpsyntax><phpsyntax function="ncurses_wstandout" usage="int ncurses_wstandout(resource window)">Enter standout mode for a window</phpsyntax><phpsyntax function="ncurses_wvline" usage="int ncurses_wvline(resource window, int charattr, int n)">Draws a vertical line in a window at current position using an attributed character and max. n characters long</phpsyntax><phpsyntax function="oci_bind_by_name" usage="bool oci_bind_by_name(resource stmt, string name, mixed &amp;var, [, int maxlength [, int type]])">Bind a PHP variable to an Oracle placeholder by name</phpsyntax><phpsyntax function="oci_cancel" usage="bool oci_cancel(resource stmt)">Cancel reading from a cursor</phpsyntax><phpsyntax function="oci_close" usage="bool oci_close(resource conn)">Disconnect from database</phpsyntax><phpsyntax function="oci_collection_append" usage="bool oci_collection_append(string value)">Append an object to the collection</phpsyntax><phpsyntax function="oci_collection_assign" usage="bool oci_collection_assign(object from)">Assign a collection from another existing collection</phpsyntax><phpsyntax function="oci_collection_element_assign" usage="bool oci_collection_element_assign(int index, string val)">Assign element val to collection at index ndx</phpsyntax><phpsyntax function="oci_collection_element_get" usage="string oci_collection_element_get(int ndx)">Retrieve the value at collection index ndx</phpsyntax><phpsyntax function="oci_collection_max" usage="int oci_collection_max()">Return the max value of a collection. For a varray this is the maximum length of the array</phpsyntax><phpsyntax function="oci_collection_size" usage="int oci_collection_size()">Return the size of a collection</phpsyntax><phpsyntax function="oci_collection_trim" usage="bool oci_collection_trim(int num)">Trim num elements from the end of a collection</phpsyntax><phpsyntax function="oci_commit" usage="bool oci_commit(resource conn)">Commit the current context</phpsyntax><phpsyntax function="oci_connect" usage="resource oci_connect(string user, string pass [, string db])">Connect to an Oracle database and log on. Returns a new session.</phpsyntax><phpsyntax function="oci_define_by_name" usage="bool oci_define_by_name(resource stmt, string name, mixed &amp;var [, int type])">Define a PHP variable to an Oracle column by name</phpsyntax><phpsyntax function="oci_error" usage="array oci_error([resource stmt|conn|global])">Return the last error of stmt|conn|global. If no error happened returns false.</phpsyntax><phpsyntax function="oci_execute" usage="bool oci_execute(resource stmt [, int mode])">Execute a parsed statement</phpsyntax><phpsyntax function="oci_fetch" usage="bool oci_fetch(resource stmt)">Prepare a new row of data for reading</phpsyntax><phpsyntax function="oci_fetch_all" usage="int oci_fetch_all(resource stmt, array &amp;output[, int skip[, int maxrows[, int flags]]])">Fetch all rows of result data into an array</phpsyntax><phpsyntax function="oci_fetch_array" usage="array oci_fetch_array( resource stmt [, int mode ])">Fetch a result row as an array</phpsyntax><phpsyntax function="oci_fetch_assoc" usage="array oci_fetch_assoc( resource stmt )">Fetch a result row as an associative array</phpsyntax><phpsyntax function="oci_fetch_object" usage="object oci_fetch_object( resource stmt )">Fetch a result row as an object</phpsyntax><phpsyntax function="oci_fetch_row" usage="array oci_fetch_row( resource stmt )">Fetch a result row as an enumerated array</phpsyntax><phpsyntax function="oci_field_is_null" usage="bool oci_field_is_null(resource stmt, int col)">Tell whether a column is NULL</phpsyntax><phpsyntax function="oci_field_name" usage="string oci_field_name(resource stmt, int col)">Tell the name of a column</phpsyntax><phpsyntax function="oci_field_precision" usage="int oci_field_precision(resource stmt, int col)">Tell the precision of a column</phpsyntax><phpsyntax function="oci_field_scale" usage="int oci_field_scale(resource stmt, int col)">Tell the scale of a column</phpsyntax><phpsyntax function="oci_field_size" usage="int oci_field_size(resource stmt, int col)">Tell the maximum data size of a column</phpsyntax><phpsyntax function="oci_field_type" usage="mixed oci_field_type(resource stmt, int col)">Tell the data type of a column</phpsyntax><phpsyntax function="oci_field_type_raw" usage="int oci_field_type_raw(resource stmt, int col)">Tell the raw oracle data type of a column</phpsyntax><phpsyntax function="oci_free_collection" usage="bool oci_free_collection()">Deletes collection object</phpsyntax><phpsyntax function="oci_free_descriptor" usage="bool oci_free_descriptor()">Deletes large object description</phpsyntax><phpsyntax function="oci_free_statement" usage="bool oci_free_statement(resource stmt)">Free all resources associated with a statement</phpsyntax><phpsyntax function="oci_internal_debug" usage="void oci_internal_debug(int onoff)">Toggle internal debugging output for the OCI extension</phpsyntax><phpsyntax function="oci_lob_append" usage="bool oci_lob_append( object lob )">Appends data from a LOB to another LOB</phpsyntax><phpsyntax function="oci_lob_close" usage="bool oci_lob_close()">Closes lob descriptor</phpsyntax><phpsyntax function="oci_lob_copy" usage="bool oci_lob_copy( object lob_to, object lob_from [, int length ] )">Copies data from a LOB to another LOB</phpsyntax><phpsyntax function="oci_lob_eof" usage="bool oci_lob_eof()">Checks if EOF is reached</phpsyntax><phpsyntax function="oci_lob_erase" usage="int oci_lob_erase( [ int offset [, int length ] ] )">Erases a specified portion of the internal LOB, starting at a specified offset</phpsyntax><phpsyntax function="oci_lob_export" usage="bool oci_lob_export([string filename [, int start [, int length]]])">Writes a large object into a file</phpsyntax><phpsyntax function="oci_lob_flush" usage="bool oci_lob_flush( [ int flag ] )">Flushes the LOB buffer</phpsyntax><phpsyntax function="oci_lob_import" usage="bool oci_lob_import( string filename )">Saves a large object to file</phpsyntax><phpsyntax function="oci_lob_is_equal" usage="bool oci_lob_is_equal( object lob1, object lob2 )">Tests to see if two LOB/FILE locators are equal</phpsyntax><phpsyntax function="oci_lob_load" usage="string oci_lob_load()">Loads a large object</phpsyntax><phpsyntax function="oci_lob_read" usage="string oci_lob_read( int length )">Reads particular part of a large object</phpsyntax><phpsyntax function="oci_lob_rewind" usage="bool oci_lob_rewind()">Rewind pointer of a LOB</phpsyntax><phpsyntax function="oci_lob_save" usage="bool oci_lob_save( string data [, int offset ])">Saves a large object</phpsyntax><phpsyntax function="oci_lob_seek" usage="bool oci_lob_seek( int offset [, int whence ])">Moves the pointer of a LOB</phpsyntax><phpsyntax function="oci_lob_size" usage="int oci_lob_size()">Returns size of a large object</phpsyntax><phpsyntax function="oci_lob_tell" usage="int oci_lob_tell()">Tells LOB pointer position</phpsyntax><phpsyntax function="oci_lob_truncate" usage="bool oci_lob_truncate( [ int length ])">Truncates a LOB</phpsyntax><phpsyntax function="oci_lob_write" usage="int oci_lob_write( string string [, int length ])">Writes data to current position of a LOB</phpsyntax><phpsyntax function="oci_lob_write_temporary" usage="bool oci_lob_write_temporary(string var [, int lob_type])">Writes temporary blob</phpsyntax><phpsyntax function="oci_new_collection" usage="object oci_new_collection(resource connection, string tdo [, string schema])">Initialize a new collection</phpsyntax><phpsyntax function="oci_new_connect" usage="resource oci_new_connect(string user, string pass [, string db])">Connect to an Oracle database and log on. Returns a new session.</phpsyntax><phpsyntax function="oci_new_cursor" usage="resource oci_new_cursor(resource conn)">Return a new cursor (Statement-Handle) - use this to bind ref-cursors!</phpsyntax><phpsyntax function="oci_new_descriptor" usage="object oci_new_descriptor(resource connection [, int type])">Initialize a new empty descriptor LOB/FILE (LOB is default)</phpsyntax><phpsyntax function="oci_num_fields" usage="int oci_num_fields(resource stmt)">Return the number of result columns in a statement</phpsyntax><phpsyntax function="oci_num_rows" usage="int oci_num_rows(resource stmt)">Return the row count of an OCI statement</phpsyntax><phpsyntax function="oci_parse" usage="resource oci_parse(resource conn, string query)">Parse a query and return a statement</phpsyntax><phpsyntax function="oci_password_change" usage="bool oci_password_change(resource conn, string username, string old_password, string new_password)">Changes the password of an account</phpsyntax><phpsyntax function="oci_pconnect" usage="resource oci_pconnect(string user, string pass [, string db])">Connect to an Oracle database using a persistent connection and log on. Returns a new session.</phpsyntax><phpsyntax function="oci_result" usage="string oci_result(resource stmt, mixed column)">Return a single column of result data</phpsyntax><phpsyntax function="oci_rollback" usage="bool oci_rollback(resource conn)">Rollback the current context</phpsyntax><phpsyntax function="oci_server_version" usage="string oci_server_version(resource conn)">Return a string containing server version information</phpsyntax><phpsyntax function="oci_set_prefetch" usage="bool oci_set_prefetch(resource stmt, int prefetch_rows)">Sets the number of rows to be prefetched on execute to prefetch_rows for stmt</phpsyntax><phpsyntax function="oci_statement_type" usage="string oci_statement_type(resource stmt)">Return the query type of an OCI statement</phpsyntax><phpsyntax function="ocifetchinto" usage="int ocifetchinto(resource stmt, array &amp;output [, int mode])">Fetch a row of result data into an array</phpsyntax><phpsyntax function="ocigetbufferinglob" usage="bool ocigetbufferinglob()">Returns current state of buffering for a LOB</phpsyntax><phpsyntax function="ocisetbufferinglob" usage="bool ocisetbufferinglob( boolean flag )">Enables/disables buffering for a LOB</phpsyntax><phpsyntax function="birdstep_autocommit" usage="bool birdstep_autocommit(int index)"/><phpsyntax function="birdstep_close" usage="bool birdstep_close(int id)"/><phpsyntax function="birdstep_commit" usage="bool birdstep_commit(int index)"/><phpsyntax function="birdstep_connect" usage="int birdstep_connect(string server, string user, string pass)"/><phpsyntax function="birdstep_exec" usage="int birdstep_exec(int index, string exec_str)"/><phpsyntax function="birdstep_fetch" usage="bool birdstep_fetch(int index)"/><phpsyntax function="birdstep_fieldname" usage="string birdstep_fieldname(int index, int col)"/><phpsyntax function="birdstep_fieldnum" usage="int birdstep_fieldnum(int index)"/><phpsyntax function="birdstep_freeresult" usage="bool birdstep_freeresult(int index)"/><phpsyntax function="birdstep_off_autocommit" usage="bool birdstep_off_autocommit(int index)"/><phpsyntax function="birdstep_result" usage="mixed birdstep_result(int index, int col)"/><phpsyntax function="birdstep_rollback" usage="bool birdstep_rollback(int index)"/><phpsyntax function="odbc_autocommit" usage="mixed odbc_autocommit(resource connection_id [, int OnOff])">Toggle autocommit mode or get status</phpsyntax><phpsyntax function="odbc_binmode" usage="bool odbc_binmode(int result_id, int mode)">Handle binary column data</phpsyntax><phpsyntax function="odbc_close" usage="void odbc_close(resource connection_id)">Close an ODBC connection</phpsyntax><phpsyntax function="odbc_close_all" usage="void odbc_close_all(void)">Close all ODBC connections</phpsyntax><phpsyntax function="odbc_columnprivileges" usage="resource odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)">Returns a result identifier that can be used to fetch a list of columns and associated privileges for the specified table</phpsyntax><phpsyntax function="odbc_columns" usage="resource odbc_columns(resource connection_id, string qualifier, string owner, string table_name, string column_name)">Returns a result identifier that can be used to fetch a list of column names in specified tables</phpsyntax><phpsyntax function="odbc_commit" usage="bool odbc_commit(resource connection_id)">Commit an ODBC transaction</phpsyntax><phpsyntax function="odbc_connect" usage="resource odbc_connect(string DSN, string user, string password [, int cursor_option])">Connect to a datasource</phpsyntax><phpsyntax function="odbc_cursor" usage="string odbc_cursor(resource result_id)">Get cursor name</phpsyntax><phpsyntax function="odbc_data_source" usage="array odbc_data_source(resource connection_id, int fetch_type)">Return information about the currently connected data source</phpsyntax><phpsyntax function="odbc_error" usage="string odbc_error([resource connection_id])">Get the last error code</phpsyntax><phpsyntax function="odbc_errormsg" usage="string odbc_errormsg([resource connection_id])">Get the last error message</phpsyntax><phpsyntax function="odbc_exec" usage="resource odbc_exec(resource connection_id, string query [, int flags])">Prepare and execute an SQL statement</phpsyntax><phpsyntax function="odbc_execute" usage="bool odbc_execute(resource result_id [, array parameters_array])">Execute a prepared statement</phpsyntax><phpsyntax function="odbc_fetch_array" usage="array odbc_fetch_array(int result [, int rownumber])">Fetch a result row as an associative array</phpsyntax><phpsyntax function="odbc_fetch_into" usage="int odbc_fetch_into(resource result_id, array result_array, [, int rownumber])">Fetch one result row into an array</phpsyntax><phpsyntax function="odbc_fetch_object" usage="object odbc_fetch_object(int result [, int rownumber])">Fetch a result row as an object</phpsyntax><phpsyntax function="odbc_fetch_row" usage="bool odbc_fetch_row(resource result_id [, int row_number])">Fetch a row</phpsyntax><phpsyntax function="odbc_field_len" usage="int odbc_field_len(resource result_id, int field_number)">Get the length (precision) of a column</phpsyntax><phpsyntax function="odbc_field_name" usage="string odbc_field_name(resource result_id, int field_number)">Get a column name</phpsyntax><phpsyntax function="odbc_field_num" usage="int odbc_field_num(resource result_id, string field_name)">Return column number</phpsyntax><phpsyntax function="odbc_field_scale" usage="int odbc_field_scale(resource result_id, int field_number)">Get the scale of a column</phpsyntax><phpsyntax function="odbc_field_type" usage="string odbc_field_type(resource result_id, int field_number)">Get the datatype of a column</phpsyntax><phpsyntax function="odbc_foreignkeys" usage="resource odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)">Returns a result identifier to either a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table</phpsyntax><phpsyntax function="odbc_free_result" usage="bool odbc_free_result(resource result_id)">Free resources associated with a result</phpsyntax><phpsyntax function="odbc_gettypeinfo" usage="resource odbc_gettypeinfo(resource connection_id [, int data_type])">Returns a result identifier containing information about data types supported by the data source</phpsyntax><phpsyntax function="odbc_longreadlen" usage="bool odbc_longreadlen(int result_id, int length)">Handle LONG columns</phpsyntax><phpsyntax function="odbc_next_result" usage="bool odbc_next_result(resource result_id)">Checks if multiple results are avaiable</phpsyntax><phpsyntax function="odbc_num_fields" usage="int odbc_num_fields(resource result_id)">Get number of columns in a result</phpsyntax><phpsyntax function="odbc_num_rows" usage="int odbc_num_rows(resource result_id)">Get number of rows in a result</phpsyntax><phpsyntax function="odbc_pconnect" usage="resource odbc_pconnect(string DSN, string user, string password [, int cursor_option])">Establish a persistent connection to a datasource</phpsyntax><phpsyntax function="odbc_prepare" usage="resource odbc_prepare(resource connection_id, string query)">Prepares a statement for execution</phpsyntax><phpsyntax function="odbc_primarykeys" usage="resource odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)">Returns a result identifier listing the column names that comprise the primary key for a table</phpsyntax><phpsyntax function="odbc_procedurecolumns" usage="resource odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])">Returns a result identifier containing the list of input and output parameters, as well as the columns that make up the result set for the specified procedures</phpsyntax><phpsyntax function="odbc_procedures" usage="resource odbc_procedures(resource connection_id [, string qualifier, string owner, string name])">Returns a result identifier containg the list of procedure names in a datasource</phpsyntax><phpsyntax function="odbc_result" usage="mixed odbc_result(resource result_id, mixed field)">Get result data</phpsyntax><phpsyntax function="odbc_result_all" usage="int odbc_result_all(resource result_id [, string format])">Print result as HTML table</phpsyntax><phpsyntax function="odbc_rollback" usage="bool odbc_rollback(resource connection_id)">Rollback a transaction</phpsyntax><phpsyntax function="odbc_setoption" usage="bool odbc_setoption(resource conn_id|result_id, int which, int option, int value)">Sets connection or statement options</phpsyntax><phpsyntax function="odbc_specialcolumns" usage="resource odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)">Returns a result identifier containing either the optimal set of columns that uniquely identifies a row in the table or columns that are automatically updated when any value in the row is updated by a transaction</phpsyntax><phpsyntax function="odbc_statistics" usage="resource odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)">Returns a result identifier that contains statistics about a single table and the indexes associated with the table</phpsyntax><phpsyntax function="odbc_tableprivileges" usage="resource odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)">Returns a result identifier containing a list of tables and the privileges associated with each table</phpsyntax><phpsyntax function="odbc_tables" usage="resource odbc_tables(resource connection_id [, string qualifier, string owner, string name, string table_types])">Call the SQLTables function</phpsyntax><phpsyntax function="solid_fetch_prev" usage="bool solid_fetch_prev(resource result_id)"/><phpsyntax function="openssl_csr_export" usage="bool openssl_csr_export(resource csr, string &amp;out [, bool notext=true])">Exports a CSR to file or a var</phpsyntax><phpsyntax function="openssl_csr_export_to_file" usage="bool openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])">Exports a CSR to file</phpsyntax><phpsyntax function="openssl_csr_new" usage="bool openssl_csr_new(array dn, resource &amp;privkey [, array configargs, array extraattribs])">Generates a privkey and CSR</phpsyntax><phpsyntax function="openssl_csr_sign" usage="resource openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])">Signs a cert with another CERT</phpsyntax><phpsyntax function="openssl_error_string" usage="mixed openssl_error_string(void)">Returns a description of the last error, and alters the index of the error messages. Returns false when the are no more messages</phpsyntax><phpsyntax function="openssl_open" usage="bool openssl_open(string data, &amp;string opendata, string ekey, mixed privkey)">Opens data</phpsyntax><phpsyntax function="openssl_pkey_export" usage="bool openssl_pkey_export(mixed key, &amp;mixed out [, string passphrase [, array config_args]])">Gets an exportable representation of a key into a string or file</phpsyntax><phpsyntax function="openssl_pkey_export_to_file" usage="bool openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)">Gets an exportable representation of a key into a file</phpsyntax><phpsyntax function="openssl_pkey_free" usage="void openssl_pkey_free(int key)">Frees a key</phpsyntax><phpsyntax function="openssl_pkey_get_private" usage="int openssl_pkey_get_private(string key [, string passphrase])">Gets private keys</phpsyntax><phpsyntax function="openssl_pkey_get_public" usage="int openssl_pkey_get_public(mixed cert)">Gets public key from X.509 certificate</phpsyntax><phpsyntax function="openssl_pkey_new" usage="resource openssl_pkey_new([array configargs])">Generates a new private key</phpsyntax><phpsyntax function="openssl_private_decrypt" usage="bool openssl_private_decrypt(string data, string decrypted, mixed key [, int padding])">Decrypts data with private key</phpsyntax><phpsyntax function="openssl_private_encrypt" usage="bool openssl_private_encrypt(string data, string crypted, mixed key [, int padding])">Encrypts data with private key</phpsyntax><phpsyntax function="openssl_public_decrypt" usage="bool openssl_public_decrypt(string data, string crypted, resource key [, int padding])">Decrypts data with public key</phpsyntax><phpsyntax function="openssl_public_encrypt" usage="bool openssl_public_encrypt(string data, string crypted, mixed key [, int padding])">Encrypts data with public key</phpsyntax><phpsyntax function="openssl_seal" usage="int openssl_seal(string data, &amp;string sealdata, &amp;array ekeys, array pubkeys)">Seals data</phpsyntax><phpsyntax function="openssl_sign" usage="bool openssl_sign(string data, &amp;string signature, mixed key)">Signs data</phpsyntax><phpsyntax function="openssl_verify" usage="int openssl_verify(string data, string signature, mixed key)">Verifys data</phpsyntax><phpsyntax function="ora_bind" usage="bool ora_bind(resource cursor, string php_variable_name, string sql_parameter_name, int length [, int type])">Bind a PHP variable to an Oracle parameter</phpsyntax><phpsyntax function="ora_close" usage="bool ora_close(resource cursor)">Close an Oracle cursor</phpsyntax><phpsyntax function="ora_columnname" usage="string ora_columnname(resource cursor, int column)">Get the name of an Oracle result column</phpsyntax><phpsyntax function="ora_columnsize" usage="int ora_columnsize(int cursor, int column)">Return the size of the column</phpsyntax><phpsyntax function="ora_columntype" usage="string ora_columntype(resource cursor, int column)">Get the type of an Oracle result column</phpsyntax><phpsyntax function="ora_commit" usage="bool ora_commit(resource connection)">Commit an Oracle transaction</phpsyntax><phpsyntax function="ora_commitoff" usage="bool ora_commitoff(resource connection)">Disable automatic commit</phpsyntax><phpsyntax function="ora_commiton" usage="bool ora_commiton(resource connection)">Enable automatic commit</phpsyntax><phpsyntax function="ora_do" usage="resource ora_do(resource connection, resource cursor)">Parse and execute a statement and fetch first result row</phpsyntax><phpsyntax function="ora_error" usage="string ora_error(resource cursor_or_connection)">Get an Oracle error message</phpsyntax><phpsyntax function="ora_errorcode" usage="int ora_errorcode(resource cursor_or_connection)">Get an Oracle error code</phpsyntax><phpsyntax function="ora_exec" usage="bool ora_exec(resource cursor)">Execute a parsed statement</phpsyntax><phpsyntax function="ora_fetch" usage="bool ora_fetch(resource cursor)">Fetch a row of result data from a cursor</phpsyntax><phpsyntax function="ora_fetch_into" usage="int ora_fetch_into(resource cursor, array result [, int flags])">Fetch a row into the specified result array</phpsyntax><phpsyntax function="ora_getcolumn" usage="mixed ora_getcolumn(resource cursor, int column)">Get data from a fetched row</phpsyntax><phpsyntax function="ora_logoff" usage="bool ora_logoff(resource connection)">Close an Oracle connection</phpsyntax><phpsyntax function="ora_logon" usage="resource ora_logon(string user, string password)">Open an Oracle connection</phpsyntax><phpsyntax function="ora_numcols" usage="int ora_numcols(resource cursor)">Returns the numbers of columns in a result</phpsyntax><phpsyntax function="ora_numrows" usage="int ora_numrows(resource cursor)">Returns the number of rows in a result</phpsyntax><phpsyntax function="ora_open" usage="resource ora_open(resource connection)">Open an Oracle cursor</phpsyntax><phpsyntax function="ora_parse" usage="bool ora_parse(resource cursor, string sql_statement [, int defer])">Parse an Oracle SQL statement</phpsyntax><phpsyntax function="ora_plogon" usage="resource ora_plogon(string user, string password)">Open a persistent Oracle connection</phpsyntax><phpsyntax function="ora_rollback" usage="bool ora_rollback(resource connection)">Roll back an Oracle transaction</phpsyntax><phpsyntax function="ovrimos_autocommit" usage="int ovrimos_autocommit(int connection_id, int OnOff)">Toggle autocommit mode     There can be problems with pconnections!</phpsyntax><phpsyntax function="ovrimos_close" usage="void ovrimos_close(int connection)">Close a connection</phpsyntax><phpsyntax function="ovrimos_commit" usage="bool ovrimos_commit(int connection_id)">Commit an ovrimos transaction</phpsyntax><phpsyntax function="ovrimos_connect" usage="int ovrimos_connect(string host, string db, string user, string password)">Connect to an Ovrimos database</phpsyntax><phpsyntax function="ovrimos_cursor" usage="string ovrimos_cursor(int result_id)">Get cursor name</phpsyntax><phpsyntax function="ovrimos_exec" usage="int ovrimos_exec(int connection_id, string query)">Prepare and execute an SQL statement</phpsyntax><phpsyntax function="ovrimos_execute" usage="bool ovrimos_execute(int result_id [, array parameters_array])">Execute a prepared statement</phpsyntax><phpsyntax function="ovrimos_fetch_into" usage="bool ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]])">Fetch one result row into an array     how: 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'</phpsyntax><phpsyntax function="ovrimos_fetch_row" usage="bool ovrimos_fetch_row(int result_id [, int how [, int row_number]])">how: 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'     Fetch a row</phpsyntax><phpsyntax function="ovrimos_field_len" usage="int ovrimos_field_len(int result_id, int field_number)">Get the length of a column</phpsyntax><phpsyntax function="ovrimos_field_name" usage="string ovrimos_field_name(int result_id, int field_number)">Get a column name</phpsyntax><phpsyntax function="ovrimos_field_num" usage="int ovrimos_field_num(int result_id, string field_name)">Return column number</phpsyntax><phpsyntax function="ovrimos_field_type" usage="int ovrimos_field_type(int result_id, int field_number)">Get the datatype of a column</phpsyntax><phpsyntax function="ovrimos_free_result" usage="bool ovrimos_free_result(int result_id)">Free resources associated with a result</phpsyntax><phpsyntax function="ovrimos_longreadlen" usage="bool ovrimos_longreadlen(int result_id, int length)">Handle LONG columns</phpsyntax><phpsyntax function="ovrimos_num_fields" usage="int ovrimos_num_fields(int result_id)">Get number of columns in a result</phpsyntax><phpsyntax function="ovrimos_num_rows" usage="int ovrimos_num_rows(int result_id)">Get number of rows in a result</phpsyntax><phpsyntax function="ovrimos_prepare" usage="int ovrimos_prepare(int connection_id, string query)">Prepares a statement for execution</phpsyntax><phpsyntax function="ovrimos_result" usage="string ovrimos_result(int result_id, mixed field)">Get result data</phpsyntax><phpsyntax function="ovrimos_result_all" usage="int ovrimos_result_all(int result_id [, string format])">Print result as HTML table</phpsyntax><phpsyntax function="ovrimos_rollback" usage="bool ovrimos_rollback(int connection_id)">Rollback a transaction</phpsyntax><phpsyntax function="ovrimos_setoption" usage="int ovrimos_setoption(int conn_id|result_id, int which, int option, int value)">Sets connection or statement options</phpsyntax><phpsyntax function="pcntl_alarm" usage="int pcntl_alarm(int seconds)">Set an alarm clock for delivery of a signal</phpsyntax><phpsyntax function="pcntl_exec" usage="bool pcntl_exec(string path [, array args [, array envs]])">Executes specified program in current process space as defined by exec(2)</phpsyntax><phpsyntax function="pcntl_fork" usage="int pcntl_fork(void)">Forks the currently running process following the same behavior as the UNIX fork() system call</phpsyntax><phpsyntax function="pcntl_getpriority" usage="int pcntl_getpriority([int pid [, int process_identifier]])">Get the priority of any process</phpsyntax><phpsyntax function="pcntl_setpriority" usage="bool pcntl_setpriority(int priority [, int pid [, int process_identifier]])">Change the priority of any process</phpsyntax><phpsyntax function="pcntl_signal" usage="bool pcntl_signal(int signo, callback handle [, bool restart_syscalls])">Assigns a system signal handler to a PHP function</phpsyntax><phpsyntax function="pcntl_wait" usage="int pcntl_wait(int &amp;status)">Waits on or returns the status of a forked child as defined by the waitpid() system call</phpsyntax><phpsyntax function="pcntl_waitpid" usage="int pcntl_waitpid(int pid, int &amp;status, int options)">Waits on or returns the status of a forked child as defined by the waitpid() system call</phpsyntax><phpsyntax function="pcntl_wexitstatus" usage="int pcntl_wexitstatus(int status)">Returns the status code of a child's exit</phpsyntax><phpsyntax function="pcntl_wifexited" usage="bool pcntl_wifexited(int status)">Returns true if the child status code represents a successful exit</phpsyntax><phpsyntax function="pcntl_wifsignaled" usage="bool pcntl_wifsignaled(int status)">Returns true if the child status code represents a process that was terminated due to a signal</phpsyntax><phpsyntax function="pcntl_wifstopped" usage="bool pcntl_wifstopped(int status)">Returns true if the child status code represents a stopped process (WUNTRACED must have been used with waitpid)</phpsyntax><phpsyntax function="pcntl_wstopsig" usage="int pcntl_wstopsig(int status)">Returns the number of the signal that caused the process to stop who's status code is passed</phpsyntax><phpsyntax function="pcntl_wtermsig" usage="int pcntl_wtermsig(int status)">Returns the number of the signal that terminated the process who's status code is passed</phpsyntax><phpsyntax function="preg_grep" usage="array preg_grep(string regex, array input)">Searches array and returns entries which match regex</phpsyntax><phpsyntax function="preg_match" usage="int preg_match(string pattern, string subject [, array subpatterns [, int flags [, int offset]]])">Perform a Perl-style regular expression match</phpsyntax><phpsyntax function="preg_match_all" usage="int preg_match_all(string pattern, string subject, array subpatterns [, int flags [, int offset]])">Perform a Perl-style global regular expression match</phpsyntax><phpsyntax function="preg_quote" usage="string preg_quote(string str, string delim_char)">Quote regular expression characters plus an optional character</phpsyntax><phpsyntax function="preg_replace" usage="string preg_replace(mixed regex, mixed replace, mixed subject [, int limit])">Perform Perl-style regular expression replacement.</phpsyntax><phpsyntax function="preg_replace_callback" usage="string preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit])">Perform Perl-style regular expression replacement using replacement callback.</phpsyntax><phpsyntax function="preg_split" usage="array preg_split(string pattern, string subject [, int limit [, int flags]])">Split string into an array using a perl-style regular expression as a delimiter</phpsyntax><phpsyntax function="pdf_add_annotation" usage="bool pdf_add_annotation(resource pdfdoc, float xll, float yll, float xur, float xur, string title, string text)">Sets annotation (depreciated use pdf_add_note instead)</phpsyntax><phpsyntax function="pdf_add_bookmark" usage="int pdf_add_bookmark(resource pdfdoc, string text [, int parent [, int open]])">Adds bookmark for current page</phpsyntax><phpsyntax function="pdf_add_launchlink" usage="bool pdf_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename)">Adds link to web resource</phpsyntax><phpsyntax function="pdf_add_locallink" usage="bool pdf_add_locallink(resource pdfdoc, float llx, float lly, float urx, float ury, int page, string dest)">Adds link to local resource</phpsyntax><phpsyntax function="pdf_add_note" usage="bool pdf_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)">Sets annotation</phpsyntax><phpsyntax function="pdf_add_pdflink" usage="bool pdf_add_pdflink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, int page, string dest)">Adds link to PDF document</phpsyntax><phpsyntax function="pdf_add_weblink" usage="bool pdf_add_weblink(resource pdfdoc, float llx, float lly, float urx, float ury, string url)">Adds link to web resource</phpsyntax><phpsyntax function="pdf_arc" usage="bool pdf_arc(resource pdfdoc, float x, float y, float radius, float start, float end)">Draws an arc</phpsyntax><phpsyntax function="pdf_attach_file" usage="bool pdf_attach_file(resource pdf, float lly, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)">Adds a file attachment annotation at the rectangle specified by his lower left and upper right corners</phpsyntax><phpsyntax function="pdf_begin_page" usage="bool pdf_begin_page(resource pdfdoc, float width, float height)">Starts page</phpsyntax><phpsyntax function="pdf_circle" usage="bool pdf_circle(resource pdfdoc, float x, float y, float radius)">Draws a circle</phpsyntax><phpsyntax function="pdf_clip" usage="bool pdf_clip(resource pdfdoc)">Clips to current path</phpsyntax><phpsyntax function="pdf_close" usage="bool pdf_close(resource pdfdoc)">Closes the pdf document</phpsyntax><phpsyntax function="pdf_close_image" usage="void pdf_close_image(resource pdf, int pdfimage)">Closes the PDF image</phpsyntax><phpsyntax function="pdf_closepath" usage="bool pdf_closepath(resource pdfdoc)">Close path</phpsyntax><phpsyntax function="pdf_closepath_fill_stroke" usage="bool pdf_closepath_fill_stroke(resource pdfdoc)">Close, fill and stroke current path</phpsyntax><phpsyntax function="pdf_closepath_stroke" usage="bool pdf_closepath_stroke(resource pdfdoc)">Close path and draw line along path</phpsyntax><phpsyntax function="pdf_concat" usage="bool pdf_concat(resource pdf, float a, float b, float c, float d, float e, float f)">Concatenates a matrix to the current transformation matrix for text and graphics</phpsyntax><phpsyntax function="pdf_continue_text" usage="bool pdf_continue_text(resource pdfdoc, string text)">Output text in next line</phpsyntax><phpsyntax function="pdf_curveto" usage="bool pdf_curveto(resource pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3)">Draws a curve</phpsyntax><phpsyntax function="pdf_delete" usage="bool pdf_delete(resource pdfdoc)">Deletes the PDF object</phpsyntax><phpsyntax function="pdf_end_page" usage="bool pdf_end_page(resource pdfdoc)">Ends page</phpsyntax><phpsyntax function="pdf_endpath" usage="bool pdf_endpath(resource pdfdoc)">Ends current path</phpsyntax><phpsyntax function="pdf_fill" usage="bool pdf_fill(resource pdfdoc)">Fill current path</phpsyntax><phpsyntax function="pdf_fill_stroke" usage="bool pdf_fill_stroke(resource pdfdoc)">Fill and stroke current path</phpsyntax><phpsyntax function="pdf_findfont" usage="int pdf_findfont(resource pdfdoc, string fontname, string encoding [, int embed])">Prepares the font fontname for later use with pdf_setfont()</phpsyntax><phpsyntax function="pdf_get_buffer" usage="string pdf_get_buffer(resource pdfdoc)">Fetches the full buffer containig the generated PDF data</phpsyntax><phpsyntax function="pdf_get_font" usage="int pdf_get_font(resource pdfdoc)">Gets the current font</phpsyntax><phpsyntax function="pdf_get_fontname" usage="string pdf_get_fontname(resource pdfdoc)">Gets the current font name</phpsyntax><phpsyntax function="pdf_get_fontsize" usage="float pdf_get_fontsize(resource pdfdoc)">Gets the current font size</phpsyntax><phpsyntax function="pdf_get_image_height" usage="int pdf_get_image_height(resource pdf, int pdfimage)">Returns the height of an image</phpsyntax><phpsyntax function="pdf_get_image_width" usage="int pdf_get_image_width(resource pdf, int pdfimage)">Returns the width of an image</phpsyntax><phpsyntax function="pdf_get_majorversion" usage="int pdf_get_majorversion()">Returns the major version number of the PDFlib</phpsyntax><phpsyntax function="pdf_get_minorversion" usage="int pdf_get_minorversion()">Returns the minor version number of the PDFlib</phpsyntax><phpsyntax function="pdf_get_parameter" usage="string pdf_get_parameter(resource pdfdoc, string key, mixed modifier)">Gets arbitrary parameters</phpsyntax><phpsyntax function="pdf_get_value" usage="float pdf_get_value(resource pdfdoc, string key, float modifier)">Gets arbitrary value</phpsyntax><phpsyntax function="pdf_lineto" usage="bool pdf_lineto(resource pdfdoc, float x, float y)">Draws a line</phpsyntax><phpsyntax function="pdf_moveto" usage="bool pdf_moveto(resource pdfdoc, float x, float y)">Sets current point</phpsyntax><phpsyntax function="pdf_new" usage="resource pdf_new()">Creates a new PDF object</phpsyntax><phpsyntax function="pdf_open" usage="resource pdf_open([resource filedesc])">Opens a new pdf document. If filedesc is NULL, document is created in memory. This is the old interface, only for compatibility use pdf_new      pdf_open_file instead</phpsyntax><phpsyntax function="pdf_open_ccitt" usage="int pdf_open_ccitt(resource pdf, string filename, int width, int height, int bitreverse, int k, int blackls1)">Opens an image file with raw CCITT G3 or G4 compresed bitmap data</phpsyntax><phpsyntax function="pdf_open_file" usage="bool pdf_open_file(resource pdfdoc [, string filename])">Opens a new PDF document. If filename is NULL, document is created in memory. This is not yet fully supported</phpsyntax><phpsyntax function="pdf_open_gif" usage="int pdf_open_gif(resource pdf, string giffile)">Opens a GIF file and returns an image for placement in a pdf object</phpsyntax><phpsyntax function="pdf_open_image" usage="int pdf_open_image(resource pdf, string type, string source, string data, long length, int width, int height, int components, int bpc, string params)">Opens an image of the given type and returns an image for placement in a PDF document</phpsyntax><phpsyntax function="pdf_open_image_file" usage="int pdf_open_image_file(resource pdf, string type, string file [, string stringparam, int intparam])">Opens an image file of the given type and returns an image for placement in a PDF document</phpsyntax><phpsyntax function="pdf_open_jpeg" usage="int pdf_open_jpeg(resource pdf, string jpegfile)">Opens a JPEG file and returns an image for placement in a PDF document</phpsyntax><phpsyntax function="pdf_open_memory_image" usage="int pdf_open_memory_image(resource pdf, resource image)">Takes an GD image and returns an image for placement in a PDF document</phpsyntax><phpsyntax function="pdf_open_png" usage="int pdf_open_png(resource pdf, string pngfile)">Opens a PNG file and returns an image for placement in a PDF document</phpsyntax><phpsyntax function="pdf_open_tiff" usage="int pdf_open_tiff(resource pdf, string tifffile)">Opens a TIFF file and returns an image for placement in a PDF document</phpsyntax><phpsyntax function="pdf_place_image" usage="bool pdf_place_image(resource pdf, int pdfimage, float x, float y, float scale)">Places image in the PDF document</phpsyntax><phpsyntax function="pdf_place_pdi_page" usage="bool pdf_place_pdi_page(resource pdf, int page, float x, float y, float sx, float sy)">* Place a PDF page with the lower left corner at (x, y), and scale it.</phpsyntax><phpsyntax function="pdf_rect" usage="bool pdf_rect(resource pdfdoc, float x, float y, float width, float height)">Draws a rectangle</phpsyntax><phpsyntax function="pdf_restore" usage="bool pdf_restore(resource pdfdoc)">Restores formerly saved enviroment</phpsyntax><phpsyntax function="pdf_rotate" usage="bool pdf_rotate(resource pdfdoc, float angle)">Sets rotation</phpsyntax><phpsyntax function="pdf_save" usage="bool pdf_save(resource pdfdoc)">Saves current enviroment</phpsyntax><phpsyntax function="pdf_scale" usage="bool pdf_scale(resource pdfdoc, float x_scale, float y_scale)">Sets scaling</phpsyntax><phpsyntax function="pdf_set_border_color" usage="bool pdf_set_border_color(resource pdfdoc, float red, float green, float blue)">Sets color of box surounded all kinds of annotations and links</phpsyntax><phpsyntax function="pdf_set_border_dash" usage="bool pdf_set_border_dash(resource pdfdoc, float black, float white)">Sets the border dash style of all kinds of annotations and links</phpsyntax><phpsyntax function="pdf_set_border_style" usage="bool pdf_set_border_style(resource pdfdoc, string style, float width)">Sets style of box surounding all kinds of annotations and link</phpsyntax><phpsyntax function="pdf_set_char_spacing" usage="bool pdf_set_char_spacing(resource pdfdoc, float space)">Sets character spacing</phpsyntax><phpsyntax function="pdf_set_duration" usage="bool pdf_set_duration(resource pdfdoc, float duration)">Sets duration between pages</phpsyntax><phpsyntax function="pdf_set_font" usage="bool pdf_set_font(resource pdfdoc, string font, float size, string encoding [, int embed])">Select the current font face, size and encoding</phpsyntax><phpsyntax function="pdf_set_horiz_scaling" usage="bool pdf_set_horiz_scaling(resource pdfdoc, float scale)">Sets horizontal scaling of text</phpsyntax><phpsyntax function="pdf_set_info" usage="bool pdf_set_info(resource pdfdoc, string fieldname, string value)">Fills an info field of the document</phpsyntax><phpsyntax function="pdf_set_info_author" usage="bool pdf_set_info_author(resource pdfdoc, string author)">Fills the author field of the document</phpsyntax><phpsyntax function="pdf_set_info_creator" usage="bool pdf_set_info_creator(resource pdfdoc, string creator)">Fills the creator field of the document</phpsyntax><phpsyntax function="pdf_set_info_keywords" usage="bool pdf_set_info_keywords(resource pdfdoc, string keywords)">Fills the keywords field of the document</phpsyntax><phpsyntax function="pdf_set_info_subject" usage="bool pdf_set_info_subject(resource pdfdoc, string subject)">Fills the subject field of the document</phpsyntax><phpsyntax function="pdf_set_info_title" usage="bool pdf_set_info_title(resource pdfdoc, string title)">Fills the title field of the document</phpsyntax><phpsyntax function="pdf_set_leading" usage="bool pdf_set_leading(resource pdfdoc, float distance)">Sets distance between text lines</phpsyntax><phpsyntax function="pdf_set_parameter" usage="bool pdf_set_parameter(resource pdfdoc, string key, string value)">Sets arbitrary parameters</phpsyntax><phpsyntax function="pdf_set_text_pos" usage="bool pdf_set_text_pos(resource pdfdoc, float x, float y)">Sets the position of text for the next pdf_show call</phpsyntax><phpsyntax function="pdf_set_text_rendering" usage="bool pdf_set_text_rendering(resource pdfdoc, int mode)">Determines how text is rendered</phpsyntax><phpsyntax function="pdf_set_text_rise" usage="bool pdf_set_text_rise(resource pdfdoc, float value)">Sets the text rise</phpsyntax><phpsyntax function="pdf_set_transition" usage="bool pdf_set_transition(resource pdfdoc, int transition)">Sets transition between pages</phpsyntax><phpsyntax function="pdf_set_value" usage="bool pdf_set_value(resource pdfdoc, string key, float value)">Sets arbitrary value</phpsyntax><phpsyntax function="pdf_set_word_spacing" usage="bool pdf_set_word_spacing(resource pdfdoc, float space)">Sets spacing between words</phpsyntax><phpsyntax function="pdf_setdash" usage="bool pdf_setdash(resource pdfdoc, float black, float white)">Sets dash pattern</phpsyntax><phpsyntax function="pdf_setflat" usage="bool pdf_setflat(resource pdfdoc, float value)">Sets flatness</phpsyntax><phpsyntax function="pdf_setfont" usage="bool pdf_setfont(resource pdfdoc, int font, float fontsize)">Sets the current font in the fiven fontsize</phpsyntax><phpsyntax function="pdf_setgray" usage="bool pdf_setgray(resource pdfdoc, float value)">Sets drawing and filling color to gray value</phpsyntax><phpsyntax function="pdf_setgray_fill" usage="bool pdf_setgray_fill(resource pdfdoc, float value)">Sets filling color to gray value</phpsyntax><phpsyntax function="pdf_setgray_stroke" usage="bool pdf_setgray_stroke(resource pdfdoc, float value)">Sets drawing color to gray value</phpsyntax><phpsyntax function="pdf_setlinecap" usage="bool pdf_setlinecap(resource pdfdoc, int value)">Sets linecap parameter</phpsyntax><phpsyntax function="pdf_setlinejoin" usage="bool pdf_setlinejoin(resource pdfdoc, int value)">Sets linejoin parameter</phpsyntax><phpsyntax function="pdf_setlinewidth" usage="bool pdf_setlinewidth(resource pdfdoc, float width)">Sets line width</phpsyntax><phpsyntax function="pdf_setmatrix" usage="bool pdf_setmatrix(resource pdf, float a, float b, float c, float d, float e, float f)">Explicitly set the current transformation matrix.</phpsyntax><phpsyntax function="pdf_setmiterlimit" usage="bool pdf_setmiterlimit(resource pdfdoc, float value)">Sets miter limit</phpsyntax><phpsyntax function="pdf_setpolydash" usage="bool pdf_setpolydash(resource pdfdoc, float darray)">Sets more complicated dash pattern</phpsyntax><phpsyntax function="pdf_setrgbcolor" usage="bool pdf_setrgbcolor(resource pdfdoc, float red, float green, float blue)">Sets drawing and filling color to RGB color value</phpsyntax><phpsyntax function="pdf_setrgbcolor_fill" usage="bool pdf_setrgbcolor_fill(resource pdfdoc, float red, float green, float blue)">Sets filling color to RGB color value</phpsyntax><phpsyntax function="pdf_setrgbcolor_stroke" usage="bool pdf_setrgbcolor_stroke(resource pdfdoc, float red, float green, float blue)">Sets drawing color to RGB color value</phpsyntax><phpsyntax function="pdf_show" usage="bool pdf_show(resource pdfdoc, string text)">Output text at current position</phpsyntax><phpsyntax function="pdf_show_boxed" usage="int pdf_show_boxed(resource pdfdoc, string text, float x_koor, float y_koor, float width, float height, string mode [, string feature])">Output text formated in a boxed</phpsyntax><phpsyntax function="pdf_show_xy" usage="bool pdf_show_xy(resource pdfdoc, string text, float x_koor, float y_koor)">Output text at position</phpsyntax><phpsyntax function="pdf_skew" usage="bool pdf_skew(resource pdfdoc, float xangle, float yangle)">Skew the coordinate system</phpsyntax><phpsyntax function="pdf_stringwidth" usage="float pdf_stringwidth(resource pdfdoc, string text [, int font, float size])">Returns width of text in current font</phpsyntax><phpsyntax function="pdf_stroke" usage="bool pdf_stroke(resource pdfdoc)">Draw line along path path</phpsyntax><phpsyntax function="pdf_translate" usage="bool pdf_translate(resource pdfdoc, float x, float y)">Sets origin of coordinate system</phpsyntax><phpsyntax function="pfpro_cleanup" usage="bool pfpro_cleanup()">Shuts down the Payflow Pro library</phpsyntax><phpsyntax function="pfpro_init" usage="bool pfpro_init()">Initializes the Payflow Pro library</phpsyntax><phpsyntax function="pfpro_process" usage="array pfpro_process(array parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])">Payflow Pro transaction processing using arrays</phpsyntax><phpsyntax function="pfpro_process_raw" usage="string pfpro_process_raw(string parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])">Raw Payflow Pro transaction processing</phpsyntax><phpsyntax function="pfpro_version" usage="string pfpro_version()">Returns the version of the Payflow Pro library</phpsyntax><phpsyntax function="pg_affected_rows" usage="int pg_affected_rows(resource result)">Returns the number of affected tuples</phpsyntax><phpsyntax function="pg_cancel_query" usage="bool pg_cancel_query(resource connection)">Cancel request</phpsyntax><phpsyntax function="pg_client_encoding" usage="string pg_client_encoding([resource connection])">Get the current client encoding</phpsyntax><phpsyntax function="pg_close" usage="bool pg_close([resource connection])">Close a PostgreSQL connection</phpsyntax><phpsyntax function="pg_connect" usage="resource pg_connect(string connection_string[, int connect_type] | [string host, string port [, string options [, string tty,]]] string database)">Open a PostgreSQL connection</phpsyntax><phpsyntax function="pg_connection_busy" usage="bool pg_connection_busy(resource connection)">Get connection is busy or not</phpsyntax><phpsyntax function="pg_connection_reset" usage="bool pg_connection_reset(resource connection)">Reset connection (reconnect)</phpsyntax><phpsyntax function="pg_connection_status" usage="int pg_connection_status(resource connnection)">Get connection status</phpsyntax><phpsyntax function="pg_convert" usage="array pg_convert(resource db, string table, array values[, int options])">Check and convert values for PostgreSQL SQL statement</phpsyntax><phpsyntax function="pg_copy_from" usage="bool pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])">Copy table from array</phpsyntax><phpsyntax function="pg_copy_to" usage="array pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])">Copy table to array</phpsyntax><phpsyntax function="pg_dbname" usage="string pg_dbname([resource connection])">Get the database name</phpsyntax><phpsyntax function="pg_delete" usage="mixed pg_delete(resource db, string table, array ids[, int options])">Delete records has ids (id=&gt;value)</phpsyntax><phpsyntax function="pg_end_copy" usage="bool pg_end_copy([resource connection])">Sync with backend. Completes the Copy command</phpsyntax><phpsyntax function="pg_escape_bytea" usage="string pg_escape_bytea(string data)">Escape binary for bytea type</phpsyntax><phpsyntax function="pg_escape_string" usage="string pg_escape_string(string data)">Escape string for text/char type</phpsyntax><phpsyntax function="pg_fetch_all" usage="array pg_fetch_all(resource result)">Fetch all rows into array</phpsyntax><phpsyntax function="pg_fetch_array" usage="array pg_fetch_array(resource result [, int row [, int result_type]])">Fetch a row as an array</phpsyntax><phpsyntax function="pg_fetch_assoc" usage="array pg_fetch_assoc(resource result [, int row])">Fetch a row as an assoc array</phpsyntax><phpsyntax function="pg_fetch_object" usage="object pg_fetch_object(resource result [, int row [, string class_name [, NULL|array ctor_params]]])">Fetch a row as an object</phpsyntax><phpsyntax function="pg_fetch_result" usage="mixed pg_fetch_result(resource result, [int row_number,] mixed field_name)">Returns values from a result identifier</phpsyntax><phpsyntax function="pg_fetch_row" usage="array pg_fetch_row(resource result [, int row [, int result_type]])">Get a row as an enumerated array</phpsyntax><phpsyntax function="pg_field_is_null" usage="int pg_field_is_null(resource result, [int row,] mixed field_name_or_number)">Test if a field is NULL</phpsyntax><phpsyntax function="pg_field_name" usage="string pg_field_name(resource result, int field_number)">Returns the name of the field</phpsyntax><phpsyntax function="pg_field_num" usage="int pg_field_num(resource result, string field_name)">Returns the field number of the named field</phpsyntax><phpsyntax function="pg_field_prtlen" usage="int pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)">Returns the printed length</phpsyntax><phpsyntax function="pg_field_size" usage="int pg_field_size(resource result, int field_number)">Returns the internal size of the field</phpsyntax><phpsyntax function="pg_field_type" usage="string pg_field_type(resource result, int field_number)">Returns the type name for the given field</phpsyntax><phpsyntax function="pg_free_result" usage="bool pg_free_result(resource result)">Free result memory</phpsyntax><phpsyntax function="pg_get_notify" usage="array pg_get_notify([resource connection[, result_type]])">Get asynchronous notification</phpsyntax><phpsyntax function="pg_get_pid" usage="int pg_get_pid([resource connection)">Get backend(server) pid</phpsyntax><phpsyntax function="pg_get_result" usage="resource pg_get_result(resource connection)">Get asynchronous query result</phpsyntax><phpsyntax function="pg_host" usage="string pg_host([resource connection])">Returns the host name associated with the connection</phpsyntax><phpsyntax function="pg_insert" usage="mixed pg_insert(resource db, string table, array values[, int options])">Insert values (filed=&gt;value) to table</phpsyntax><phpsyntax function="pg_last_error" usage="string pg_last_error([resource connection])">Get the error message string</phpsyntax><phpsyntax function="pg_last_notice" usage="string pg_last_notice(resource connection)">Returns the last notice set by the backend</phpsyntax><phpsyntax function="pg_last_oid" usage="string pg_last_oid(resource result)">Returns the last object identifier</phpsyntax><phpsyntax function="pg_lo_close" usage="bool pg_lo_close(resource large_object)">Close a large object</phpsyntax><phpsyntax function="pg_lo_create" usage="int pg_lo_create([resource connection])">Create a large object</phpsyntax><phpsyntax function="pg_lo_export" usage="bool pg_lo_export([resource connection, ] int objoid, string filename)">Export large object direct to filesystem</phpsyntax><phpsyntax function="pg_lo_import" usage="int pg_lo_import([resource connection, ] string filename)">Import large object direct from filesystem</phpsyntax><phpsyntax function="pg_lo_open" usage="resource pg_lo_open([resource connection,] int large_object_oid, string mode)">Open a large object and return fd</phpsyntax><phpsyntax function="pg_lo_read" usage="string pg_lo_read(resource large_object [, int len])">Read a large object</phpsyntax><phpsyntax function="pg_lo_read_all" usage="int pg_lo_read_all(resource large_object)">Read a large object and send straight to browser</phpsyntax><phpsyntax function="pg_lo_seek" usage="bool pg_lo_seek(resource large_object, int offset [, int whence])">Seeks position of large object</phpsyntax><phpsyntax function="pg_lo_tell" usage="int pg_lo_tell(resource large_object)">Returns current position of large object</phpsyntax><phpsyntax function="pg_lo_unlink" usage="bool pg_lo_unlink([resource connection,] string large_object_oid)">Delete a large object</phpsyntax><phpsyntax function="pg_lo_write" usage="int pg_lo_write(resource large_object, string buf [, int len])">Write a large object</phpsyntax><phpsyntax function="pg_meta_data" usage="array pg_meta_data(resource db, string table)">Get meta_data</phpsyntax><phpsyntax function="pg_num_fields" usage="int pg_num_fields(resource result)">Return the number of fields in the result</phpsyntax><phpsyntax function="pg_num_rows" usage="int pg_num_rows(resource result)">Return the number of rows in the result</phpsyntax><phpsyntax function="pg_options" usage="string pg_options([resource connection])">Get the options associated with the connection</phpsyntax><phpsyntax function="pg_pconnect" usage="resource pg_pconnect(string connection_string | [string host, string port [, string options [, string tty,]]] string database)">Open a persistent PostgreSQL connection</phpsyntax><phpsyntax function="pg_ping" usage="bool pg_ping([resource connection])">Ping database. If connection is bad, try to reconnect.</phpsyntax><phpsyntax function="pg_port" usage="int pg_port([resource connection])">Return the port number associated with the connection</phpsyntax><phpsyntax function="pg_put_line" usage="bool pg_put_line([resource connection,] string query)">Send null-terminated string to backend server</phpsyntax><phpsyntax function="pg_query" usage="resource pg_query([resource connection,] string query)">Execute a query</phpsyntax><phpsyntax function="pg_result_error" usage="string pg_result_error(resource result)">Get error message associated with result</phpsyntax><phpsyntax function="pg_result_seek" usage="bool pg_result_seek(resource result, int offset)">Set internal row offset</phpsyntax><phpsyntax function="pg_result_status" usage="mixed pg_result_status(resource result[, long result_type])">Get status of query result</phpsyntax><phpsyntax function="pg_select" usage="mixed pg_select(resource db, string table, array ids[, int options])">Select records that has ids (id=&gt;value)</phpsyntax><phpsyntax function="pg_send_query" usage="bool pg_send_query(resource connection, string qeury)">Send asynchronous query</phpsyntax><phpsyntax function="pg_set_client_encoding" usage="int pg_set_client_encoding([resource connection,] string encoding)">Set client encoding</phpsyntax><phpsyntax function="pg_trace" usage="bool pg_trace(string filename [, string mode [, resource connection]])">Enable tracing a PostgreSQL connection</phpsyntax><phpsyntax function="pg_tty" usage="string pg_tty([resource connection])">Return the tty name associated with the connection</phpsyntax><phpsyntax function="pg_unescape_bytea" usage="string pg_unescape_bytea(string data)">Unescape binary for bytea type</phpsyntax><phpsyntax function="pg_untrace" usage="bool pg_untrace([resource connection])">Disable tracing of a PostgreSQL connection</phpsyntax><phpsyntax function="pg_update" usage="mixed pg_update(resource db, string table, array fields, array ids[, int options])">Update table using values (field=&gt;value) and ids (id=&gt;value)</phpsyntax><phpsyntax function="pg_version" usage="array pg_version([resource connection])">Returns an array with client, protocol and server version (when available)</phpsyntax><phpsyntax function="posix_ctermid" usage="string posix_ctermid(void)">Generate terminal path name (POSIX.1, 4.7.1)</phpsyntax><phpsyntax function="posix_get_last_error" usage="int posix_get_last_error(void)">Retrieve the error number set by the last posix function which failed.</phpsyntax><phpsyntax function="posix_getcwd" usage="string posix_getcwd(void)">Get working directory pathname (POSIX.1, 5.2.2)</phpsyntax><phpsyntax function="posix_getegid" usage="int posix_getegid(void)">Get the current effective group id (POSIX.1, 4.2.1)</phpsyntax><phpsyntax function="posix_geteuid" usage="int posix_geteuid(void)">Get the current effective user id (POSIX.1, 4.2.1)</phpsyntax><phpsyntax function="posix_getgid" usage="int posix_getgid(void)">Get the current group id (POSIX.1, 4.2.1)</phpsyntax><phpsyntax function="posix_getgrgid" usage="array posix_getgrgid(long gid)">Group database access (POSIX.1, 9.2.1)</phpsyntax><phpsyntax function="posix_getgrnam" usage="array posix_getgrnam(string groupname)">Group database access (POSIX.1, 9.2.1)</phpsyntax><phpsyntax function="posix_getgroups" usage="array posix_getgroups(void)">Get supplementary group id's (POSIX.1, 4.2.3)</phpsyntax><phpsyntax function="posix_getlogin" usage="string posix_getlogin(void)">Get user name (POSIX.1, 4.2.4)</phpsyntax><phpsyntax function="posix_getpgid" usage="int posix_getpgid(void)">Get the process group id of the specified process (This is not a POSIX function, but a SVR4ism, so we compile conditionally)</phpsyntax><phpsyntax function="posix_getpgrp" usage="int posix_getpgrp(void)">Get current process group id (POSIX.1, 4.3.1)</phpsyntax><phpsyntax function="posix_getpid" usage="int posix_getpid(void)">Get the current process id (POSIX.1, 4.1.1)</phpsyntax><phpsyntax function="posix_getppid" usage="int posix_getppid(void)">Get the parent process id (POSIX.1, 4.1.1)</phpsyntax><phpsyntax function="posix_getpwnam" usage="array posix_getpwnam(string groupname)">User database access (POSIX.1, 9.2.2)</phpsyntax><phpsyntax function="posix_getpwuid" usage="array posix_getpwuid(long uid)">User database access (POSIX.1, 9.2.2)</phpsyntax><phpsyntax function="posix_getrlimit" usage="array posix_getrlimit(void)">Get system resource consumption limits (This is not a POSIX function, but a BSDism and a SVR4ism. We compile conditionally)</phpsyntax><phpsyntax function="posix_getsid" usage="int posix_getsid(void)">Get process group id of session leader (This is not a POSIX function, but a SVR4ism, so be compile conditionally)</phpsyntax><phpsyntax function="posix_getuid" usage="int posix_getuid(void)">Get the current user id (POSIX.1, 4.2.1)</phpsyntax><phpsyntax function="posix_isatty" usage="bool posix_isatty(int fd)">Determine if filedesc is a tty (POSIX.1, 4.7.1)</phpsyntax><phpsyntax function="posix_kill" usage="bool posix_kill(int pid, int sig)">Send a signal to a process (POSIX.1, 3.3.2)</phpsyntax><phpsyntax function="posix_mkfifo" usage="bool posix_mkfifo(string pathname, int mode)">Make a FIFO special file (POSIX.1, 5.4.2)</phpsyntax><phpsyntax function="posix_setegid" usage="bool posix_setegid(long uid)">Set effective group id</phpsyntax><phpsyntax function="posix_seteuid" usage="bool posix_seteuid(long uid)">Set effective user id</phpsyntax><phpsyntax function="posix_setgid" usage="bool posix_setgid(int uid)">Set group id (POSIX.1, 4.2.2)</phpsyntax><phpsyntax function="posix_setpgid" usage="bool posix_setpgid(int pid, int pgid)">Set process group id for job control (POSIX.1, 4.3.3)</phpsyntax><phpsyntax function="posix_setsid" usage="int posix_setsid(void)">Create session and set process group id (POSIX.1, 4.3.2)</phpsyntax><phpsyntax function="posix_setuid" usage="bool posix_setuid(long uid)">Set user id (POSIX.1, 4.2.2)</phpsyntax><phpsyntax function="posix_strerror" usage="string posix_strerror(int errno)">Retrieve the system error message associated with the given errno.</phpsyntax><phpsyntax function="posix_times" usage="array posix_times(void)">Get process times (POSIX.1, 4.5.2)</phpsyntax><phpsyntax function="posix_ttyname" usage="string posix_ttyname(int fd)">Determine terminal device name (POSIX.1, 4.7.2)</phpsyntax><phpsyntax function="posix_uname" usage="array posix_uname(void)">Get system name (POSIX.1, 4.4.1)</phpsyntax><phpsyntax function="pspell_add_to_personal" usage="bool pspell_add_to_personal(int pspell, string word)">Adds a word to a personal list</phpsyntax><phpsyntax function="pspell_add_to_session" usage="bool pspell_add_to_session(int pspell, string word)">Adds a word to the current session</phpsyntax><phpsyntax function="pspell_check" usage="bool pspell_check(int pspell, string word)">Returns true if word is valid</phpsyntax><phpsyntax function="pspell_clear_session" usage="bool pspell_clear_session(int pspell)">Clears the current session</phpsyntax><phpsyntax function="pspell_config_create" usage="int pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])">Create a new config to be used later to create a manager</phpsyntax><phpsyntax function="pspell_config_data_dir" usage="bool pspell_config_data_dir(int conf, string directory)">location of language data files</phpsyntax><phpsyntax function="pspell_config_dict_dir" usage="bool pspell_config_dict_dir(int conf, string directory)">location of the main word list</phpsyntax><phpsyntax function="pspell_config_ignore" usage="bool pspell_config_ignore(int conf, int ignore)">Ignore words &lt;= n chars</phpsyntax><phpsyntax function="pspell_config_mode" usage="bool pspell_config_mode(int conf, long mode)">Select mode for config (PSPELL_FAST, PSPELL_NORMAL or PSPELL_BAD_SPELLERS)</phpsyntax><phpsyntax function="pspell_config_personal" usage="bool pspell_config_personal(int conf, string personal)">Use a personal dictionary for this config</phpsyntax><phpsyntax function="pspell_config_repl" usage="bool pspell_config_repl(int conf, string repl)">Use a personal dictionary with replacement pairs for this config</phpsyntax><phpsyntax function="pspell_config_runtogether" usage="bool pspell_config_runtogether(int conf, bool runtogether)">Consider run-together words as valid components</phpsyntax><phpsyntax function="pspell_config_save_repl" usage="bool pspell_config_save_repl(int conf, bool save)">Save replacement pairs when personal list is saved for this config</phpsyntax><phpsyntax function="pspell_new" usage="int pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])">Load a dictionary</phpsyntax><phpsyntax function="pspell_new_config" usage="int pspell_new_config(int config)">Load a dictionary based on the given config</phpsyntax><phpsyntax function="pspell_new_personal" usage="int pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])">Load a dictionary with a personal wordlist</phpsyntax><phpsyntax function="pspell_save_wordlist" usage="bool pspell_save_wordlist(int pspell)">Saves the current (personal) wordlist</phpsyntax><phpsyntax function="pspell_store_replacement" usage="bool pspell_store_replacement(int pspell, string misspell, string correct)">Notify the dictionary of a user-selected replacement</phpsyntax><phpsyntax function="pspell_suggest" usage="array pspell_suggest(int pspell, string word)">Returns array of suggestions</phpsyntax><phpsyntax function="readline" usage="string readline([string prompt])">Reads a line</phpsyntax><phpsyntax function="readline_add_history" usage="bool readline_add_history([string prompt])">Adds a line to the history</phpsyntax><phpsyntax function="readline_clear_history" usage="bool readline_clear_history(void)">Clears the history</phpsyntax><phpsyntax function="readline_completion_function" usage="bool readline_completion_function(string funcname)">Readline completion function?</phpsyntax><phpsyntax function="readline_info" usage="mixed readline_info([string varname] [, string newvalue])">Gets/sets various internal readline variables.</phpsyntax><phpsyntax function="readline_list_history" usage="array readline_list_history(void)">Lists the history</phpsyntax><phpsyntax function="readline_read_history" usage="bool readline_read_history([string filename] [, int from] [,int to])">Reads the history</phpsyntax><phpsyntax function="readline_write_history" usage="bool readline_write_history([string filename])">Writes the history</phpsyntax><phpsyntax function="recode_file" usage="bool recode_file(string request, resource input, resource output)">Recode file input into file output according to request</phpsyntax><phpsyntax function="recode_string" usage="string recode_string(string request, string str)">Recode string str according to request string</phpsyntax><phpsyntax function="session_cache_expire" usage="int session_cache_expire([int new_cache_expire])">Return the current cache expire. If new_cache_expire is given, the current cache_expire is replaced with new_cache_expire</phpsyntax><phpsyntax function="session_cache_limiter" usage="string session_cache_limiter([string new_cache_limiter])">Return the current cache limiter. If new_cache_limited is given, the current cache_limiter is replaced with new_cache_limiter</phpsyntax><phpsyntax function="session_decode" usage="bool session_decode(string data)">Deserializes data and reinitializes the variables</phpsyntax><phpsyntax function="session_destroy" usage="bool session_destroy(void)">Destroy the current session and all data associated with it</phpsyntax><phpsyntax function="session_encode" usage="string session_encode(void)">Serializes the current setup and returns the serialized representation</phpsyntax><phpsyntax function="session_get_cookie_params" usage="array session_get_cookie_params(void)">Return the session cookie parameters</phpsyntax><phpsyntax function="session_id" usage="string session_id([string newid])">Return the current session id. If newid is given, the session id is replaced with newid</phpsyntax><phpsyntax function="session_is_registered" usage="bool session_is_registered(string varname)">Checks if a variable is registered in session</phpsyntax><phpsyntax function="session_module_name" usage="string session_module_name([string newname])">Return the current module name used for accessing session data. If newname is given, the module name is replaced with newname</phpsyntax><phpsyntax function="session_name" usage="string session_name([string newname])">Return the current session name. If newname is given, the session name is replaced with newname</phpsyntax><phpsyntax function="session_regenerate_id" usage="bool session_regenerate_id()">Update the current session id with a newly generated one.</phpsyntax><phpsyntax function="session_register" usage="bool session_register(mixed var_names [, mixed ...])">Adds varname(s) to the list of variables which are freezed at the session end</phpsyntax><phpsyntax function="session_save_path" usage="string session_save_path([string newname])">Return the current save path passed to module_name. If newname is given, the save path is replaced with newname</phpsyntax><phpsyntax function="session_set_cookie_params" usage="void session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]])">Set session cookie parameters</phpsyntax><phpsyntax function="session_set_save_handler" usage="void session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)">Sets user-level functions</phpsyntax><phpsyntax function="session_start" usage="bool session_start(void)">Begin session - reinitializes freezed variables, registers browsers etc</phpsyntax><phpsyntax function="session_unregister" usage="bool session_unregister(string varname)">Removes varname from the list of variables which are freezed at the session end</phpsyntax><phpsyntax function="session_unset" usage="void session_unset(void)">Unset all registered variables</phpsyntax><phpsyntax function="session_write_close" usage="void session_write_close(void)">Write session data and end session</phpsyntax><phpsyntax function="simplexml_import_dom" usage="simplemxml_element simplexml_import_dom(domNode node [, string class_name])">Get a simplexml_element object from dom to allow for processing</phpsyntax><phpsyntax function="simplexml_load_file" usage="simplemxml_element simplexml_load_file(string filename [, string class_name])">Load a filename and return a simplexml_element object to allow for processing</phpsyntax><phpsyntax function="simplexml_load_string" usage="simplemxml_element simplexml_load_string(string data [, string class_name])">Load a string and return a simplexml_element object to allow for processing</phpsyntax><phpsyntax function="confirm_extname_compiled" usage="string confirm_extname_compiled(string arg)">Return a string to confirm that the module is compiled in</phpsyntax><phpsyntax function="snmp_get_quick_print" usage="bool snmp_get_quick_print(void)">Return the current status of quick_print</phpsyntax><phpsyntax function="snmp_get_valueretrieval" usage="int snmp_get_valueretrieval()">Return the method how the SNMP values will be returned</phpsyntax><phpsyntax function="snmp_read_mib" usage="int snmp_read_mib(string filename)">Reads and parses a MIB file into the active MIB tree.</phpsyntax><phpsyntax function="snmp_set_enum_print" usage="void snmp_set_enum_print(int enum_print)">Return all values that are enums with their enum value instead of the raw integer</phpsyntax><phpsyntax function="snmp_set_oid_numeric_print" usage="void snmp_set_oid_numeric_print(int oid_numeric_print)">Return all objects including their respective object id withing the specified one</phpsyntax><phpsyntax function="snmp_set_quick_print" usage="void snmp_set_quick_print(int quick_print)">Return all objects including their respective object id withing the specified one</phpsyntax><phpsyntax function="snmp_set_valueretrieval" usage="int snmp_set_valueretrieval(int method)">Specify the method how the SNMP values will be returned</phpsyntax><phpsyntax function="snmpget" usage="string snmpget(string host, string community, string object_id [, int timeout [, int retries]])">Fetch a SNMP object</phpsyntax><phpsyntax function="snmpgetnext" usage="string snmpgetnext(string host, string community, string object_id [, int timeout [, int retries]])">Fetch a SNMP object</phpsyntax><phpsyntax function="snmprealwalk" usage="array snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])">Return all objects including their respective object id withing the specified one</phpsyntax><phpsyntax function="snmpset" usage="int snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])">Set the value of a SNMP object</phpsyntax><phpsyntax function="snmpwalk" usage="array snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])">Return all objects under the specified object id</phpsyntax><phpsyntax function="socket_accept" usage="resource socket_accept(resource socket)">Accepts a connection on the listening socket fd</phpsyntax><phpsyntax function="socket_bind" usage="bool socket_bind(resource socket, string addr [, int port])">Binds an open socket to a listening port, port is only specified in AF_INET family.</phpsyntax><phpsyntax function="socket_clear_error" usage="void socket_clear_error([resource socket])">Clears the error on the socket or the last error code.</phpsyntax><phpsyntax function="socket_close" usage="void socket_close(resource socket)">Closes a file descriptor</phpsyntax><phpsyntax function="socket_connect" usage="bool socket_connect(resource socket, string addr [, int port])">Opens a connection to addr:port on the socket specified by socket</phpsyntax><phpsyntax function="socket_create" usage="resource socket_create(int domain, int type, int protocol)">Creates an endpoint for communication in the domain specified by domain, of type specified by type</phpsyntax><phpsyntax function="socket_create_listen" usage="resource socket_create_listen(int port[, int backlog])">Opens a socket on port to accept connections</phpsyntax><phpsyntax function="socket_create_pair" usage="bool socket_create_pair(int domain, int type, int protocol, array &amp;fd)">Creates a pair of indistinguishable sockets and stores them in fds.</phpsyntax><phpsyntax function="socket_get_option" usage="mixed socket_get_option(resource socket, int level, int optname)">Gets socket options for the socket</phpsyntax><phpsyntax function="socket_getpeername" usage="bool socket_getpeername(resource socket, string &amp;addr[, int &amp;port])">Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.</phpsyntax><phpsyntax function="socket_getsockname" usage="bool socket_getsockname(resource socket, string &amp;addr[, int &amp;port])">Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.</phpsyntax><phpsyntax function="socket_last_error" usage="int socket_last_error([resource socket])">Returns the last socket error (either the last used or the provided socket resource)</phpsyntax><phpsyntax function="socket_listen" usage="bool socket_listen(resource socket[, int backlog])">Sets the maximum number of connections allowed to be waited for on the socket specified by fd</phpsyntax><phpsyntax function="socket_read" usage="string socket_read(resource socket, int length [, int type])">Reads a maximum of length bytes from socket</phpsyntax><phpsyntax function="socket_recv" usage="int socket_recv(resource socket, string &amp;buf, int len, int flags)">Receives data from a connected socket</phpsyntax><phpsyntax function="socket_recvfrom" usage="int socket_recvfrom(resource socket, string &amp;buf, int len, int flags, string &amp;name [, int &amp;port])">Receives data from a socket, connected or not</phpsyntax><phpsyntax function="socket_select" usage="int socket_select(array &amp;read_fds, array &amp;write_fds, &amp;array except_fds, int tv_sec[, int tv_usec])">Runs the select() system call on the sets mentioned with a timeout specified by tv_sec and tv_usec</phpsyntax><phpsyntax function="socket_send" usage="int socket_send(resource socket, string buf, int len, int flags)">Sends data to a connected socket</phpsyntax><phpsyntax function="socket_sendto" usage="int socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])">Sends a message to a socket, whether it is connected or not</phpsyntax><phpsyntax function="socket_set_block" usage="bool socket_set_block(resource socket)">Sets blocking mode on a socket resource</phpsyntax><phpsyntax function="socket_set_nonblock" usage="bool socket_set_nonblock(resource socket)">Sets nonblocking mode on a socket resource</phpsyntax><phpsyntax function="socket_set_option" usage="bool socket_set_option(resource socket, int level, int optname, int|array optval)">Sets socket options for the socket</phpsyntax><phpsyntax function="socket_shutdown" usage="bool socket_shutdown(resource socket[, int how])">Shuts down a socket for receiving, sending, or both.</phpsyntax><phpsyntax function="socket_strerror" usage="string socket_strerror(int errno)">Returns a string describing an error</phpsyntax><phpsyntax function="socket_write" usage="int socket_write(resource socket, string buf[, int length])">Writes the buffer to the socket resource, length is optional</phpsyntax><phpsyntax function="sqlite_array_query" usage="array sqlite_array_query(resource db, string query [ , int result_type [, bool decode_binary]])">Executes a query against a given database and returns an array of arrays.</phpsyntax><phpsyntax function="sqlite_busy_timeout" usage="void sqlite_busy_timeout(resource db, int ms)">Set busy timeout duration. If ms &lt;= 0, all busy handlers are disabled.</phpsyntax><phpsyntax function="sqlite_changes" usage="int sqlite_changes(resource db)">Returns the number of rows that were changed by the most recent SQL statement.</phpsyntax><phpsyntax function="sqlite_close" usage="void sqlite_close(resource db)">Closes an open sqlite database.</phpsyntax><phpsyntax function="sqlite_column" usage="mixed sqlite_column(resource result, mixed index_or_name [, bool decode_binary])">Fetches a column from the current row of a result set.</phpsyntax><phpsyntax function="sqlite_create_aggregate" usage="bool sqlite_create_aggregate(resource db, string funcname, mixed step_func, mixed finalize_func[, long num_args])">Registers an aggregate function for queries.</phpsyntax><phpsyntax function="sqlite_create_function" usage="bool sqlite_create_function(resource db, string funcname, mixed callback[, long num_args])">Registers a "regular" function for queries.</phpsyntax><phpsyntax function="sqlite_current" usage="array sqlite_current(resource result [, int result_type [, bool decode_binary]])">Fetches the current row from a result set as an array.</phpsyntax><phpsyntax function="sqlite_error_string" usage="string sqlite_error_string(int error_code)">Returns the textual description of an error code.</phpsyntax><phpsyntax function="sqlite_escape_string" usage="string sqlite_escape_string(string item)">Escapes a string for use as a query parameter.</phpsyntax><phpsyntax function="sqlite_factory" usage="object sqlite_factory(string filename [, int mode [, string &amp;error_message]])">Opens a SQLite database and creates an object for it. Will create the database if it does not exist.</phpsyntax><phpsyntax function="sqlite_fetch_all" usage="array sqlite_fetch_all(resource result [, int result_type [, bool decode_binary]])">Fetches all rows from a result set as an array of arrays.</phpsyntax><phpsyntax function="sqlite_fetch_array" usage="array sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])">Fetches the next row from a result set as an array.</phpsyntax><phpsyntax function="sqlite_fetch_column_types" usage="resource sqlite_fetch_column_types(string table_name, resource db)">Return an array of column types from a particular table.</phpsyntax><phpsyntax function="sqlite_fetch_object" usage="object sqlite_fetch_object(resource result [, string class_name [, NULL|array ctor_params [, bool decode_binary]]])">Fetches the next row from a result set as an object.</phpsyntax><phpsyntax function="sqlite_fetch_single" usage="string sqlite_fetch_single(resource result [, bool decode_binary])">Fetches the first column of a result set as a string.</phpsyntax><phpsyntax function="sqlite_field_name" usage="string sqlite_field_name(resource result, int field_index)">Returns the name of a particular field of a result set.</phpsyntax><phpsyntax function="sqlite_has_prev" usage="bool sqlite_has_prev(resource result)">* Returns whether a previous row is available.</phpsyntax><phpsyntax function="sqlite_last_error" usage="int sqlite_last_error(resource db)">Returns the error code of the last error for a database.</phpsyntax><phpsyntax function="sqlite_last_insert_rowid" usage="int sqlite_last_insert_rowid(resource db)">Returns the rowid of the most recently inserted row.</phpsyntax><phpsyntax function="sqlite_libencoding" usage="string sqlite_libencoding()">Returns the encoding (iso8859 or UTF-8) of the linked SQLite library.</phpsyntax><phpsyntax function="sqlite_libversion" usage="string sqlite_libversion()">Returns the version of the linked SQLite library.</phpsyntax><phpsyntax function="sqlite_next" usage="bool sqlite_next(resource result)">Seek to the next row number of a result set.</phpsyntax><phpsyntax function="sqlite_num_fields" usage="int sqlite_num_fields(resource result)">Returns the number of fields in a result set.</phpsyntax><phpsyntax function="sqlite_num_rows" usage="int sqlite_num_rows(resource result)">Returns the number of rows in a buffered result set.</phpsyntax><phpsyntax function="sqlite_open" usage="resource sqlite_open(string filename [, int mode [, string &amp;error_message]])">Opens a SQLite database. Will create the database if it does not exist.</phpsyntax><phpsyntax function="sqlite_popen" usage="resource sqlite_popen(string filename [, int mode [, string &amp;error_message]])">Opens a persistent handle to a SQLite database. Will create the database if it does not exist.</phpsyntax><phpsyntax function="sqlite_prev" usage="bool sqlite_prev(resource result)">* Seek to the previous row number of a result set.</phpsyntax><phpsyntax function="sqlite_query" usage="resource sqlite_query(string query, resource db [, int result_type ])">Executes a query against a given database and returns a result handle.</phpsyntax><phpsyntax function="sqlite_rewind" usage="bool sqlite_rewind(resource result)">Seek to the first row number of a buffered result set.</phpsyntax><phpsyntax function="sqlite_seek" usage="bool sqlite_seek(resource result, int row)">Seek to a particular row number of a buffered result set.</phpsyntax><phpsyntax function="sqlite_single_query" usage="array sqlite_single_query(resource db, string query [, bool first_row_only [, bool decode_binary]])">Executes a query and returns either an array for one single column or the value of the first row.</phpsyntax><phpsyntax function="sqlite_udf_decode_binary" usage="string sqlite_udf_decode_binary(string data)">Decode binary encoding on a string parameter passed to an UDF.</phpsyntax><phpsyntax function="sqlite_udf_encode_binary" usage="string sqlite_udf_encode_binary(string data)">Apply binary encoding (if required) to a string to return from an UDF.</phpsyntax><phpsyntax function="sqlite_unbuffered_query" usage="resource sqlite_unbuffered_query(string query, resource db [ , int result_type ])">Executes a query that does not prefetch and buffer all data.</phpsyntax><phpsyntax function="sqlite_valid" usage="bool sqlite_valid(resource result)">Returns whether more rows are available.</phpsyntax><phpsyntax function="array_change_key_case" usage="array array_change_key_case(array input [, int case=CASE_LOWER])">Retuns an array with all string keys lowercased [or uppercased]</phpsyntax><phpsyntax function="array_chunk" usage="array array_chunk(array input, int size [, bool preserve_keys])">Split array into chunks</phpsyntax><phpsyntax function="array_combine" usage="array array_combine(array keys, array values)">Creates an array by using the elements of the first parameter as keys and the elements of the second as correspoding keys</phpsyntax><phpsyntax function="array_count_values" usage="array array_count_values(array input)">Return the value as key and the frequency of that value in input as value</phpsyntax><phpsyntax function="array_diff" usage="array array_diff(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are not present in any of the others arguments.</phpsyntax><phpsyntax function="array_diff_assoc" usage="array array_diff_assoc(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal</phpsyntax><phpsyntax function="array_diff_uassoc" usage="array array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Elements are compared by user supplied function.</phpsyntax><phpsyntax function="array_fill" usage="array array_fill(int start_key, int num, mixed val)">Create an array containing num elements starting with index start_key each initialized to val</phpsyntax><phpsyntax function="array_filter" usage="array array_filter(array input [, mixed callback])">Filters elements from the array via the callback.</phpsyntax><phpsyntax function="array_flip" usage="array array_flip(array input)">Return array with key &lt;-&gt; value flipped</phpsyntax><phpsyntax function="array_intersect" usage="array array_intersect(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are present in all the other arguments</phpsyntax><phpsyntax function="array_intersect_assoc" usage="array array_intersect_assoc(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check</phpsyntax><phpsyntax function="array_intersect_uassoc" usage="array array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check and they are compared by using an user-supplied callback.</phpsyntax><phpsyntax function="array_key_exists" usage="bool array_key_exists(mixed key, array search)">Checks if the given key or index exists in the array</phpsyntax><phpsyntax function="array_keys" usage="array array_keys(array input [, mixed search_value[, bool strict]])">Return just the keys from the input array, optionally only for the specified search_value</phpsyntax><phpsyntax function="array_map" usage="array array_map(mixed callback, array input1 [, array input2 ,...])">Applies the callback to the elements in given arrays.</phpsyntax><phpsyntax function="array_merge" usage="array array_merge(array arr1, array arr2 [, array ...])">Merges elements from passed arrays into one array</phpsyntax><phpsyntax function="array_merge_recursive" usage="array array_merge_recursive(array arr1, array arr2 [, array ...])">Recursively merges elements from passed arrays into one array</phpsyntax><phpsyntax function="array_multisort" usage="bool array_multisort(array ar1 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array ar2 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])">Sort multiple arrays at once similar to how ORDER BY clause works in SQL</phpsyntax><phpsyntax function="array_pad" usage="array array_pad(array input, int pad_size, mixed pad_value)">Returns a copy of input array padded with pad_value to size pad_size</phpsyntax><phpsyntax function="array_pop" usage="mixed array_pop(array stack)">Pops an element off the end of the array</phpsyntax><phpsyntax function="array_push" usage="int array_push(array stack, mixed var [, mixed ...])">Pushes elements onto the end of the array</phpsyntax><phpsyntax function="array_rand" usage="mixed array_rand(array input [, int num_req])">Return key/keys for random entry/entries in the array</phpsyntax><phpsyntax function="array_reduce" usage="mixed array_reduce(array input, mixed callback [, int initial])">Iteratively reduce the array to a single value via the callback.</phpsyntax><phpsyntax function="array_reverse" usage="array array_reverse(array input [, bool preserve keys])">Return input as a new array with the order of the entries reversed</phpsyntax><phpsyntax function="array_search" usage="mixed array_search(mixed needle, array haystack [, bool strict])">Searches the array for a given value and returns the corresponding key if successful</phpsyntax><phpsyntax function="array_shift" usage="mixed array_shift(array stack)">Pops an element off the beginning of the array</phpsyntax><phpsyntax function="array_slice" usage="array array_slice(array input, int offset [, int length])">Returns elements specified by offset and length</phpsyntax><phpsyntax function="array_splice" usage="array array_splice(array input, int offset [, int length [, array replacement]])">Removes the elements designated by offset and length and replace them with supplied array</phpsyntax><phpsyntax function="array_sum" usage="mixed array_sum(array input)">Returns the sum of the array entries</phpsyntax><phpsyntax function="array_udiff" usage="array array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments. Elements are compared by user supplied function.</phpsyntax><phpsyntax function="array_udiff_assoc" usage="array array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Keys are compared by user supplied function.</phpsyntax><phpsyntax function="array_udiff_uassoc" usage="array array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Keys and elements are compared by user supplied functions.</phpsyntax><phpsyntax function="array_uintersect" usage="array array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Data is compared by using an user-supplied callback.</phpsyntax><phpsyntax function="array_uintersect_assoc" usage="array array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check. Data is compared by using an user-supplied callback.</phpsyntax><phpsyntax function="array_uintersect_uassoc" usage="array array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check. Both data and keys are compared by using user-supplied callbacks.</phpsyntax><phpsyntax function="array_unique" usage="array array_unique(array input)">Removes duplicate values from array</phpsyntax><phpsyntax function="array_unshift" usage="int array_unshift(array stack, mixed var [, mixed ...])">Pushes elements onto the beginning of the array</phpsyntax><phpsyntax function="array_values" usage="array array_values(array input)">Return just the values from the input array</phpsyntax><phpsyntax function="array_walk" usage="bool array_walk(array input, string funcname [, mixed userdata])">Apply a user function to every member of an array</phpsyntax><phpsyntax function="array_walk_recursive" usage="bool array_walk_recursive(array input, string funcname [, mixed userdata])">Apply a user function recursively to every member of an array</phpsyntax><phpsyntax function="arsort" usage="bool arsort(array array_arg [, int sort_flags])">Sort an array in reverse order and maintain index association</phpsyntax><phpsyntax function="asort" usage="bool asort(array array_arg [, int sort_flags])">Sort an array and maintain index association</phpsyntax><phpsyntax function="compact" usage="array compact(mixed var_names [, mixed ...])">Creates a hash containing variables and their values</phpsyntax><phpsyntax function="count" usage="int count(mixed var [, int mode])">Count the number of elements in a variable (usually an array)</phpsyntax><phpsyntax function="current" usage="mixed current(array array_arg)">Return the element currently pointed to by the internal array pointer</phpsyntax><phpsyntax function="end" usage="mixed end(array array_arg)">Advances array argument's internal pointer to the last element and return it</phpsyntax><phpsyntax function="extract" usage="int extract(array var_array [, int extract_type [, string prefix]])">Imports variables into symbol table from an array</phpsyntax><phpsyntax function="in_array" usage="bool in_array(mixed needle, array haystack [, bool strict])">Checks if the given value exists in the array</phpsyntax><phpsyntax function="key" usage="mixed key(array array_arg)">Return the key of the element currently pointed to by the internal array pointer</phpsyntax><phpsyntax function="krsort" usage="bool krsort(array array_arg [, int sort_flags])">Sort an array by key value in reverse order</phpsyntax><phpsyntax function="ksort" usage="bool ksort(array array_arg [, int sort_flags])">Sort an array by key</phpsyntax><phpsyntax function="max" usage="mixed max(mixed arg1 [, mixed arg2 [, mixed ...]])">Return the highest value in an array or a series of arguments</phpsyntax><phpsyntax function="min" usage="mixed min(mixed arg1 [, mixed arg2 [, mixed ...]])">Return the lowest value in an array or a series of arguments</phpsyntax><phpsyntax function="natcasesort" usage="void natcasesort(array array_arg)">Sort an array using case-insensitive natural sort</phpsyntax><phpsyntax function="natsort" usage="void natsort(array array_arg)">Sort an array using natural sort</phpsyntax><phpsyntax function="next" usage="mixed next(array array_arg)">Move array argument's internal pointer to the next element and return it</phpsyntax><phpsyntax function="prev" usage="mixed prev(array array_arg)">Move array argument's internal pointer to the previous element and return it</phpsyntax><phpsyntax function="range" usage="array range(mixed low, mixed high[, int step])">Create an array containing the range of integers or characters from low to high (inclusive)</phpsyntax><phpsyntax function="reset" usage="mixed reset(array array_arg)">Set array argument's internal pointer to the first element and return it</phpsyntax><phpsyntax function="rsort" usage="bool rsort(array array_arg [, int sort_flags])">Sort an array in reverse order</phpsyntax><phpsyntax function="shuffle" usage="bool shuffle(array array_arg)">Randomly shuffle the contents of an array</phpsyntax><phpsyntax function="sort" usage="bool sort(array array_arg [, int sort_flags])">Sort an array</phpsyntax><phpsyntax function="uasort" usage="bool uasort(array array_arg, string cmp_function)">Sort an array with a user-defined comparison function and maintain index association</phpsyntax><phpsyntax function="uksort" usage="bool uksort(array array_arg, string cmp_function)">Sort an array by keys using a user-defined comparison function</phpsyntax><phpsyntax function="usort" usage="bool usort(array array_arg, string cmp_function)">Sort an array by values using a user-defined comparison function</phpsyntax><phpsyntax function="assert" usage="int assert(string|bool assertion)">Checks if assertion is false</phpsyntax><phpsyntax function="assert_options" usage="mixed assert_options(int what [, mixed value])">Set/get the various assert flags</phpsyntax><phpsyntax function="call_user_func" usage="mixed call_user_func(string function_name [, mixed parmeter] [, mixed ...])">Call a user function which is the first parameter</phpsyntax><phpsyntax function="call_user_func_array" usage="mixed call_user_func_array(string function_name, array parameters)">Call a user function which is the first parameter with the arguments contained in array</phpsyntax><phpsyntax function="call_user_method" usage="mixed call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])">Call a user method on a specific object or class</phpsyntax><phpsyntax function="call_user_method_array" usage="mixed call_user_method_array(string method_name, mixed object, array params)">Call a user method on a specific object or class using a parameter array</phpsyntax><phpsyntax function="connection_aborted" usage="int connection_aborted(void)">Returns true if client disconnected</phpsyntax><phpsyntax function="connection_status" usage="int connection_status(void)">Returns the connection status bitfield</phpsyntax><phpsyntax function="constant" usage="mixed constant(string const_name)">Given the name of a constant this function will return the constants associated value</phpsyntax><phpsyntax function="error_log" usage="bool error_log(string message [, int message_type [, string destination [, string extra_headers]]])">Send an error message somewhere</phpsyntax><phpsyntax function="flush" usage="void flush(void)">Flush the output buffer</phpsyntax><phpsyntax function="get_cfg_var" usage="string get_cfg_var(string option_name)">Get the value of a PHP configuration option</phpsyntax><phpsyntax function="get_current_user" usage="string get_current_user(void)">Get the name of the owner of the current PHP script</phpsyntax><phpsyntax function="get_include_path" usage="string get_include_path()">Get the current include_path configuration option</phpsyntax><phpsyntax function="get_magic_quotes_gpc" usage="int get_magic_quotes_gpc(void)">Get the current active configuration setting of magic_quotes_gpc</phpsyntax><phpsyntax function="get_magic_quotes_runtime" usage="int get_magic_quotes_runtime(void)">Get the current active configuration setting of magic_quotes_runtime</phpsyntax><phpsyntax function="getenv" usage="string getenv(string varname)">Get the value of an environment variable</phpsyntax><phpsyntax function="getopt" usage="array getopt(string options [, array longopts])">Get options from the command line argument list</phpsyntax><phpsyntax function="getprotobyname" usage="int getprotobyname(string name)">Returns protocol number associated with name as per /etc/protocols</phpsyntax><phpsyntax function="getprotobynumber" usage="string getprotobynumber(int proto)">Returns protocol name associated with protocol number proto</phpsyntax><phpsyntax function="getservbyname" usage="int getservbyname(string service, string protocol)">Returns port associated with service. Protocol must be "tcp" or "udp"</phpsyntax><phpsyntax function="getservbyport" usage="string getservbyport(int port, string protocol)">Returns service name associated with port. Protocol must be "tcp" or "udp"</phpsyntax><phpsyntax function="highlight_file" usage="bool highlight_file(string file_name [, bool return] )">Syntax highlight a source file</phpsyntax><phpsyntax function="highlight_string" usage="bool highlight_string(string string [, bool return] )">Syntax highlight a string or optionally return it</phpsyntax><phpsyntax function="ignore_user_abort" usage="int ignore_user_abort(bool value)">Set whether we want to ignore a user abort event or not</phpsyntax><phpsyntax function="import_request_variables" usage="bool import_request_variables(string types [, string prefix])">Import GET/POST/Cookie variables into the global scope</phpsyntax><phpsyntax function="ini_get" usage="string ini_get(string varname)">Get a configuration option</phpsyntax><phpsyntax function="ini_get_all" usage="array ini_get_all([string extension])">Get all configuration options</phpsyntax><phpsyntax function="ini_restore" usage="void ini_restore(string varname)">Restore the value of a configuration option specified by varname</phpsyntax><phpsyntax function="ini_set" usage="string ini_set(string varname, string newvalue)">Set a configuration option, returns false on error and the old value of the configuration option on success</phpsyntax><phpsyntax function="is_uploaded_file" usage="bool is_uploaded_file(string path)">Check if file was created by rfc1867 upload</phpsyntax><phpsyntax function="move_uploaded_file" usage="bool move_uploaded_file(string path, string new_path)">Move a file if and only if it was created by an upload</phpsyntax><phpsyntax function="parse_ini_file" usage="array parse_ini_file(string filename [, bool process_sections])">Parse configuration file</phpsyntax><phpsyntax function="php_check_syntax" usage="bool php_check_syntax(string file_name [, &amp;$error_message])">Check the syntax of the specified file.</phpsyntax><phpsyntax function="php_strip_whitespace" usage="string php_strip_whitespace(string file_name)">Return source with stripped comments and whitespace</phpsyntax><phpsyntax function="print_r" usage="mixed print_r(mixed var [, bool return])">Prints out or returns information about the specified variable</phpsyntax><phpsyntax function="putenv" usage="bool putenv(string setting)">Set the value of an environment variable</phpsyntax><phpsyntax function="register_shutdown_function" usage="void register_shutdown_function(string function_name)">Register a user-level function to be called on request termination</phpsyntax><phpsyntax function="register_tick_function" usage="bool register_tick_function(string function_name [, mixed arg [, mixed ... ]])">Registers a tick callback function</phpsyntax><phpsyntax function="restore_include_path" usage="void restore_include_path()">Restore the value of the include_path configuration option</phpsyntax><phpsyntax function="set_include_path" usage="string set_include_path(string varname, string newvalue)">Sets the include_path configuration option</phpsyntax><phpsyntax function="set_magic_quotes_runtime" usage="bool set_magic_quotes_runtime(int new_setting)">Set the current active configuration setting of magic_quotes_runtime and return previous</phpsyntax><phpsyntax function="sleep" usage="void sleep(int seconds)">Delay for a given number of seconds</phpsyntax><phpsyntax function="time_nanosleep" usage="mixed time_nanosleep(long seconds, long nanoseconds)">Delay for a number of seconds and nano seconds</phpsyntax><phpsyntax function="unregister_tick_function" usage="void unregister_tick_function(string function_name)">Unregisters a tick callback function</phpsyntax><phpsyntax function="usleep" usage="void usleep(int micro_seconds)">Delay for a given number of micro seconds</phpsyntax><phpsyntax function="get_browser" usage="mixed get_browser([string browser_name [, bool return_array]])">Get information about the capabilities of a browser. If browser_name is omitted     or null, HTTP_USER_AGENT is used. Returns an object by default; if return_array     is true, returns an array.</phpsyntax><phpsyntax function="crypt" usage="string crypt(string str [, string salt])">Encrypt a string</phpsyntax><phpsyntax function="convert_cyr_string" usage="string convert_cyr_string(string str, string from, string to)">Convert from one Cyrillic character set to another</phpsyntax><phpsyntax function="checkdate" usage="bool checkdate(int month, int day, int year)">Returns true(1) if it is a valid date in gregorian calendar</phpsyntax><phpsyntax function="date" usage="string date(string format [, int timestamp])">Format a local time/date</phpsyntax><phpsyntax function="getdate" usage="array getdate([int timestamp])">Get date/time information</phpsyntax><phpsyntax function="gmdate" usage="string gmdate(string format [, int timestamp])">Format a GMT/UTC date/time</phpsyntax><phpsyntax function="gmmktime" usage="int gmmktime(int hour, int min, int sec, int mon, int day, int year)">Get UNIX timestamp for a GMT date</phpsyntax><phpsyntax function="gmstrftime" usage="string gmstrftime(string format [, int timestamp])">Format a GMT/UCT time/date according to locale settings</phpsyntax><phpsyntax function="idate" usage="int idate(string format [, int timestamp])">Format a local time/date as integer</phpsyntax><phpsyntax function="localtime" usage="array localtime([int timestamp [, bool associative_array]])">Returns the results of the C system call localtime as an associative array if the associative_array argument is set to 1 other wise it is a regular array</phpsyntax><phpsyntax function="mktime" usage="int mktime(int hour, int min, int sec, int mon, int day, int year)">Get UNIX timestamp for a date</phpsyntax><phpsyntax function="strftime" usage="string strftime(string format [, int timestamp])">Format a local time/date according to locale settings</phpsyntax><phpsyntax function="strtotime" usage="int strtotime(string time, int now)">Convert string representation of date and time to a timestamp</phpsyntax><phpsyntax function="time" usage="int time(void)">Return current UNIX timestamp</phpsyntax><phpsyntax function="chdir" usage="bool chdir(string directory)">Change the current directory</phpsyntax><phpsyntax function="chroot" usage="bool chroot(string directory)">Change root directory</phpsyntax><phpsyntax function="closedir" usage="void closedir([resource dir_handle])">Close directory connection identified by the dir_handle</phpsyntax><phpsyntax function="dir" usage="object dir(string directory[, resource context])">Directory class with properties, handle and class and methods read, rewind and close</phpsyntax><phpsyntax function="getcwd" usage="mixed getcwd(void)">Gets the current directory</phpsyntax><phpsyntax function="glob" usage="array glob(string pattern [, int flags])">Find pathnames matching a pattern</phpsyntax><phpsyntax function="opendir" usage="mixed opendir(string path[, resource context])">Open a directory and return a dir_handle</phpsyntax><phpsyntax function="readdir" usage="string readdir([resource dir_handle])">Read directory entry from dir_handle</phpsyntax><phpsyntax function="rewinddir" usage="void rewinddir([resource dir_handle])">Rewind dir_handle back to the start</phpsyntax><phpsyntax function="scandir" usage="array scandir(string dir [, int sorting_order [, resource context]])">List files &amp; directories inside the specified path</phpsyntax><phpsyntax function="dl" usage="int dl(string extension_filename)">Load a PHP extension at runtime</phpsyntax><phpsyntax function="dns_check_record" usage="int dns_check_record(string host [, string type])">Check DNS records corresponding to a given Internet host name or IP address</phpsyntax><phpsyntax function="dns_get_mx" usage="bool dns_get_mx(string hostname, array mxhosts [, array weight])">Get MX records corresponding to a given Internet host name</phpsyntax><phpsyntax function="gethostbyaddr" usage="string gethostbyaddr(string ip_address)">Get the Internet host name corresponding to a given IP address</phpsyntax><phpsyntax function="gethostbyname" usage="string gethostbyname(string hostname)">Get the IP address corresponding to a given Internet host name</phpsyntax><phpsyntax function="gethostbynamel" usage="array gethostbynamel(string hostname)">Return a list of IP addresses that a given hostname resolves to.</phpsyntax><phpsyntax function="escapeshellarg" usage="string escapeshellarg(string arg)">Quote and escape an argument for use in a shell command</phpsyntax><phpsyntax function="escapeshellcmd" usage="string escapeshellcmd(string command)">Escape shell metacharacters</phpsyntax><phpsyntax function="exec" usage="string exec(string command [, array &amp;output [, int &amp;return_value]])">Execute an external program</phpsyntax><phpsyntax function="passthru" usage="void passthru(string command [, int &amp;return_value])">Execute an external program and display raw output</phpsyntax><phpsyntax function="proc_nice" usage="bool proc_nice(int priority)">Change the priority of the current process</phpsyntax><phpsyntax function="shell_exec" usage="string shell_exec(string cmd)">Execute command via shell and return complete output as string</phpsyntax><phpsyntax function="system" usage="int system(string command [, int &amp;return_value])">Execute an external program and display output</phpsyntax><phpsyntax function="copy" usage="bool copy(string source_file, string destination_file)">Copy a file</phpsyntax><phpsyntax function="fclose" usage="bool fclose(resource fp)">Close an open file pointer</phpsyntax><phpsyntax function="feof" usage="bool feof(resource fp)">Test for end-of-file on a file pointer</phpsyntax><phpsyntax function="fflush" usage="bool fflush(resource fp)">Flushes output</phpsyntax><phpsyntax function="fgetc" usage="string fgetc(resource fp)">Get a character from file pointer</phpsyntax><phpsyntax function="fgetcsv" usage="array fgetcsv(resource fp [,int length [, string delimiter [, string enclosure]]])">Get line from file pointer and parse for CSV fields</phpsyntax><phpsyntax function="fgets" usage="string fgets(resource fp[, int length])">Get a line from file pointer</phpsyntax><phpsyntax function="fgetss" usage="string fgetss(resource fp [, int length, string allowable_tags])">Get a line from file pointer and strip HTML tags</phpsyntax><phpsyntax function="file" usage="array file(string filename [, int flags[, resource context]])">Read entire file into an array</phpsyntax><phpsyntax function="file_get_contents" usage="string file_get_contents(string filename [, bool use_include_path [, resource context]])">Read the entire file into a string</phpsyntax><phpsyntax function="file_put_contents" usage="int file_put_contents(string file, mixed data [, int flags [, resource context]])">Write/Create a file with contents data and return the number of bytes written</phpsyntax><phpsyntax function="flock" usage="bool flock(resource fp, int operation [, int &amp;wouldblock])">Portable file locking</phpsyntax><phpsyntax function="fnmatch" usage="bool fnmatch(string pattern, string filename [, int flags])">Match filename against pattern</phpsyntax><phpsyntax function="fopen" usage="resource fopen(string filename, string mode [, bool use_include_path [, resource context]])">Open a file or a URL and return a file pointer</phpsyntax><phpsyntax function="fpassthru" usage="int fpassthru(resource fp)">Output all remaining data from a file pointer</phpsyntax><phpsyntax function="fread" usage="string fread(resource fp, int length)">Binary-safe file read</phpsyntax><phpsyntax function="fscanf" usage="mixed fscanf(resource stream, string format [, string ...])">Implements a mostly ANSI compatible fscanf()</phpsyntax><phpsyntax function="fseek" usage="int fseek(resource fp, int offset [, int whence])">Seek on a file pointer</phpsyntax><phpsyntax function="fstat" usage="int fstat(resource fp)">Stat() on a filehandle</phpsyntax><phpsyntax function="ftell" usage="int ftell(resource fp)">Get file pointer's read/write position</phpsyntax><phpsyntax function="ftruncate" usage="bool ftruncate(resource fp, int size)">Truncate file to 'size' length</phpsyntax><phpsyntax function="fwrite" usage="int fwrite(resource fp, string str [, int length])">Binary-safe file write</phpsyntax><phpsyntax function="get_meta_tags" usage="array get_meta_tags(string filename [, bool use_include_path])">Extracts all meta tag content attributes from a file and returns an array</phpsyntax><phpsyntax function="mkdir" usage="int mkdir(char *dir int mode)"/><phpsyntax function="mkdir" usage="bool mkdir(string pathname [, int mode [, bool recursive [, resource context]]])">Create a directory</phpsyntax><phpsyntax function="pclose" usage="int pclose(resource fp)">Close a file pointer opened by popen()</phpsyntax><phpsyntax function="popen" usage="resource popen(string command, string mode)">Execute a command and open either a read or a write pipe to it</phpsyntax><phpsyntax function="readfile" usage="int readfile(string filename [, bool use_include_path[, resource context]])">Output a file or a URL</phpsyntax><phpsyntax function="realpath" usage="string realpath(string path)">Return the resolved path</phpsyntax><phpsyntax function="rename" usage="bool rename(string old_name, string new_name[, resource context])">Rename a file</phpsyntax><phpsyntax function="rewind" usage="bool rewind(resource fp)">Rewind the position of a file pointer</phpsyntax><phpsyntax function="rmdir" usage="bool rmdir(string dirname[, resource context])">Remove a directory</phpsyntax><phpsyntax function="tempnam" usage="string tempnam(string dir, string prefix)">Create a unique filename in a directory</phpsyntax><phpsyntax function="tmpfile" usage="resource tmpfile(void)">Create a temporary file that will be deleted automatically after use</phpsyntax><phpsyntax function="umask" usage="int umask([int mask])">Return or change the umask</phpsyntax><phpsyntax function="unlink" usage="bool unlink(string filename[, context context])">Delete a file</phpsyntax><phpsyntax function="chgrp" usage="bool chgrp(string filename, mixed group)">Change file group</phpsyntax><phpsyntax function="chmod" usage="bool chmod(string filename, int mode)">Change file mode</phpsyntax><phpsyntax function="clearstatcache" usage="void clearstatcache(void)">Clear file stat cache</phpsyntax><phpsyntax function="disk_free_space" usage="float disk_free_space(string path)">Get free disk space for filesystem that path is on</phpsyntax><phpsyntax function="disk_total_space" usage="float disk_total_space(string path)">Get total disk space for filesystem that path is on</phpsyntax><phpsyntax function="file_exists" usage="bool file_exists(string filename)">Returns true if filename exists</phpsyntax><phpsyntax function="fileatime" usage="int fileatime(string filename)">Get last access time of file</phpsyntax><phpsyntax function="filectime" usage="int filectime(string filename)">Get inode modification time of file</phpsyntax><phpsyntax function="filegroup" usage="int filegroup(string filename)">Get file group</phpsyntax><phpsyntax function="fileinode" usage="int fileinode(string filename)">Get file inode</phpsyntax><phpsyntax function="filemtime" usage="int filemtime(string filename)">Get last modification time of file</phpsyntax><phpsyntax function="fileowner" usage="int fileowner(string filename)">Get file owner</phpsyntax><phpsyntax function="fileperms" usage="int fileperms(string filename)">Get file permissions</phpsyntax><phpsyntax function="filesize" usage="int filesize(string filename)">Get file size</phpsyntax><phpsyntax function="filetype" usage="string filetype(string filename)">Get file type</phpsyntax><phpsyntax function="is_dir" usage="bool is_dir(string filename)">Returns true if file is directory</phpsyntax><phpsyntax function="is_executable" usage="bool is_executable(string filename)">Returns true if file is executable</phpsyntax><phpsyntax function="is_file" usage="bool is_file(string filename)">Returns true if file is a regular file</phpsyntax><phpsyntax function="is_link" usage="bool is_link(string filename)">Returns true if file is symbolic link</phpsyntax><phpsyntax function="is_readable" usage="bool is_readable(string filename)">Returns true if file can be read</phpsyntax><phpsyntax function="is_writable" usage="bool is_writable(string filename)">Returns true if file can be written</phpsyntax><phpsyntax function="lstat" usage="array lstat(string filename)">Give information about a file or symbolic link</phpsyntax><phpsyntax function="stat" usage="array stat(string filename)">Give information about a file</phpsyntax><phpsyntax function="touch" usage="bool touch(string filename [, int time [, int atime]])">Set modification time of file</phpsyntax><phpsyntax function="fprintf" usage="int fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])">Output a formatted string into a stream</phpsyntax><phpsyntax function="printf" usage="int printf(string format [, mixed arg1 [, mixed ...]])">Output a formatted string</phpsyntax><phpsyntax function="sprintf" usage="string sprintf(string format [, mixed arg1 [, mixed ...]])">Return a formatted string</phpsyntax><phpsyntax function="vfprintf" usage="int vfprintf(resource stream, string format, array args)">Output a formatted string into a stream</phpsyntax><phpsyntax function="vprintf" usage="int vprintf(string format, array args)">Output a formatted string</phpsyntax><phpsyntax function="vsprintf" usage="string vsprintf(string format, array args)">Return a formatted string</phpsyntax><phpsyntax function="fsockopen" usage="resource fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])">Open Internet or Unix domain socket connection</phpsyntax><phpsyntax function="pfsockopen" usage="resource pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])">Open persistent Internet or Unix domain socket connection</phpsyntax><phpsyntax function="ftok" usage="int ftok(string pathname, string proj)">Convert a pathname and a project identifier to a System V IPC key</phpsyntax><phpsyntax function="header" usage="void header(string header [, bool replace, [int http_response_code]])">Sends a raw HTTP header</phpsyntax><phpsyntax function="headers_list" usage="string headers_list(void)">Return list of headers to be sent / already sent</phpsyntax><phpsyntax function="headers_sent" usage="bool headers_sent([string &amp;$file [, int &amp;$line]])">Returns true if headers have already been sent, false otherwise</phpsyntax><phpsyntax function="setcookie" usage="bool setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])">Send a cookie</phpsyntax><phpsyntax function="setrawcookie" usage="bool setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])">Send a cookie with no url encoding of the value</phpsyntax><phpsyntax function="get_html_translation_table" usage="array get_html_translation_table([int table [, int quote_style]])">Returns the internal translation table used by htmlspecialchars and htmlentities</phpsyntax><phpsyntax function="html_entity_decode" usage="string html_entity_decode(string string [, int quote_style][, string charset])">Convert all HTML entities to their applicable characters</phpsyntax><phpsyntax function="htmlentities" usage="string htmlentities(string string [, int quote_style][, string charset])">Convert all applicable characters to HTML entities</phpsyntax><phpsyntax function="htmlspecialchars" usage="string htmlspecialchars(string string [, int quote_style][, string charset])">Convert special characters to HTML entities</phpsyntax><phpsyntax function="http_build_query" usage="string http_build_query(mixed formdata [, string prefix])">Generates a form-encoded query string from an associative array or object.</phpsyntax><phpsyntax function="getimagesize" usage="array getimagesize(string imagefile [, array info])">Get the size of an image as 4-element array</phpsyntax><phpsyntax function="image_type_to_extension" usage="string image_type_to_extension(int imagetype [, bool include_dot])">Get file extension for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype</phpsyntax><phpsyntax function="image_type_to_mime_type" usage="string image_type_to_mime_type(int imagetype)">Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype</phpsyntax><phpsyntax function="php_egg_logo_guid" usage="string php_egg_logo_guid(void)">Return the special ID used to request the PHP logo in phpinfo screens</phpsyntax><phpsyntax function="php_ini_scanned_files" usage="string php_ini_scanned_files(void)">Return comma-separated string of .ini files parsed from the additional ini dir</phpsyntax><phpsyntax function="php_logo_guid" usage="string php_logo_guid(void)">Return the special ID used to request the PHP logo in phpinfo screens</phpsyntax><phpsyntax function="php_real_logo_guid" usage="string php_real_logo_guid(void)">Return the special ID used to request the PHP logo in phpinfo screens</phpsyntax><phpsyntax function="php_sapi_name" usage="string php_sapi_name(void)">Return the current SAPI module name</phpsyntax><phpsyntax function="php_uname" usage="string php_uname(void)">Return information about the system PHP was built on</phpsyntax><phpsyntax function="phpcredits" usage="void phpcredits([int flag])">Prints the list of people who've contributed to the PHP project</phpsyntax><phpsyntax function="phpinfo" usage="void phpinfo([int what])">Output a page of useful information about PHP and the current request</phpsyntax><phpsyntax function="phpversion" usage="string phpversion([string extension])">Return the current PHP version</phpsyntax><phpsyntax function="zend_logo_guid" usage="string zend_logo_guid(void)">Return the special ID used to request the Zend logo in phpinfo screens</phpsyntax><phpsyntax function="iptcembed" usage="array iptcembed(string iptcdata, string jpeg_file_name [, int spool])">Embed binary IPTC data into a JPEG image.</phpsyntax><phpsyntax function="iptcparse" usage="array iptcparse(string iptcdata)">Parse binary IPTC-data into associative array</phpsyntax><phpsyntax function="lcg_value" usage="float lcg_value()">Returns a value from the combined linear congruential generator</phpsyntax><phpsyntax function="levenshtein" usage="int levenshtein(string str1, string str2)">Calculate Levenshtein distance between two strings</phpsyntax><phpsyntax function="link" usage="int link(string target, string link)">Create a hard link</phpsyntax><phpsyntax function="linkinfo" usage="int linkinfo(string filename)">Returns the st_dev field of the UNIX C stat structure describing the link</phpsyntax><phpsyntax function="readlink" usage="string readlink(string filename)">Return the target of a symbolic link</phpsyntax><phpsyntax function="symlink" usage="int symlink(string target, string link)">Create a symbolic link</phpsyntax><phpsyntax function="ezmlm_hash" usage="int ezmlm_hash(string addr)">Calculate EZMLM list hash value.</phpsyntax><phpsyntax function="mail" usage="int mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])">Send an email message</phpsyntax><phpsyntax function="abs" usage="int abs(int number)">Return the absolute value of the number</phpsyntax><phpsyntax function="acos" usage="float acos(float number)">Return the arc cosine of the number in radians</phpsyntax><phpsyntax function="acosh" usage="float acosh(float number)">Returns the inverse hyperbolic cosine of the number, i.e. the value whose hyperbolic cosine is number</phpsyntax><phpsyntax function="asin" usage="float asin(float number)">Returns the arc sine of the number in radians</phpsyntax><phpsyntax function="asinh" usage="float asinh(float number)">Returns the inverse hyperbolic sine of the number, i.e. the value whose hyperbolic sine is number</phpsyntax><phpsyntax function="atan" usage="float atan(float number)">Returns the arc tangent of the number in radians</phpsyntax><phpsyntax function="atanh" usage="float atanh(float number)">Returns the inverse hyperbolic tangent of the number, i.e. the value whose hyperbolic tangent is number</phpsyntax><phpsyntax function="base_convert" usage="string base_convert(string number, int frombase, int tobase)">Converts a number in a string from any base &lt;= 36 to any base &lt;= 36</phpsyntax><phpsyntax function="bindec" usage="int bindec(string binary_number)">Returns the decimal equivalent of the binary number</phpsyntax><phpsyntax function="ceil" usage="float ceil(float number)">Returns the next highest integer value of the number</phpsyntax><phpsyntax function="cos" usage="float cos(float number)">Returns the cosine of the number in radians</phpsyntax><phpsyntax function="cosh" usage="float cosh(float number)">Returns the hyperbolic cosine of the number, defined as (exp(number)      exp(-number))/2</phpsyntax><phpsyntax function="decbin" usage="string decbin(int decimal_number)">Returns a string containing a binary representation of the number</phpsyntax><phpsyntax function="dechex" usage="string dechex(int decimal_number)">Returns a string containing a hexadecimal representation of the given number</phpsyntax><phpsyntax function="decoct" usage="string decoct(int decimal_number)">Returns a string containing an octal representation of the given number</phpsyntax><phpsyntax function="exp" usage="float exp(float number)">Returns e raised to the power of the number</phpsyntax><phpsyntax function="floor" usage="float floor(float number)">Returns the next lowest integer value from the number</phpsyntax><phpsyntax function="fmod" usage="float fmod(float x, float y)">Returns the remainder of dividing x by y as a float</phpsyntax><phpsyntax function="hexdec" usage="int hexdec(string hexadecimal_number)">Returns the decimal equivalent of the hexadecimal number</phpsyntax><phpsyntax function="hypot" usage="float hypot(float num1, float num2)">Returns sqrt(num1*num1      num2*num2)</phpsyntax><phpsyntax function="is_finite" usage="bool is_finite(float val)">Returns whether argument is finite</phpsyntax><phpsyntax function="is_infinite" usage="bool is_infinite(float val)">Returns whether argument is infinite</phpsyntax><phpsyntax function="is_nan" usage="bool is_nan(float val)">Returns whether argument is not a number</phpsyntax><phpsyntax function="log" usage="float log(float number, [float base])">Returns the natural logarithm of the number, or the base log if base is specified</phpsyntax><phpsyntax function="number_format" usage="string number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])">Formats a number with grouped thousands</phpsyntax><phpsyntax function="octdec" usage="int octdec(string octal_number)">Returns the decimal equivalent of an octal string</phpsyntax><phpsyntax function="pi" usage="float pi(void)">Returns an approximation of pi</phpsyntax><phpsyntax function="pow" usage="number pow(number base, number exponent)">Returns base raised to the power of exponent. Returns integer result when possible</phpsyntax><phpsyntax function="round" usage="float round(float number [, int precision])">Returns the number rounded to specified precision</phpsyntax><phpsyntax function="sin" usage="float sin(float number)">Returns the sine of the number in radians</phpsyntax><phpsyntax function="sinh" usage="float sinh(float number)">Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2</phpsyntax><phpsyntax function="sqrt" usage="float sqrt(float number)">Returns the square root of the number</phpsyntax><phpsyntax function="tan" usage="float tan(float number)">Returns the tangent of the number in radians</phpsyntax><phpsyntax function="tanh" usage="float tanh(float number)">Returns the hyperbolic tangent of the number, defined as sinh(number)/cosh(number)</phpsyntax><phpsyntax function="metaphone" usage="string metaphone(string text, int phones)">Break english phrases down into their phonemes</phpsyntax><phpsyntax function="getrusage" usage="array getrusage([int who])">Returns an array of usage statistics</phpsyntax><phpsyntax function="gettimeofday" usage="array gettimeofday(void)">Returns the current time as array</phpsyntax><phpsyntax function="microtime" usage="mixed microtime([bool get_as_float])">Returns either a string or a float containing the current time in seconds and microseconds</phpsyntax><phpsyntax function="pack" usage="string pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])">Takes one or more arguments and packs them into a binary string according to the format argument</phpsyntax><phpsyntax function="unpack" usage="array unpack(string format, string input)">Unpack binary string into named array elements according to format argument</phpsyntax><phpsyntax function="getlastmod" usage="int getlastmod(void)">Get time of last page modification</phpsyntax><phpsyntax function="getmygid" usage="int getmygid(void)">Get PHP script owner's GID</phpsyntax><phpsyntax function="getmyinode" usage="int getmyinode(void)">Get the inode of the current script being parsed</phpsyntax><phpsyntax function="getmypid" usage="int getmypid(void)">Get current process ID</phpsyntax><phpsyntax function="getmyuid" usage="int getmyuid(void)">Get PHP script owner's UID</phpsyntax><phpsyntax function="proc_close" usage="int proc_close(resource process)">close a process opened by proc_open</phpsyntax><phpsyntax function="proc_get_status" usage="array proc_get_status(resource process)">get information about a process opened by proc_open</phpsyntax><phpsyntax function="proc_open" usage="resource proc_open(string command, array descriptorspec, array &amp;pipes [, string cwd [, array env [, array other_options]]])">Run a process with more control over it's file descriptors</phpsyntax><phpsyntax function="proc_terminate" usage="int proc_terminate(resource process [, long signal])">kill a process opened by proc_open</phpsyntax><phpsyntax function="quoted_printable_decode" usage="string quoted_printable_decode(string str)">Convert a quoted-printable string to an 8 bit string</phpsyntax><phpsyntax function="getrandmax" usage="int getrandmax(void)">Returns the maximum value a random number can have</phpsyntax><phpsyntax function="mt_getrandmax" usage="int mt_getrandmax(void)">Returns the maximum value a random number from Mersenne Twister can have</phpsyntax><phpsyntax function="mt_rand" usage="int mt_rand([int min, int max])">Returns a random number from Mersenne Twister</phpsyntax><phpsyntax function="mt_srand" usage="void mt_srand([int seed])">Seeds Mersenne Twister random number generator</phpsyntax><phpsyntax function="rand" usage="int rand([int min, int max])">Returns a random number</phpsyntax><phpsyntax function="srand" usage="void srand([int seed])">Seeds random number generator</phpsyntax><phpsyntax function="ereg" usage="int ereg(string pattern, string string [, array registers])">Regular expression match</phpsyntax><phpsyntax function="ereg_replace" usage="string ereg_replace(string pattern, string replacement, string string)">Replace regular expression</phpsyntax><phpsyntax function="eregi" usage="int eregi(string pattern, string string [, array registers])">Case-insensitive regular expression match</phpsyntax><phpsyntax function="eregi_replace" usage="string eregi_replace(string pattern, string replacement, string string)">Case insensitive replace regular expression</phpsyntax><phpsyntax function="split" usage="array split(string pattern, string string [, int limit])">Split string into array by regular expression</phpsyntax><phpsyntax function="spliti" usage="array spliti(string pattern, string string [, int limit])">Split string into array by regular expression case-insensitive</phpsyntax><phpsyntax function="sql_regcase" usage="string sql_regcase(string string)">Make regular expression for case insensitive match</phpsyntax><phpsyntax function="soundex" usage="string soundex(string str)">Calculate the soundex key of a string</phpsyntax><phpsyntax function="set_socket_blocking" usage="bool set_socket_blocking(resource socket, int mode)">Set blocking/non-blocking mode on a socket</phpsyntax><phpsyntax function="stream_context_create" usage="resource stream_context_create([array options])">Create a file context and optionally set parameters</phpsyntax><phpsyntax function="stream_context_get_options" usage="array stream_context_get_options(resource context|resource stream)">Retrieve options for a stream/wrapper/context</phpsyntax><phpsyntax function="stream_context_set_option" usage="bool stream_context_set_option(resource context|resource stream, string wrappername, string optionname, mixed value)">Set an option for a wrapper</phpsyntax><phpsyntax function="stream_context_set_params" usage="bool stream_context_set_params(resource context|resource stream, array options)">Set parameters for a file context</phpsyntax><phpsyntax function="stream_copy_to_stream" usage="long stream_copy_to_stream(resource source, resource dest [, long maxlen ])">Reads up to maxlen bytes from source stream and writes them to dest stream.</phpsyntax><phpsyntax function="stream_filter_append" usage="bool stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])">Append a filter to a stream</phpsyntax><phpsyntax function="stream_filter_prepend" usage="bool stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])">Prepend a filter to a stream</phpsyntax><phpsyntax function="stream_get_contents" usage="long stream_get_contents(resource source [, long maxlen ])">Reads all remaining bytes (or up to maxlen bytes) from a stream and returns them as a string.</phpsyntax><phpsyntax function="stream_get_line" usage="string stream_get_line(resource stream, int maxlen, string ending)">Read up to maxlen bytes from a stream or until the ending string is found</phpsyntax><phpsyntax function="stream_get_meta_data" usage="resource stream_get_meta_data(resource fp)">Retrieves header/meta data from streams/file pointers</phpsyntax><phpsyntax function="stream_get_transports" usage="array stream_get_transports()">Retrieves list of registered socket transports</phpsyntax><phpsyntax function="stream_get_wrappers" usage="array stream_get_wrappers()">Retrieves list of registered stream wrappers</phpsyntax><phpsyntax function="stream_select" usage="int stream_select(array &amp;read_streams, array &amp;write_streams, array &amp;except_streams, int tv_sec[, int tv_usec])">Runs the select() system call on the sets of streams with a timeout specified by tv_sec and tv_usec</phpsyntax><phpsyntax function="stream_set_blocking" usage="bool stream_set_blocking(resource socket, int mode)">Set blocking/non-blocking mode on a socket or stream</phpsyntax><phpsyntax function="stream_set_timeout" usage="bool stream_set_timeout(resource stream, int seconds, int microseconds)">Set timeout on stream read to seconds      microseonds</phpsyntax><phpsyntax function="stream_set_write_buffer" usage="int stream_set_write_buffer(resource fp, int buffer)">Set file write buffer</phpsyntax><phpsyntax function="stream_socket_accept" usage="resource stream_socket_accept(resource serverstream, [ double timeout, string &amp;peername ])">Accept a client connection from a server socket</phpsyntax><phpsyntax function="stream_socket_client" usage="resource stream_socket_client(string remoteaddress [, long &amp;errcode, string &amp;errstring, double timeout, long flags, resource context])">Open a client connection to a remote address</phpsyntax><phpsyntax function="stream_socket_get_name" usage="string stream_socket_get_name(resource stream, bool want_peer)">Returns either the locally bound or remote name for a socket stream</phpsyntax><phpsyntax function="stream_socket_recvfrom" usage="string stream_socket_recvfrom(resource stream, long amount [, long flags [, string &amp;remote_addr]])">Receives data from a socket stream</phpsyntax><phpsyntax function="stream_socket_sendto" usage="long stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])">Send data to a socket stream.  If target_addr is specified it must be in dotted quad (or [ipv6]) format</phpsyntax><phpsyntax function="stream_socket_server" usage="resource stream_socket_server(string localaddress [, long &amp;errcode, string &amp;errstring, long flags, resource context])">Create a server socket bound to localaddress</phpsyntax><phpsyntax function="addcslashes" usage="string addcslashes(string str, string charlist)">Escapes all chars mentioned in charlist with backslash. It creates octal representations if asked to backslash characters with 8th bit set or with ASCII&lt;32 (except '\n', '\r', '\t' etc...)</phpsyntax><phpsyntax function="addslashes" usage="string addslashes(string str)">Escapes single quote, double quotes and backslash characters in a string with backslashes</phpsyntax><phpsyntax function="basename" usage="string basename(string path [, string suffix])">Returns the filename component of the path</phpsyntax><phpsyntax function="chr" usage="string chr(int ascii)">Converts ASCII code to a character</phpsyntax><phpsyntax function="chunk_split" usage="string chunk_split(string str [, int chunklen [, string ending]])">Returns split line</phpsyntax><phpsyntax function="count_chars" usage="mixed count_chars(string input [, int mode])">Returns info about what characters are used in input</phpsyntax><phpsyntax function="dirname" usage="string dirname(string path)">Returns the directory name component of the path</phpsyntax><phpsyntax function="explode" usage="array explode(string separator, string str [, int limit])">Splits a string on string separator and return array of components</phpsyntax><phpsyntax function="hebrev" usage="string hebrev(string str [, int max_chars_per_line])">Converts logical Hebrew text to visual text</phpsyntax><phpsyntax function="hebrevc" usage="string hebrevc(string str [, int max_chars_per_line])">Converts logical Hebrew text to visual text with newline conversion</phpsyntax><phpsyntax function="implode" usage="string implode([string glue,] array pieces)">Joins array elements placing glue string between items and return one string</phpsyntax><phpsyntax function="join" usage="string join(array src, string glue)">An alias for implode</phpsyntax><phpsyntax function="localeconv" usage="array localeconv(void)">Returns numeric formatting information based on the current locale</phpsyntax><phpsyntax function="ltrim" usage="string ltrim(string str [, string character_mask])">Strips whitespace from the beginning of a string</phpsyntax><phpsyntax function="money_format" usage="string money_format(string format , float value)">Convert monetary value(s) to string</phpsyntax><phpsyntax function="nl_langinfo" usage="string nl_langinfo(int item)">Query language and locale information</phpsyntax><phpsyntax function="ord" usage="int ord(string character)">Returns ASCII value of character</phpsyntax><phpsyntax function="parse_str" usage="void parse_str(string encoded_string [, array result])">Parses GET/POST/COOKIE data and sets global variables</phpsyntax><phpsyntax function="pathinfo" usage="array pathinfo(string path)">Returns information about a certain string</phpsyntax><phpsyntax function="quotemeta" usage="string quotemeta(string str)">Quotes meta characters</phpsyntax><phpsyntax function="rtrim" usage="string rtrim(string str [, string character_mask])">Removes trailing whitespace</phpsyntax><phpsyntax function="setlocale" usage="string setlocale(mixed category, string locale [, string ...])">Set locale information</phpsyntax><phpsyntax function="similar_text" usage="int similar_text(string str1, string str2 [, float percent])">Calculates the similarity between two strings</phpsyntax><phpsyntax function="sscanf" usage="mixed sscanf(string str, string format [, string ...])">Implements an ANSI C compatible sscanf</phpsyntax><phpsyntax function="str_ireplace" usage="mixed str_ireplace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])">Replaces all occurrences of search in haystack with replace / case-insensitive</phpsyntax><phpsyntax function="str_pad" usage="string str_pad(string input, int pad_length [, string pad_string [, int pad_type]])">Returns input string padded on the left or right to specified length with pad_string</phpsyntax><phpsyntax function="str_repeat" usage="string str_repeat(string input, int mult)">Returns the input string repeat mult times</phpsyntax><phpsyntax function="str_replace" usage="mixed str_replace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])">Replaces all occurrences of search in haystack with replace</phpsyntax><phpsyntax function="str_shuffle" usage="void str_shuffle(string str)">Shuffles string. One permutation of all possible is created</phpsyntax><phpsyntax function="str_split" usage="array str_split(string str [, int split_length])">Convert a string to an array. If split_length is specified, break the string down into chunks each split_length characters long.</phpsyntax><phpsyntax function="str_word_count" usage="mixed str_word_count(string str, [int format])">Counts the number of words inside a string. If format of 1 is specified,     	then the function will return an array containing all the words     	found inside the string. If format of 2 is specified, then the function     	will return an associated array where the position of the word is the key     	and the word itself is the value.     	     	For the purpose of this function, 'word' is defined as a locale dependent     	string containing alphabetic characters, which also may contain, but not start     	with "'" and "-" characters.</phpsyntax><phpsyntax function="strchr" usage="string strchr(string haystack, string needle)">An alias for strstr</phpsyntax><phpsyntax function="strcoll" usage="int strcoll(string str1, string str2)">Compares two strings using the current locale</phpsyntax><phpsyntax function="strcspn" usage="int strcspn(string str, string mask [, start [, len]])">Finds length of initial segment consisting entirely of characters not found in mask. If start or/and length is provide works like strcspn(substr($s,$start,$len),$bad_chars)</phpsyntax><phpsyntax function="strip_tags" usage="string strip_tags(string str [, string allowable_tags])">Strips HTML and PHP tags from a string</phpsyntax><phpsyntax function="stripcslashes" usage="string stripcslashes(string str)">Strips backslashes from a string. Uses C-style conventions</phpsyntax><phpsyntax function="stripos" usage="int stripos(string haystack, string needle [, int offset])">Finds position of first occurrence of a string within another, case insensitive</phpsyntax><phpsyntax function="stripslashes" usage="string stripslashes(string str)">Strips backslashes from a string</phpsyntax><phpsyntax function="stristr" usage="string stristr(string haystack, string needle)">Finds first occurrence of a string within another, case insensitive</phpsyntax><phpsyntax function="strnatcasecmp" usage="int strnatcasecmp(string s1, string s2)">Returns the result of case-insensitive string comparison using 'natural' algorithm</phpsyntax><phpsyntax function="strnatcmp" usage="int strnatcmp(string s1, string s2)">Returns the result of string comparison using 'natural' algorithm</phpsyntax><phpsyntax function="strpbrk" usage="array strpbrk(string haystack, string char_list)">Search a string for any of a set of characters</phpsyntax><phpsyntax function="strpos" usage="int strpos(string haystack, string needle [, int offset])">Finds position of first occurrence of a string within another</phpsyntax><phpsyntax function="strrchr" usage="string strrchr(string haystack, string needle)">Finds the last occurrence of a character in a string within another</phpsyntax><phpsyntax function="strrev" usage="string strrev(string str)">Reverse a string</phpsyntax><phpsyntax function="strripos" usage="int strripos(string haystack, string needle [, int offset])">Finds position of last occurrence of a string within another string</phpsyntax><phpsyntax function="strrpos" usage="int strrpos(string haystack, string needle [, int offset])">Finds position of last occurrence of a string within another string</phpsyntax><phpsyntax function="strspn" usage="int strspn(string str, string mask [, start [, len]])">Finds length of initial segment consisting entirely of characters found in mask. If start or/and length is provided works like strspn(substr($s,$start,$len),$good_chars)</phpsyntax><phpsyntax function="strstr" usage="string strstr(string haystack, string needle)">Finds first occurrence of a string within another</phpsyntax><phpsyntax function="strtok" usage="string strtok([string str,] string token)">Tokenize a string</phpsyntax><phpsyntax function="strtolower" usage="string strtolower(string str)">Makes a string lowercase</phpsyntax><phpsyntax function="strtoupper" usage="string strtoupper(string str)">Makes a string uppercase</phpsyntax><phpsyntax function="strtr" usage="string strtr(string str, string from, string to)">Translates characters in str using given translation tables</phpsyntax><phpsyntax function="substr" usage="string substr(string str, int start [, int length])">Returns part of a string</phpsyntax><phpsyntax function="substr_compare" usage="int substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])">Binary safe optionally case insensitive comparison of 2 strings from an offset, up to length characters</phpsyntax><phpsyntax function="substr_count" usage="int substr_count(string haystack, string needle)">Returns the number of times a substring occurs in the string</phpsyntax><phpsyntax function="substr_replace" usage="mixed substr_replace(mixed str, mixed repl, mixed start [, mixed length])">Replaces part of a string with another string</phpsyntax><phpsyntax function="trim" usage="string trim(string str [, string character_mask])">Strips whitespace from the beginning and end of a string</phpsyntax><phpsyntax function="ucfirst" usage="string ucfirst(string str)">Makes a string's first character uppercase</phpsyntax><phpsyntax function="ucwords" usage="string ucwords(string str)">Uppercase the first character of every word in a string</phpsyntax><phpsyntax function="wordwrap" usage="string wordwrap(string str [, int width [, string break [, boolean cut]]])">Wraps buffer to selected number of characters using string break char</phpsyntax><phpsyntax function="date_sunrise" usage="mixed date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])">Returns time of sunrise for a given day &amp; location</phpsyntax><phpsyntax function="date_sunset" usage="mixed date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])">Returns time of sunset for a given day &amp; location</phpsyntax><phpsyntax function="closelog" usage="bool closelog(void)">Close connection to system logger</phpsyntax><phpsyntax function="define_syslog_variables" usage="void define_syslog_variables(void)">Initializes all syslog-related variables</phpsyntax><phpsyntax function="openlog" usage="bool openlog(string ident, int option, int facility)">Open connection to system logger</phpsyntax><phpsyntax function="syslog" usage="bool syslog(int priority, string message)">Generate a system log message</phpsyntax><phpsyntax function="floatval" usage="float floatval(mixed var)">Get the float value of a variable</phpsyntax><phpsyntax function="gettype" usage="string gettype(mixed var)">Returns the type of the variable</phpsyntax><phpsyntax function="intval" usage="int intval(mixed var [, int base])">Get the integer value of a variable using the optional base for the conversion</phpsyntax><phpsyntax function="is_array" usage="bool is_array(mixed var)">Returns true if variable is an array</phpsyntax><phpsyntax function="is_bool" usage="bool is_bool(mixed var)">Returns true if variable is a boolean</phpsyntax><phpsyntax function="is_callable" usage="bool is_callable(mixed var [, bool syntax_only [, string callable_name]])">Returns true if var is callable.</phpsyntax><phpsyntax function="is_float" usage="bool is_float(mixed var)">Returns true if variable is float point</phpsyntax><phpsyntax function="is_long" usage="bool is_long(mixed var)">Returns true if variable is a long (integer)</phpsyntax><phpsyntax function="is_null" usage="bool is_null(mixed var)">Returns true if variable is null</phpsyntax><phpsyntax function="is_numeric" usage="bool is_numeric(mixed value)">Returns true if value is a number or a numeric string</phpsyntax><phpsyntax function="is_object" usage="bool is_object(mixed var)">Returns true if variable is an object</phpsyntax><phpsyntax function="is_resource" usage="bool is_resource(mixed var)">Returns true if variable is a resource</phpsyntax><phpsyntax function="is_scalar" usage="bool is_scalar(mixed value)">Returns true if value is a scalar</phpsyntax><phpsyntax function="is_string" usage="bool is_string(mixed var)">Returns true if variable is a string</phpsyntax><phpsyntax function="settype" usage="bool settype(mixed var, string type)">Set the type of the variable</phpsyntax><phpsyntax function="strval" usage="string strval(mixed var)">Get the string value of a variable</phpsyntax><phpsyntax function="uniqid" usage="string uniqid([string prefix , bool more_entropy])">Generates a unique ID</phpsyntax><phpsyntax function="get_headers" usage="array get_headers(string url)">fetches all the headers sent by the server in response to a HTTP request</phpsyntax><phpsyntax function="parse_url" usage="array parse_url(string url)">Parse a URL and return its components</phpsyntax><phpsyntax function="rawurldecode" usage="string rawurldecode(string str)">Decodes URL-encodes string</phpsyntax><phpsyntax function="rawurlencode" usage="string rawurlencode(string str)">URL-encodes string</phpsyntax><phpsyntax function="urldecode" usage="string urldecode(string str)">Decodes URL-encoded string</phpsyntax><phpsyntax function="urlencode" usage="string urlencode(string str)">URL-encodes string</phpsyntax><phpsyntax function="stream_bucket_append" usage="void stream_bucket_append(resource brigade, resource bucket)">Append bucket to brigade</phpsyntax><phpsyntax function="stream_bucket_make_writeable" usage="object stream_bucket_make_writeable(resource brigade)">Return a bucket object from the brigade for operating on</phpsyntax><phpsyntax function="stream_bucket_new" usage="resource stream_bucket_new(resource stream, string buffer)">Create a new bucket for use on the current stream</phpsyntax><phpsyntax function="stream_bucket_prepend" usage="void stream_bucket_prepend(resource brigade, resource bucket)">Prepend bucket to brigade</phpsyntax><phpsyntax function="stream_filter_register" usage="bool stream_filter_register(string filtername, string classname)">Registers a custom filter handler class</phpsyntax><phpsyntax function="stream_get_filters" usage="array stream_get_filters(void)">Returns a list of registered filters</phpsyntax><phpsyntax function="uudecode" usage="string uudecode(string data)">decode a uuencoded string</phpsyntax><phpsyntax function="uuencode" usage="string uuencode(string data)">uuencode a string</phpsyntax><phpsyntax function="debug_zval_dump" usage="void debug_zval_dump(mixed var)">Dumps a string representation of an internal zend value to output.</phpsyntax><phpsyntax function="memory_get_usage" usage="int memory_get_usage()">Returns the allocated by PHP memory</phpsyntax><phpsyntax function="serialize" usage="string serialize(mixed variable)">Returns a string representation of variable (which can later be unserialized)</phpsyntax><phpsyntax function="unserialize" usage="mixed unserialize(string variable_representation)">Takes a string representation of variable and recreates it</phpsyntax><phpsyntax function="var_dump" usage="void var_dump(mixed var)">Dumps a string representation of variable to output</phpsyntax><phpsyntax function="var_export" usage="mixed var_export(mixed var [, bool return])">Outputs or returns a string representation of a variable</phpsyntax><phpsyntax function="version_compare" usage="int version_compare(string ver1, string ver2 [, string oper])">Compares two "PHP-standardized" version number strings</phpsyntax><phpsyntax function="sybase_affected_rows" usage="int sybase_affected_rows([int link_id])">Get number of affected rows in last query</phpsyntax><phpsyntax function="sybase_close" usage="bool sybase_close([int link_id])">Close Sybase connection</phpsyntax><phpsyntax function="sybase_connect" usage="int sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open Sybase server connection</phpsyntax><phpsyntax function="sybase_data_seek" usage="bool sybase_data_seek(int result, int offset)">Move internal row pointer</phpsyntax><phpsyntax function="sybase_fetch_array" usage="array sybase_fetch_array(int result)">Fetch row as array</phpsyntax><phpsyntax function="sybase_fetch_field" usage="object sybase_fetch_field(int result [, int offset])">Get field information</phpsyntax><phpsyntax function="sybase_fetch_object" usage="object sybase_fetch_object(int result)">Fetch row as object</phpsyntax><phpsyntax function="sybase_fetch_row" usage="array sybase_fetch_row(int result)">Get row as enumerated array</phpsyntax><phpsyntax function="sybase_field_seek" usage="bool sybase_field_seek(int result, int offset)">Set field offset</phpsyntax><phpsyntax function="sybase_free_result" usage="bool sybase_free_result(int result)">Free result memory</phpsyntax><phpsyntax function="sybase_get_last_message" usage="string sybase_get_last_message(void)">Returns the last message from server (over min_message_severity)</phpsyntax><phpsyntax function="sybase_min_error_severity" usage="void sybase_min_error_severity(int severity)">Sets the minimum error severity</phpsyntax><phpsyntax function="sybase_min_message_severity" usage="void sybase_min_message_severity(int severity)">Sets the minimum message severity</phpsyntax><phpsyntax function="sybase_num_fields" usage="int sybase_num_fields(int result)">Get number of fields in result</phpsyntax><phpsyntax function="sybase_num_rows" usage="int sybase_num_rows(int result)">Get number of rows in result</phpsyntax><phpsyntax function="sybase_pconnect" usage="int sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open persistent Sybase connection</phpsyntax><phpsyntax function="sybase_query" usage="int sybase_query(string query [, int link_id])">Send Sybase query</phpsyntax><phpsyntax function="sybase_result" usage="string sybase_result(int result, int row, mixed field)">Get result data</phpsyntax><phpsyntax function="sybase_select_db" usage="bool sybase_select_db(string database [, int link_id])">Select Sybase database</phpsyntax><phpsyntax function="sybase_affected_rows" usage="int sybase_affected_rows([int link_id])">Get number of affected rows in last query</phpsyntax><phpsyntax function="sybase_close" usage="bool sybase_close([int link_id])">Close Sybase connection</phpsyntax><phpsyntax function="sybase_connect" usage="int sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open Sybase server connection</phpsyntax><phpsyntax function="sybase_data_seek" usage="bool sybase_data_seek(int result, int offset)">Move internal row pointer</phpsyntax><phpsyntax function="sybase_deadlock_retry_count" usage="void sybase_deadlock_retry_count(int retry_count)">Sets deadlock retry count</phpsyntax><phpsyntax function="sybase_fetch_array" usage="array sybase_fetch_array(int result)">Fetch row as array</phpsyntax><phpsyntax function="sybase_fetch_assoc" usage="array sybase_fetch_assoc(int result)">Fetch row as array without numberic indices</phpsyntax><phpsyntax function="sybase_fetch_field" usage="object sybase_fetch_field(int result [, int offset])">Get field information</phpsyntax><phpsyntax function="sybase_fetch_object" usage="object sybase_fetch_object(int result [, mixed object])">Fetch row as object</phpsyntax><phpsyntax function="sybase_fetch_row" usage="array sybase_fetch_row(int result)">Get row as enumerated array</phpsyntax><phpsyntax function="sybase_field_seek" usage="bool sybase_field_seek(int result, int offset)">Set field offset</phpsyntax><phpsyntax function="sybase_free_result" usage="bool sybase_free_result(int result)">Free result memory</phpsyntax><phpsyntax function="sybase_get_last_message" usage="string sybase_get_last_message(void)">Returns the last message from server (over min_message_severity)</phpsyntax><phpsyntax function="sybase_min_client_severity" usage="void sybase_min_client_severity(int severity)">Sets minimum client severity</phpsyntax><phpsyntax function="sybase_min_server_severity" usage="void sybase_min_server_severity(int severity)">Sets minimum server severity</phpsyntax><phpsyntax function="sybase_num_fields" usage="int sybase_num_fields(int result)">Get number of fields in result</phpsyntax><phpsyntax function="sybase_num_rows" usage="int sybase_num_rows(int result)">Get number of rows in result</phpsyntax><phpsyntax function="sybase_pconnect" usage="int sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open persistent Sybase connection</phpsyntax><phpsyntax function="sybase_query" usage="int sybase_query(string query [, int link_id])">Send Sybase query</phpsyntax><phpsyntax function="sybase_result" usage="string sybase_result(int result, int row, mixed field)">Get result data</phpsyntax><phpsyntax function="sybase_select_db" usage="bool sybase_select_db(string database [, int link_id])">Select Sybase database</phpsyntax><phpsyntax function="sybase_set_message_handler" usage="bool sybase_set_message_handler(mixed error_func [, resource connection])">Set the error handler, to be called when a server message is raised.      If error_func is NULL the handler will be deleted</phpsyntax><phpsyntax function="sybase_unbuffered_query" usage="int sybase_unbuffered_query(string query [, int link_id])">Send Sybase query</phpsyntax><phpsyntax function="msg_get_queue" usage="resource msg_get_queue(int key [, int perms])">Attach to a message queue</phpsyntax><phpsyntax function="msg_receive" usage="mixed msg_receive(resource queue, int desiredmsgtype, int &amp;msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])">Send a message of type msgtype (must be &gt; 0) to a message queue</phpsyntax><phpsyntax function="msg_remove_queue" usage="bool msg_remove_queue(resource queue)">Destroy the queue</phpsyntax><phpsyntax function="msg_send" usage="bool msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])">Send a message of type msgtype (must be &gt; 0) to a message queue</phpsyntax><phpsyntax function="msg_set_queue" usage="bool msg_set_queue(resource queue, array data)">Set information for a message queue</phpsyntax><phpsyntax function="msg_stat_queue" usage="array msg_stat_queue(resource queue)">Returns information about a message queue</phpsyntax><phpsyntax function="sem_acquire" usage="bool sem_acquire(resource id)">Acquires the semaphore with the given id, blocking if necessary</phpsyntax><phpsyntax function="sem_get" usage="resource sem_get(int key [, int max_acquire [, int perm [, int auto_release]])">Return an id for the semaphore with the given key, and allow max_acquire (default 1) processes to acquire it simultaneously</phpsyntax><phpsyntax function="sem_release" usage="bool sem_release(resource id)">Releases the semaphore with the given id</phpsyntax><phpsyntax function="sem_remove" usage="bool sem_remove(resource id)">Removes semaphore from Unix systems</phpsyntax><phpsyntax function="shm_attach" usage="int shm_attach(int key [, int memsize [, int perm]])">Creates or open a shared memory segment</phpsyntax><phpsyntax function="shm_detach" usage="bool shm_detach(int shm_identifier)">Disconnects from shared memory segment</phpsyntax><phpsyntax function="shm_get_var" usage="mixed shm_get_var(int id, int variable_key)">Returns a variable from shared memory</phpsyntax><phpsyntax function="shm_put_var" usage="bool shm_put_var(int shm_identifier, int variable_key, mixed variable)">Inserts or updates a variable in shared memory</phpsyntax><phpsyntax function="shm_remove" usage="bool shm_remove(int shm_identifier)">Removes shared memory from Unix systems</phpsyntax><phpsyntax function="shm_remove_var" usage="bool shm_remove_var(int id, int variable_key)">Removes variable from shared memory</phpsyntax><phpsyntax function="tidy_access_count" usage="int tidy_access_count()">Returns the Number of Tidy accessibility warnings encountered for specified document.</phpsyntax><phpsyntax function="tidy_clean_repair" usage="boolean tidy_clean_repair()">Execute configured cleanup and repair operations on parsed markup</phpsyntax><phpsyntax function="tidy_config_count" usage="int tidy_config_count()">Returns the Number of Tidy configuration errors encountered for specified document.</phpsyntax><phpsyntax function="tidy_diagnose" usage="boolean tidy_diagnose()">Run configured diagnostics on parsed and repaired markup.</phpsyntax><phpsyntax function="tidy_error_count" usage="int tidy_error_count()">Returns the Number of Tidy errors encountered for specified document.</phpsyntax><phpsyntax function="tidy_get_body" usage="TidyNode tidy_get_body(resource tidy)">Returns a TidyNode Object starting from the &lt;BODY&gt; tag of the tidy parse tree</phpsyntax><phpsyntax function="tidy_get_config" usage="array tidy_get_config()">Get current Tidy configuarion</phpsyntax><phpsyntax function="tidy_get_error_buffer" usage="string tidy_get_error_buffer([boolean detailed])">Return warnings and errors which occured parsing the specified document</phpsyntax><phpsyntax function="tidy_get_head" usage="TidyNode tidy_get_head()">Returns a TidyNode Object starting from the &lt;HEAD&gt; tag of the tidy parse tree</phpsyntax><phpsyntax function="tidy_get_html" usage="TidyNode tidy_get_html()">Returns a TidyNode Object starting from the &lt;HTML&gt; tag of the tidy parse tree</phpsyntax><phpsyntax function="tidy_get_html_ver" usage="int tidy_get_html_ver()">Get the Detected HTML version for the specified document.</phpsyntax><phpsyntax function="tidy_get_output" usage="string tidy_get_output()">Return a string representing the parsed tidy markup</phpsyntax><phpsyntax function="tidy_get_release" usage="string tidy_get_release()">Get release date (version) for Tidy library</phpsyntax><phpsyntax function="tidy_get_root" usage="TidyNode tidy_get_root()">Returns a TidyNode Object representing the root of the tidy parse tree</phpsyntax><phpsyntax function="tidy_get_status" usage="int tidy_get_status()">Get status of specfied document.</phpsyntax><phpsyntax function="tidy_getopt" usage="mixed tidy_getopt(string option)">Returns the value of the specified configuration option for the tidy document.</phpsyntax><phpsyntax function="tidy_is_xhtml" usage="boolean tidy_is_xhtml()">Indicates if the document is a XHTML document.</phpsyntax><phpsyntax function="tidy_is_xhtml" usage="boolean tidy_is_xhtml()">Indicates if the document is a generic (non HTML/XHTML) XML document.</phpsyntax><phpsyntax function="tidy_parse_file" usage="boolean tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])">Parse markup in file or URI</phpsyntax><phpsyntax function="tidy_parse_string" usage="bool tidy_parse_string(string input [, mixed config_options [, string encoding]])">Parse a document stored in a string</phpsyntax><phpsyntax function="tidy_repair_file" usage="boolean tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])">Repair a file using an optionally provided configuration file</phpsyntax><phpsyntax function="tidy_repair_string" usage="boolean tidy_repair_string(string data [, mixed config_file [, string encoding]])">Repair a string using an optionally provided configuration file</phpsyntax><phpsyntax function="tidy_warning_count" usage="int tidy_warning_count()">Returns the Number of Tidy warnings encountered for specified document.</phpsyntax><phpsyntax function="token_get_all" usage="array token_get_all(string source)"/><phpsyntax function="token_name" usage="string token_name(int type)"/><phpsyntax function="wddx_add_vars" usage="int wddx_add_vars(int packet_id,  mixed var_names [, mixed ...])">Serializes given variables and adds them to packet given by packet_id</phpsyntax><phpsyntax function="wddx_deserialize" usage="mixed wddx_deserialize(mixed packet)">Deserializes given packet and returns a PHP value</phpsyntax><phpsyntax function="wddx_packet_end" usage="string wddx_packet_end(int packet_id)">Ends specified WDDX packet and returns the string containing the packet</phpsyntax><phpsyntax function="wddx_packet_start" usage="int wddx_packet_start([string comment])">Starts a WDDX packet with optional comment and returns the packet id</phpsyntax><phpsyntax function="wddx_serialize_value" usage="string wddx_serialize_value(mixed var [, string comment])">Creates a new packet and serializes the given value</phpsyntax><phpsyntax function="wddx_serialize_vars" usage="string wddx_serialize_vars(mixed var_name [, mixed ...])">Creates a new packet and serializes given variables into a struct</phpsyntax><phpsyntax function="xml_error_string" usage="string xml_error_string(int code)">Get XML parser error string</phpsyntax><phpsyntax function="xml_get_current_byte_index" usage="int xml_get_current_byte_index(resource parser)">Get current byte index for an XML parser</phpsyntax><phpsyntax function="xml_get_current_column_number" usage="int xml_get_current_column_number(resource parser)">Get current column number for an XML parser</phpsyntax><phpsyntax function="xml_get_current_line_number" usage="int xml_get_current_line_number(resource parser)">Get current line number for an XML parser</phpsyntax><phpsyntax function="xml_get_error_code" usage="int xml_get_error_code(resource parser)">Get XML parser error code</phpsyntax><phpsyntax function="xml_parse" usage="int xml_parse(resource parser, string data [, int isFinal])">Start parsing an XML document</phpsyntax><phpsyntax function="xml_parse_into_struct" usage="int xml_parse_into_struct(resource parser, string data, array &amp;struct, array &amp;index)">Parsing a XML document</phpsyntax><phpsyntax function="xml_parser_create" usage="resource xml_parser_create([string encoding])">Create an XML parser</phpsyntax><phpsyntax function="xml_parser_create_ns" usage="resource xml_parser_create_ns([string encoding [, string sep]])">Create an XML parser</phpsyntax><phpsyntax function="xml_parser_free" usage="int xml_parser_free(resource parser)">Free an XML parser</phpsyntax><phpsyntax function="xml_parser_get_option" usage="int xml_parser_get_option(resource parser, int option)">Get options from an XML parser</phpsyntax><phpsyntax function="xml_parser_set_option" usage="int xml_parser_set_option(resource parser, int option, mixed value)">Set options in an XML parser</phpsyntax><phpsyntax function="xml_set_character_data_handler" usage="int xml_set_character_data_handler(resource parser, string hdl)">Set up character data handler</phpsyntax><phpsyntax function="xml_set_default_handler" usage="int xml_set_default_handler(resource parser, string hdl)">Set up default handler</phpsyntax><phpsyntax function="xml_set_element_handler" usage="int xml_set_element_handler(resource parser, string shdl, string ehdl)">Set up start and end element handlers</phpsyntax><phpsyntax function="xml_set_end_namespace_decl_handler" usage="int xml_set_end_namespace_decl_handler(resource parser, string hdl)">Set up character data handler</phpsyntax><phpsyntax function="xml_set_external_entity_ref_handler" usage="int xml_set_external_entity_ref_handler(resource parser, string hdl)">Set up external entity reference handler</phpsyntax><phpsyntax function="xml_set_notation_decl_handler" usage="int xml_set_notation_decl_handler(resource parser, string hdl)">Set up notation declaration handler</phpsyntax><phpsyntax function="xml_set_object" usage="int xml_set_object(resource parser, object &amp;obj)">Set up object which should be used for callbacks</phpsyntax><phpsyntax function="xml_set_processing_instruction_handler" usage="int xml_set_processing_instruction_handler(resource parser, string hdl)">Set up processing instruction (PI) handler</phpsyntax><phpsyntax function="xml_set_start_namespace_decl_handler" usage="int xml_set_start_namespace_decl_handler(resource parser, string hdl)">Set up character data handler</phpsyntax><phpsyntax function="xml_set_unparsed_entity_decl_handler" usage="int xml_set_unparsed_entity_decl_handler(resource parser, string hdl)">Set up unparsed entity declaration handler</phpsyntax><phpsyntax function="xmlrpc_decode" usage="array xmlrpc_decode(string xml [, string encoding])">Decodes XML into native PHP types</phpsyntax><phpsyntax function="xmlrpc_decode_request" usage="array xmlrpc_decode_request(string xml, string&amp; method [, string encoding])">Decodes XML into native PHP types</phpsyntax><phpsyntax function="xmlrpc_encode" usage="string xmlrpc_encode(mixed value)">Generates XML for a PHP value</phpsyntax><phpsyntax function="xmlrpc_encode_request" usage="string xmlrpc_encode_request(string method, mixed params)">Generates XML for a method request</phpsyntax><phpsyntax function="xmlrpc_get_type" usage="string xmlrpc_get_type(mixed value)">Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings</phpsyntax><phpsyntax function="xmlrpc_is_fault" usage="bool xmlrpc_is_fault(array)">Determines if an array value represents an XMLRPC fault.</phpsyntax><phpsyntax function="xmlrpc_parse_method_descriptions" usage="array xmlrpc_parse_method_descriptions(string xml)">Decodes XML into a list of method descriptions</phpsyntax><phpsyntax function="xmlrpc_server_add_introspection_data" usage="int xmlrpc_server_add_introspection_data(resource server, array desc)">Adds introspection documentation</phpsyntax><phpsyntax function="xmlrpc_server_call_method" usage="mixed xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])">Parses XML requests and call methods</phpsyntax><phpsyntax function="xmlrpc_server_create" usage="resource xmlrpc_server_create(void)">Creates an xmlrpc server</phpsyntax><phpsyntax function="xmlrpc_server_destroy" usage="int xmlrpc_server_destroy(resource server)">Destroys server resources</phpsyntax><phpsyntax function="xmlrpc_server_register_introspection_callback" usage="bool xmlrpc_server_register_introspection_callback(resource server, string function)">Register a PHP function to generate documentation</phpsyntax><phpsyntax function="xmlrpc_server_register_method" usage="bool xmlrpc_server_register_method(resource server, string method_name, string function)">Register a PHP function to handle method matching method_name</phpsyntax><phpsyntax function="xmlrpc_set_type" usage="bool xmlrpc_set_type(string value, string type)">Sets xmlrpc type, base64 or datetime, for a PHP string value</phpsyntax><phpsyntax function="yp_all" usage="bool yp_all(string domain, string map, string callback)">Traverse the map and call a function on each entry</phpsyntax><phpsyntax function="yp_cat" usage="array yp_cat(string domain, string map)">Return an array containing the entire map</phpsyntax><phpsyntax function="yp_err_string" usage="string yp_err_string(int errorcode)">Returns the corresponding error string for the given error code</phpsyntax><phpsyntax function="yp_errno" usage="int yp_errno()">Returns the error code from the last call or 0 if no error occured</phpsyntax><phpsyntax function="yp_first" usage="array yp_first(string domain, string map)">Returns the first key as array with $var[$key] and the the line as the value</phpsyntax><phpsyntax function="yp_get_default_domain" usage="string yp_get_default_domain(void)">Returns the domain or false</phpsyntax><phpsyntax function="yp_master" usage="string yp_master(string domain, string map)">Returns the machine name of the master</phpsyntax><phpsyntax function="yp_match" usage="string yp_match(string domain, string map, string key)">Returns the matched line or false</phpsyntax><phpsyntax function="yp_next" usage="array yp_next(string domain, string map, string key)">Returns an array with $var[$key] and the the line as the value</phpsyntax><phpsyntax function="yp_order" usage="int yp_order(string domain, string map)">Returns the order number or false</phpsyntax><phpsyntax function="gzcompress" usage="string gzcompress(string data [, int level])">Gzip-compress a string</phpsyntax><phpsyntax function="gzdeflate" usage="string gzdeflate(string data [, int level])">Gzip-compress a string</phpsyntax><phpsyntax function="gzencode" usage="string gzencode(string data [, int level [, int encoding_mode]])">GZ encode a string</phpsyntax><phpsyntax function="gzfile" usage="array gzfile(string filename [, int use_include_path])">Read und uncompress entire .gz-file into an array</phpsyntax><phpsyntax function="gzinflate" usage="string gzinflate(string data [, int length])">Unzip a gzip-compressed string</phpsyntax><phpsyntax function="gzopen" usage="resource gzopen(string filename, string mode [, int use_include_path])">Open a .gz-file and return a .gz-file pointer</phpsyntax><phpsyntax function="gzuncompress" usage="string gzuncompress(string data [, int length])">Unzip a gzip-compressed string</phpsyntax><phpsyntax function="ob_gzhandler" usage="string ob_gzhandler(string str, int mode)">Encode str based on accept-encoding setting - designed to be called from ob_start()</phpsyntax><phpsyntax function="readgzfile" usage="int readgzfile(string filename [, int use_include_path])">Output a .gz-file</phpsyntax><phpsyntax function="zlib_get_coding_type" usage="string zlib_get_coding_type(void)">Returns the coding type used for output compression</phpsyntax><phpsyntax function="set_time_limit" usage="bool set_time_limit(int seconds)">Sets the maximum time a script can run</phpsyntax><phpsyntax function="ob_clean" usage="bool ob_clean(void)">Clean (delete) the current output buffer</phpsyntax><phpsyntax function="ob_end_clean" usage="bool ob_end_clean(void)">Clean the output buffer, and delete current output buffer</phpsyntax><phpsyntax function="ob_end_flush" usage="bool ob_end_flush(void)">Flush (send) the output buffer, and delete current output buffer</phpsyntax><phpsyntax function="ob_flush" usage="bool ob_flush(void)">Flush (send) contents of the output buffer. The last buffer content is sent to next buffer</phpsyntax><phpsyntax function="ob_get_clean" usage="bool ob_get_clean(void)">Get current buffer contents and delete current output buffer</phpsyntax><phpsyntax function="ob_get_contents" usage="string ob_get_contents(void)">Return the contents of the output buffer</phpsyntax><phpsyntax function="ob_get_flush" usage="bool ob_get_flush(void)">Get current buffer contents, flush (send) the output buffer, and delete current output buffer</phpsyntax><phpsyntax function="ob_get_length" usage="int ob_get_length(void)">Return the length of the output buffer</phpsyntax><phpsyntax function="ob_get_level" usage="int ob_get_level(void)">Return the nesting level of the output buffer</phpsyntax><phpsyntax function="ob_implicit_flush" usage="void ob_implicit_flush([int flag])">Turn implicit flush on/off and is equivalent to calling flush() after every output call</phpsyntax><phpsyntax function="ob_start" usage="bool ob_start([ string|array user_function [, int chunk_size [, bool erase]]])">Turn on Output Buffering (specifying an optional output handler).</phpsyntax><phpsyntax function="output_add_rewrite_var" usage="bool output_add_rewrite_var(string name, string value)">Add URL rewriter values</phpsyntax><phpsyntax function="output_reset_rewrite_vars" usage="bool output_reset_rewrite_vars(void)">Reset(clear) URL rewriter values</phpsyntax><phpsyntax function="stream_wrapper_register" usage="bool stream_wrapper_register(string protocol, string classname)">Registers a custom URL protocol handler class</phpsyntax><phpsyntax function="apache_child_terminate" usage="bool apache_child_terminate(void)">Terminate apache process after this request</phpsyntax><phpsyntax function="apache_get_modules" usage="array apache_get_modules(void)">Get a list of loaded Apache modules</phpsyntax><phpsyntax function="apache_get_version" usage="string apache_get_version(void)">Fetch Apache version</phpsyntax><phpsyntax function="apache_lookup_uri" usage="object apache_lookup_uri(string URI)">Perform a partial request of the given URI to obtain information about it</phpsyntax><phpsyntax function="apache_note" usage="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</phpsyntax><phpsyntax function="apache_request_headers" usage="array apache_request_headers(void)">Fetch all HTTP request headers</phpsyntax><phpsyntax function="apache_response_headers" usage="array apache_response_headers(void)">Fetch all HTTP response headers</phpsyntax><phpsyntax function="apache_setenv" usage="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</phpsyntax><phpsyntax function="getallheaders" usage="array getallheaders(void)">Alias for apache_request_headers()</phpsyntax><phpsyntax function="virtual" usage="bool virtual(string filename)">Perform an Apache sub-request</phpsyntax><phpsyntax function="apache_get_modules" usage="array apache_get_modules(void)">Get a list of loaded Apache modules</phpsyntax><phpsyntax function="apache_get_version" usage="string apache_get_version(void)">Fetch Apache version</phpsyntax><phpsyntax function="apache_getenv" usage="bool apache_getenv(string variable [, bool walk_to_top])">Get an Apache subprocess_env variable</phpsyntax><phpsyntax function="apache_note" usage="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</phpsyntax><phpsyntax function="apache_response_headers" usage="array apache_response_headers(void)">Fetch all HTTP response headers</phpsyntax><phpsyntax function="apache_setenv" usage="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</phpsyntax><phpsyntax function="getallheaders" usage="array getallheaders(void)">Fetch all HTTP request headers</phpsyntax><phpsyntax function="virtual" usage="bool virtual(string uri)">Perform an apache sub-request</phpsyntax><phpsyntax function="apache_get_modules" usage="array apache_get_modules(void)">Get a list of loaded Apache modules</phpsyntax><phpsyntax function="apache_get_version" usage="string apache_get_version(void)">Fetch Apache version</phpsyntax><phpsyntax function="apache_getenv" usage="bool apache_getenv(string variable [, bool walk_to_top])">Get an Apache subprocess_env variable</phpsyntax><phpsyntax function="apache_note" usage="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</phpsyntax><phpsyntax function="apache_response_headers" usage="array apache_response_headers(void)">Fetch all HTTP response headers</phpsyntax><phpsyntax function="apache_setenv" usage="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</phpsyntax><phpsyntax function="getallheaders" usage="array getallheaders(void)">Fetch all HTTP request headers</phpsyntax><phpsyntax function="virtual" usage="bool virtual(string uri)">Perform an apache sub-request</phpsyntax><phpsyntax function="apache_child_terminate" usage="bool apache_child_terminate(void)">Terminate apache process after this request</phpsyntax><phpsyntax function="apache_get_modules" usage="array apache_get_modules(void)">Get a list of loaded Apache modules</phpsyntax><phpsyntax function="apache_get_version" usage="string apache_get_version(void)">Fetch Apache version</phpsyntax><phpsyntax function="apache_lookup_uri" usage="object apache_lookup_uri(string URI)">Perform a partial request of the given URI to obtain information about it</phpsyntax><phpsyntax function="apache_note" usage="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</phpsyntax><phpsyntax function="apache_request_auth_name" usage="string apache_request_auth_name()"/><phpsyntax function="apache_request_auth_type" usage="string apache_request_auth_type()"/><phpsyntax function="apache_request_discard_request_body" usage="long apache_request_discard_request_body()"/><phpsyntax function="apache_request_err_headers_out" usage="array apache_request_err_headers_out([{string name|array list} [, string value [, bool replace = false]]])">* fetch all headers that go out in case of an error or a subrequest</phpsyntax><phpsyntax function="apache_request_headers" usage="array apache_request_headers(void)">Fetch all HTTP request headers</phpsyntax><phpsyntax function="apache_request_headers_in" usage="array apache_request_headers_in()">* fetch all incoming request headers</phpsyntax><phpsyntax function="apache_request_headers_out" usage="array apache_request_headers_out([{string name|array list} [, string value [, bool replace = false]]])">* fetch all outgoing request headers</phpsyntax><phpsyntax function="apache_request_is_initial_req" usage="bool apache_request_is_initial_req()"/><phpsyntax function="apache_request_log_error" usage="boolean apache_request_log_error(string message, [long facility])"/><phpsyntax function="apache_request_meets_conditions" usage="long apache_request_meets_conditions()"/><phpsyntax function="apache_request_remote_host" usage="int apache_request_remote_host([int type])"/><phpsyntax function="apache_request_run" usage="long apache_request_run()">This is a wrapper for ap_sub_run_req and ap_destory_sub_req.  It takes       sub_request, runs it, destroys it, and returns it's status.</phpsyntax><phpsyntax function="apache_request_satisfies" usage="long apache_request_satisfies()"/><phpsyntax function="apache_request_server_port" usage="int apache_request_server_port()"/><phpsyntax function="apache_request_set_etag" usage="void apache_request_set_etag()"/><phpsyntax function="apache_request_set_last_modified" usage="void apache_request_set_last_modified()"/><phpsyntax function="apache_request_some_auth_required" usage="bool apache_request_some_auth_required()"/><phpsyntax function="apache_request_sub_req_lookup_file" usage="object apache_request_sub_req_lookup_file(string file)">Returns sub-request for the specified file.  You would      need to run it yourself with run().</phpsyntax><phpsyntax function="apache_request_sub_req_lookup_uri" usage="object apache_request_sub_req_lookup_uri(string uri)">Returns sub-request for the specified uri.  You would      need to run it yourself with run()</phpsyntax><phpsyntax function="apache_request_sub_req_method_uri" usage="object apache_request_sub_req_method_uri(string method, string uri)">Returns sub-request for the specified file.  You would      need to run it yourself with run().</phpsyntax><phpsyntax function="apache_request_update_mtime" usage="long apache_request_update_mtime([int dependency_mtime])"/><phpsyntax function="apache_response_headers" usage="array apache_response_headers(void)">Fetch all HTTP response headers</phpsyntax><phpsyntax function="apache_setenv" usage="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</phpsyntax><phpsyntax function="getallheaders" usage="array getallheaders(void)"/><phpsyntax function="virtual" usage="bool virtual(string filename)">Perform an Apache sub-request</phpsyntax><phpsyntax function="smfi_addheader" usage="string smfi_addheader(string headerf, string headerv)">Adds a header to the current message.</phpsyntax><phpsyntax function="smfi_addrcpt" usage="string smfi_addrcpt(string rcpt)">Add a recipient to the message envelope.</phpsyntax><phpsyntax function="smfi_chgheader" usage="string smfi_chgheader(string headerf, string headerv)">Changes a header's value for the current message.</phpsyntax><phpsyntax function="smfi_delrcpt" usage="string smfi_delrcpt(string rcpt)">Removes the named recipient from the current message's envelope.</phpsyntax><phpsyntax function="smfi_getsymval" usage="string smfi_getsymval(string macro)">Returns the value of the given macro or NULL if the macro is not defined.</phpsyntax><phpsyntax function="smfi_replacebody" usage="string smfi_replacebody(string body)">Replaces the body of the current message. If called more than once,     subsequent calls result in data being appended to the new body.</phpsyntax><phpsyntax function="smfi_setflags" usage="string smfi_setflags(long flags)">Sets the flags describing the actions the filter may take.</phpsyntax><phpsyntax function="smfi_setreply" usage="string smfi_setreply(string rcode, string xcode, string message)">Directly set the SMTP error reply code for this connection.     This code will be used on subsequent error replies resulting from actions taken by this filter.</phpsyntax><phpsyntax function="smfi_settimeout" usage="string smfi_settimeout(long timeout)">Sets the number of seconds libmilter will wait for an MTA connection before timing out a socket.</phpsyntax><phpsyntax function="nsapi_request_headers" usage="array nsapi_request_headers(void)">Get all headers from the request</phpsyntax><phpsyntax function="nsapi_response_headers" usage="array nsapi_response_headers(void)">Get all headers from the response</phpsyntax><phpsyntax function="nsapi_virtual" usage="bool nsapi_virtual(string uri)">Perform an NSAPI sub-request</phpsyntax><phpsyntax keyword="if" usage="if - " tokenval="1001"/><phpsyntax keyword="elseif" usage="elseif - " tokenval="1002"/><phpsyntax keyword="else" usage="else - " tokenval="1003"/><phpsyntax keyword="endif" usage="endif - " tokenval="1004"/><phpsyntax keyword="for" usage="for - " tokenval="1005"/><phpsyntax keyword="endfor" usage="endfor - " tokenval="1005"/><phpsyntax keyword="while" usage="while - " tokenval="1007"/><phpsyntax keyword="endwhile" usage="endwhile - " tokenval="1008"/><phpsyntax keyword="switch" usage="switch - " tokenval="1009"/><phpsyntax keyword="case" usage="case - " tokenval="1010"/><phpsyntax keyword="endswitch" usage="endswitch - " tokenval="1011"/><phpsyntax keyword="break" usage="break - " tokenval="1012"/><phpsyntax keyword="continue" usage="continue - " tokenval="1013"/><phpsyntax keyword="return" usage="return - " tokenval="1014"/><phpsyntax keyword="include" usage="include - " tokenval="1016"/><phpsyntax keyword="include_once" usage="include_once - " tokenval="1017"/><phpsyntax keyword="require" usage="require - " tokenval="1018"/><phpsyntax keyword="require_once" usage="require_once - " tokenval="1019"/><phpsyntax keyword="function" usage="function - " tokenval="1020"/><phpsyntax keyword="class" usage="class - " tokenval="1021"/><phpsyntax keyword="new" usage="new - " tokenval="1022"/><phpsyntax keyword="do" usage="do - " tokenval="1023"/><phpsyntax keyword="old_function" usage="old_function - " tokenval="1024"/><phpsyntax keyword="default" usage="default - " tokenval="1025"/><phpsyntax keyword="global" usage="global - " tokenval="1026"/><phpsyntax keyword="static" usage="static - " tokenval="1027"/><phpsyntax keyword="foreach" usage="foreach - " tokenval="1028"/><phpsyntax keyword="endforeach" usage="endforeach - " tokenval="1029"/><phpsyntax keyword="extends" usage="extends - " tokenval="1030"/><phpsyntax keyword="empty" usage="empty - " tokenval="1031"/><phpsyntax keyword="array" usage="array - " tokenval="1032"/><phpsyntax keyword="echo" usage="echo - " tokenval="1033"/><phpsyntax keyword="var" usage="var - " tokenval="1034"/><phpsyntax keyword="as" usage="as - " tokenval="1035"/><phpsyntax keyword="print" usage="print - " tokenval="1036"/><phpsyntax keyword="unset" usage="unset - " tokenval="1037"/><phpsyntax keyword="exit" usage="exit - " tokenval="1038"/><phpsyntax keyword="and" usage="and - " tokenval="1040"/><phpsyntax keyword="or" usage="or - " tokenval="1041"/><phpsyntax keyword="xor" usage="xor - " tokenval="1042"/><phpsyntax keyword="list" usage="list - " tokenval="1043"/><phpsyntax keyword="null" usage="null - " tokenval="1044"/><phpsyntax keyword="false" usage="false - " tokenval="1045"/><phpsyntax keyword="true" usage="true - " tokenval="1046"/><phpsyntax keyword="AND" usage="AND - " tokenval="1040"/><phpsyntax keyword="OR" usage="OR - " tokenval="1041"/><phpsyntax keyword="NULL" usage="NULL - " tokenval="1044"/><phpsyntax keyword="FALSE" usage="FALSE - " tokenval="1045"/><phpsyntax keyword="TRUE" usage="TRUE - " tokenval="1046"/><phpsyntax keyword="abstract" usage="abstract - " tokenval="1050"/><phpsyntax keyword="catch" usage="catch - " tokenval="1051"/><phpsyntax keyword="finally" usage="finally - " tokenval="1052"/><phpsyntax keyword="try" usage="try - " tokenval="1053"/><phpsyntax keyword="private" usage="private - " tokenval="1054"/><phpsyntax keyword="protected" usage="protected - " tokenval="1055"/><phpsyntax keyword="public" usage="public - " tokenval="1056"/><phpsyntax keyword="interface" usage="interface - " tokenval="1057"/><phpsyntax keyword="implements" usage="implements - " tokenval="1058"/><phpsyntax keyword="instanceof" usage="instanceof - " tokenval="1059"/><phpsyntax keyword="super" usage="super - " tokenval="1060"/><phpsyntax keyword="throw" usage="throw - " tokenval="1061"/><phpsyntax keyword="clone" usage="clone - " tokenval="1063"/><phpsyntax keyword="const" usage="const - " tokenval="1063"/><phpsyntax keyword="declare" usage="declare - " tokenval="1064"/><phpsyntax keyword="enddeclare" usage="enddeclare - " tokenval="1065"/><phpsyntax keyword="eval" usage="eval - " tokenval="1065"/><phpsyntax keyword="use" usage="use - " tokenval="1066"/><phpsyntax keyword="isset" usage="isset - " tokenval="1066"/><phpsyntax keyword="final" usage="final - " tokenval="1067"/><phpsyntax keyword="__FUNCTION__" usage="__FUNCTION__ - " tokenval="1090"/><phpsyntax keyword="__CLASS__" usage="__CLASS__ - " tokenval="1091"/><phpsyntax keyword="__METHOD__" usage="__METHOD__ - " tokenval="1092"/><phpsyntax keyword="__FILE__" usage="__FILE__ - " tokenval="1093"/><phpsyntax keyword="__LINE__" usage="__LINE__ - " tokenval="1094"/><phpsyntax keyword="__FUNCTION__" usage="__FUNCTION__ - " tokenval="1095"/><phpsyntax keyword="php_user_filter" usage="php_user_filter - " tokenval="1096"/><phpsyntax keyword="cfunction" usage="cfunction - " tokenval="1097"/><phpsyntax keyword="old_function" usage="old_function - " tokenval="1098"/><phpsyntax keyword="exception" usage="exception - " tokenval="1099"/><phpsyntax keyword="die" usage="die - " tokenval="1100"/><phpsyntax type="string" usage="string - "/><phpsyntax type="unset" usage="unset - "/><phpsyntax type="object" usage="object - "/><phpsyntax type="bool" usage="bool - "/><phpsyntax type="boolean" usage="boolean - "/><phpsyntax type="real" usage="real - "/><phpsyntax type="double" usage="double - "/><phpsyntax type="float" usage="float - "/><phpsyntax type="int" usage="int - "/><phpsyntax type="integer" usage="integer - "/><phpsyntax constant="CASE_LOWER" usage="CASE_LOWER - "/><phpsyntax constant="CASE_UPPER" usage="CASE_UPPER - "/><phpsyntax constant="SORT_ASC" usage="SORT_ASC - "/><phpsyntax constant="SORT_DESC" usage="SORT_DESC - "/><phpsyntax constant="SORT_REGULAR" usage="SORT_REGULAR - "/><phpsyntax constant="SORT_NUMERIC" usage="SORT_NUMERIC - "/><phpsyntax constant="SORT_STRING" usage="SORT_STRING - "/><phpsyntax constant="COUNT_NORMAL" usage="COUNT_NORMAL - "/><phpsyntax constant="COUNT_RECURSIVE" usage="COUNT_RECURSIVE - "/><phpsyntax constant="EXTR_OVERWRITE" usage="EXTR_OVERWRITE - "/><phpsyntax constant="EXTR_SKIP" usage="EXTR_SKIP - "/><phpsyntax constant="EXTR_PREFIX_SAME" usage="EXTR_PREFIX_SAME - "/><phpsyntax constant="EXTR_PREFIX_ALL" usage="EXTR_PREFIX_ALL - "/><phpsyntax constant="EXTR_PREFIX_INVALID" usage="EXTR_PREFIX_INVALID - "/><phpsyntax constant="EXTR_PREFIX_IF_EXISTS" usage="EXTR_PREFIX_IF_EXISTS - "/><phpsyntax constant="EXTR_IF_EXISTS" usage="EXTR_IF_EXISTS - "/><phpsyntax constant="EXTR_REFS" usage="EXTR_REFS - "/><phpsyntax constant="CAL_GREGORIAN" usage="CAL_GREGORIAN - "/><phpsyntax constant="CAL_JULIAN" usage="CAL_JULIAN - "/><phpsyntax constant="CAL_JEWISH" usage="CAL_JEWISH - "/><phpsyntax constant="CAL_FRENCH" usage="CAL_FRENCH - "/><phpsyntax constant="CAL_NUM_CALS" usage="CAL_NUM_CALS - "/><phpsyntax constant="CAL_DOW_DAYNO" usage="CAL_DOW_DAYNO - "/><phpsyntax constant="CAL_DOW_SHORT" usage="CAL_DOW_SHORT - "/><phpsyntax constant="CAL_DOW_LONG" usage="CAL_DOW_LONG - "/><phpsyntax constant="CAL_MONTH_GREGORIAN_SHORT" usage="CAL_MONTH_GREGORIAN_SHORT - "/><phpsyntax constant="CAL_MONTH_GREGORIAN_LONG" usage="CAL_MONTH_GREGORIAN_LONG - "/><phpsyntax constant="CAL_MONTH_JULIAN_SHORT" usage="CAL_MONTH_JULIAN_SHORT - "/><phpsyntax constant="CAL_MONTH_JULIAN_LONG" usage="CAL_MONTH_JULIAN_LONG - "/><phpsyntax constant="CAL_MONTH_JEWISH" usage="CAL_MONTH_JEWISH - "/><phpsyntax constant="CAL_MONTH_FRENCH" usage="CAL_MONTH_FRENCH - "/><phpsyntax constant="CAL_EASTER_DEFAULT" usage="CAL_EASTER_DEFAULT - "/><phpsyntax constant="CAL_EASTER_ROMAN" usage="CAL_EASTER_ROMAN - "/><phpsyntax constant="CAL_EASTER_ALWAYS_GREGORIAN" usage="CAL_EASTER_ALWAYS_GREGORIAN - "/><phpsyntax constant="CAL_EASTER_ALWAYS_JULIAN" usage="CAL_EASTER_ALWAYS_JULIAN - "/><phpsyntax constant="CAL_JEWISH_ADD_ALAFIM_GERESH" usage="CAL_JEWISH_ADD_ALAFIM_GERESH - "/><phpsyntax constant="CAL_JEWISH_ADD_ALAFIM" usage="CAL_JEWISH_ADD_ALAFIM - "/><phpsyntax constant="CAL_JEWISH_ADD_GERESHAYIM" usage="CAL_JEWISH_ADD_GERESHAYIM - "/><phpsyntax constant="CLSCTX_INPROC_SERVER" usage="CLSCTX_INPROC_SERVER - "/><phpsyntax constant="CLSCTX_INPROC_HANDLER" usage="CLSCTX_INPROC_HANDLER - "/><phpsyntax constant="CLSCTX_LOCAL_SERVER" usage="CLSCTX_LOCAL_SERVER - "/><phpsyntax constant="CLSCTX_REMOTE_SERVER" usage="CLSCTX_REMOTE_SERVER - "/><phpsyntax constant="CLSCTX_SERVER" usage="CLSCTX_SERVER - "/><phpsyntax constant="CLSCTX_ALL" usage="CLSCTX_ALL - "/><phpsyntax constant="VT_NULL" usage="VT_NULL - "/><phpsyntax constant="VT_EMPTY" usage="VT_EMPTY - "/><phpsyntax constant="VT_UI1" usage="VT_UI1 - "/><phpsyntax constant="VT_I2" usage="VT_I2 - "/><phpsyntax constant="VT_I4" usage="VT_I4 - "/><phpsyntax constant="VT_R4" usage="VT_R4 - "/><phpsyntax constant="VT_R8" usage="VT_R8 - "/><phpsyntax constant="VT_BOOL" usage="VT_BOOL - "/><phpsyntax constant="VT_ERROR" usage="VT_ERROR - "/><phpsyntax constant="VT_CY" usage="VT_CY - "/><phpsyntax constant="VT_DATE" usage="VT_DATE - "/><phpsyntax constant="VT_BSTR" usage="VT_BSTR - "/><phpsyntax constant="VT_DECIMAL" usage="VT_DECIMAL - "/><phpsyntax constant="VT_UNKNOWN" usage="VT_UNKNOWN - "/><phpsyntax constant="VT_DISPATCH" usage="VT_DISPATCH - "/><phpsyntax constant="VT_VARIANT" usage="VT_VARIANT - "/><phpsyntax constant="VT_I1" usage="VT_I1 - "/><phpsyntax constant="VT_UI2" usage="VT_UI2 - "/><phpsyntax constant="VT_UI4" usage="VT_UI4 - "/><phpsyntax constant="VT_INT" usage="VT_INT - "/><phpsyntax constant="VT_UINT" usage="VT_UINT - "/><phpsyntax constant="VT_ARRAY" usage="VT_ARRAY - "/><phpsyntax constant="VT_BYREF" usage="VT_BYREF - "/><phpsyntax constant="CP_ACP" usage="CP_ACP - "/><phpsyntax constant="CP_MACCP" usage="CP_MACCP - "/><phpsyntax constant="CP_OEMCP" usage="CP_OEMCP - "/><phpsyntax constant="CP_UTF7" usage="CP_UTF7 - "/><phpsyntax constant="CP_UTF8" usage="CP_UTF8 - "/><phpsyntax constant="CP_SYMBOL" usage="CP_SYMBOL - "/><phpsyntax constant="CP_THREAD_ACP" usage="CP_THREAD_ACP - "/><phpsyntax constant="VARCMP_LT" usage="VARCMP_LT - "/><phpsyntax constant="VARCMP_EQ" usage="VARCMP_EQ - "/><phpsyntax constant="VARCMP_GT" usage="VARCMP_GT - "/><phpsyntax constant="VARCMP_NULL" usage="VARCMP_NULL - "/><phpsyntax constant="NORM_IGNORECASE" usage="NORM_IGNORECASE - "/><phpsyntax constant="NORM_IGNORENONSPACE" usage="NORM_IGNORENONSPACE - "/><phpsyntax constant="NORM_IGNORESYMBOLS" usage="NORM_IGNORESYMBOLS - "/><phpsyntax constant="NORM_IGNOREWIDTH" usage="NORM_IGNOREWIDTH - "/><phpsyntax constant="NORM_IGNOREKANATYPE" usage="NORM_IGNOREKANATYPE - "/><phpsyntax constant="NORM_IGNOREKASHIDA" usage="NORM_IGNOREKASHIDA - "/><phpsyntax constant="DISP_E_DIVBYZERO" usage="DISP_E_DIVBYZERO - "/><phpsyntax constant="DISP_E_OVERFLOW" usage="DISP_E_OVERFLOW - "/><phpsyntax constant="MK_E_UNAVAILABLE" usage="MK_E_UNAVAILABLE - "/><phpsyntax constant="CPDF_PM_NONE" usage="CPDF_PM_NONE - "/><phpsyntax constant="CPDF_PM_OUTLINES" usage="CPDF_PM_OUTLINES - "/><phpsyntax constant="CPDF_PM_THUMBS" usage="CPDF_PM_THUMBS - "/><phpsyntax constant="CPDF_PM_FULLSCREEN" usage="CPDF_PM_FULLSCREEN - "/><phpsyntax constant="CPDF_PL_SINGLE" usage="CPDF_PL_SINGLE - "/><phpsyntax constant="CPDF_PL_1COLUMN" usage="CPDF_PL_1COLUMN - "/><phpsyntax constant="CPDF_PL_2LCOLUMN" usage="CPDF_PL_2LCOLUMN - "/><phpsyntax constant="CPDF_PL_2RCOLUMN" usage="CPDF_PL_2RCOLUMN - "/><phpsyntax constant="CURLOPT_PORT" usage="CURLOPT_PORT - "/><phpsyntax constant="CURLOPT_FILE" usage="CURLOPT_FILE - "/><phpsyntax constant="CURLOPT_INFILE" usage="CURLOPT_INFILE - "/><phpsyntax constant="CURLOPT_INFILESIZE" usage="CURLOPT_INFILESIZE - "/><phpsyntax constant="CURLOPT_URL" usage="CURLOPT_URL - "/><phpsyntax constant="CURLOPT_PROXY" usage="CURLOPT_PROXY - "/><phpsyntax constant="CURLOPT_VERBOSE" usage="CURLOPT_VERBOSE - "/><phpsyntax constant="CURLOPT_HEADER" usage="CURLOPT_HEADER - "/><phpsyntax constant="CURLOPT_HTTPHEADER" usage="CURLOPT_HTTPHEADER - "/><phpsyntax constant="CURLOPT_NOPROGRESS" usage="CURLOPT_NOPROGRESS - "/><phpsyntax constant="CURLOPT_NOBODY" usage="CURLOPT_NOBODY - "/><phpsyntax constant="CURLOPT_FAILONERROR" usage="CURLOPT_FAILONERROR - "/><phpsyntax constant="CURLOPT_UPLOAD" usage="CURLOPT_UPLOAD - "/><phpsyntax constant="CURLOPT_POST" usage="CURLOPT_POST - "/><phpsyntax constant="CURLOPT_FTPLISTONLY" usage="CURLOPT_FTPLISTONLY - "/><phpsyntax constant="CURLOPT_FTPAPPEND" usage="CURLOPT_FTPAPPEND - "/><phpsyntax constant="CURLOPT_NETRC" usage="CURLOPT_NETRC - "/><phpsyntax constant="CURLOPT_FOLLOWLOCATION" usage="CURLOPT_FOLLOWLOCATION - "/><phpsyntax constant="CURLOPT_FTPASCII" usage="CURLOPT_FTPASCII - "/><phpsyntax constant="CURLOPT_PUT" usage="CURLOPT_PUT - "/><phpsyntax constant="CURLOPT_MUTE" usage="CURLOPT_MUTE - "/><phpsyntax constant="CURLOPT_USERPWD" usage="CURLOPT_USERPWD - "/><phpsyntax constant="CURLOPT_PROXYUSERPWD" usage="CURLOPT_PROXYUSERPWD - "/><phpsyntax constant="CURLOPT_RANGE" usage="CURLOPT_RANGE - "/><phpsyntax constant="CURLOPT_TIMEOUT" usage="CURLOPT_TIMEOUT - "/><phpsyntax constant="CURLOPT_POSTFIELDS" usage="CURLOPT_POSTFIELDS - "/><phpsyntax constant="CURLOPT_REFERER" usage="CURLOPT_REFERER - "/><phpsyntax constant="CURLOPT_USERAGENT" usage="CURLOPT_USERAGENT - "/><phpsyntax constant="CURLOPT_FTPPORT" usage="CURLOPT_FTPPORT - "/><phpsyntax constant="CURLOPT_LOW_SPEED_LIMIT" usage="CURLOPT_LOW_SPEED_LIMIT - "/><phpsyntax constant="CURLOPT_LOW_SPEED_TIME" usage="CURLOPT_LOW_SPEED_TIME - "/><phpsyntax constant="CURLOPT_RESUME_FROM" usage="CURLOPT_RESUME_FROM - "/><phpsyntax constant="CURLOPT_COOKIE" usage="CURLOPT_COOKIE - "/><phpsyntax constant="CURLOPT_SSLCERT" usage="CURLOPT_SSLCERT - "/><phpsyntax constant="CURLOPT_SSLCERTPASSWD" usage="CURLOPT_SSLCERTPASSWD - "/><phpsyntax constant="CURLOPT_WRITEHEADER" usage="CURLOPT_WRITEHEADER - "/><phpsyntax constant="CURLOPT_SSL_VERIFYHOST" usage="CURLOPT_SSL_VERIFYHOST - "/><phpsyntax constant="CURLOPT_COOKIEFILE" usage="CURLOPT_COOKIEFILE - "/><phpsyntax constant="CURLOPT_SSLVERSION" usage="CURLOPT_SSLVERSION - "/><phpsyntax constant="CURLOPT_TIMECONDITION" usage="CURLOPT_TIMECONDITION - "/><phpsyntax constant="CURLOPT_TIMEVALUE" usage="CURLOPT_TIMEVALUE - "/><phpsyntax constant="CURLOPT_CUSTOMREQUEST" usage="CURLOPT_CUSTOMREQUEST - "/><phpsyntax constant="CURLOPT_STDERR" usage="CURLOPT_STDERR - "/><phpsyntax constant="CURLOPT_TRANSFERTEXT" usage="CURLOPT_TRANSFERTEXT - "/><phpsyntax constant="CURLOPT_RETURNTRANSFER" usage="CURLOPT_RETURNTRANSFER - "/><phpsyntax constant="CURLOPT_QUOTE" usage="CURLOPT_QUOTE - "/><phpsyntax constant="CURLOPT_POSTQUOTE" usage="CURLOPT_POSTQUOTE - "/><phpsyntax constant="CURLOPT_INTERFACE" usage="CURLOPT_INTERFACE - "/><phpsyntax constant="CURLOPT_KRB4LEVEL" usage="CURLOPT_KRB4LEVEL - "/><phpsyntax constant="CURLOPT_HTTPPROXYTUNNEL" usage="CURLOPT_HTTPPROXYTUNNEL - "/><phpsyntax constant="CURLOPT_FILETIME" usage="CURLOPT_FILETIME - "/><phpsyntax constant="CURLOPT_WRITEFUNCTION" usage="CURLOPT_WRITEFUNCTION - "/><phpsyntax constant="CURLOPT_READFUNCTION" usage="CURLOPT_READFUNCTION - "/><phpsyntax constant="CURLOPT_PASSWDFUNCTION" usage="CURLOPT_PASSWDFUNCTION - "/><phpsyntax constant="CURLOPT_HEADERFUNCTION" usage="CURLOPT_HEADERFUNCTION - "/><phpsyntax constant="CURLOPT_MAXREDIRS" usage="CURLOPT_MAXREDIRS - "/><phpsyntax constant="CURLOPT_MAXCONNECTS" usage="CURLOPT_MAXCONNECTS - "/><phpsyntax constant="CURLOPT_CLOSEPOLICY" usage="CURLOPT_CLOSEPOLICY - "/><phpsyntax constant="CURLOPT_FRESH_CONNECT" usage="CURLOPT_FRESH_CONNECT - "/><phpsyntax constant="CURLOPT_FORBID_REUSE" usage="CURLOPT_FORBID_REUSE - "/><phpsyntax constant="CURLOPT_RANDOM_FILE" usage="CURLOPT_RANDOM_FILE - "/><phpsyntax constant="CURLOPT_EGDSOCKET" usage="CURLOPT_EGDSOCKET - "/><phpsyntax constant="CURLOPT_CONNECTTIMEOUT" usage="CURLOPT_CONNECTTIMEOUT - "/><phpsyntax constant="CURLOPT_SSL_VERIFYPEER" usage="CURLOPT_SSL_VERIFYPEER - "/><phpsyntax constant="CURLOPT_CAINFO" usage="CURLOPT_CAINFO - "/><phpsyntax constant="CURLOPT_COOKIEJAR" usage="CURLOPT_COOKIEJAR - "/><phpsyntax constant="CURLOPT_SSL_CIPHER_LIST" usage="CURLOPT_SSL_CIPHER_LIST - "/><phpsyntax constant="CURLOPT_BINARYTRANSFER" usage="CURLOPT_BINARYTRANSFER - "/><phpsyntax constant="CURLCLOSEPOLICY_LEAST_RECENTLY_USED" usage="CURLCLOSEPOLICY_LEAST_RECENTLY_USED - "/><phpsyntax constant="CURLCLOSEPOLICY_LEAST_TRAFFIC" usage="CURLCLOSEPOLICY_LEAST_TRAFFIC - "/><phpsyntax constant="CURLCLOSEPOLICY_SLOWEST" usage="CURLCLOSEPOLICY_SLOWEST - "/><phpsyntax constant="CURLCLOSEPOLICY_CALLBACK" usage="CURLCLOSEPOLICY_CALLBACK - "/><phpsyntax constant="CURLCLOSEPOLICY_OLDEST" usage="CURLCLOSEPOLICY_OLDEST - "/><phpsyntax constant="CURLINFO_EFFECTIVE_URL" usage="CURLINFO_EFFECTIVE_URL - "/><phpsyntax constant="CURLINFO_HTTP_CODE" usage="CURLINFO_HTTP_CODE - "/><phpsyntax constant="CURLINFO_HEADER_SIZE" usage="CURLINFO_HEADER_SIZE - "/><phpsyntax constant="CURLINFO_REQUEST_SIZE" usage="CURLINFO_REQUEST_SIZE - "/><phpsyntax constant="CURLINFO_TOTAL_TIME" usage="CURLINFO_TOTAL_TIME - "/><phpsyntax constant="CURLINFO_NAMELOOKUP_TIME" usage="CURLINFO_NAMELOOKUP_TIME - "/><phpsyntax constant="CURLINFO_CONNECT_TIME" usage="CURLINFO_CONNECT_TIME - "/><phpsyntax constant="CURLINFO_PRETRANSFER_TIME" usage="CURLINFO_PRETRANSFER_TIME - "/><phpsyntax constant="CURLINFO_SIZE_UPLOAD" usage="CURLINFO_SIZE_UPLOAD - "/><phpsyntax constant="CURLINFO_SIZE_DOWNLOAD" usage="CURLINFO_SIZE_DOWNLOAD - "/><phpsyntax constant="CURLINFO_SPEED_DOWNLOAD" usage="CURLINFO_SPEED_DOWNLOAD - "/><phpsyntax constant="CURLINFO_SPEED_UPLOAD" usage="CURLINFO_SPEED_UPLOAD - "/><phpsyntax constant="CURLINFO_FILETIME" usage="CURLINFO_FILETIME - "/><phpsyntax constant="CURLINFO_SSL_VERIFYRESULT" usage="CURLINFO_SSL_VERIFYRESULT - "/><phpsyntax constant="CURLINFO_CONTENT_LENGTH_DOWNLOAD" usage="CURLINFO_CONTENT_LENGTH_DOWNLOAD - "/><phpsyntax constant="CURLINFO_CONTENT_LENGTH_UPLOAD" usage="CURLINFO_CONTENT_LENGTH_UPLOAD - "/><phpsyntax constant="CURLE_OK" usage="CURLE_OK - "/><phpsyntax constant="CURLE_UNSUPPORTED_PROTOCOL" usage="CURLE_UNSUPPORTED_PROTOCOL - "/><phpsyntax constant="CURLE_FAILED_INIT" usage="CURLE_FAILED_INIT - "/><phpsyntax constant="CURLE_URL_MALFORMAT" usage="CURLE_URL_MALFORMAT - "/><phpsyntax constant="CURLE_URL_MALFORMAT_USER" usage="CURLE_URL_MALFORMAT_USER - "/><phpsyntax constant="CURLE_COULDNT_RESOLVE_PROXY" usage="CURLE_COULDNT_RESOLVE_PROXY - "/><phpsyntax constant="CURLE_COULDNT_RESOLVE_HOST" usage="CURLE_COULDNT_RESOLVE_HOST - "/><phpsyntax constant="CURLE_COULDNT_CONNECT" usage="CURLE_COULDNT_CONNECT - "/><phpsyntax constant="CURLE_FTP_WEIRD_SERVER_REPLY" usage="CURLE_FTP_WEIRD_SERVER_REPLY - "/><phpsyntax constant="CURLE_FTP_ACCESS_DENIED" usage="CURLE_FTP_ACCESS_DENIED - "/><phpsyntax constant="CURLE_FTP_USER_PASSWORD_INCORRECT" usage="CURLE_FTP_USER_PASSWORD_INCORRECT - "/><phpsyntax constant="CURLE_FTP_WEIRD_PASS_REPLY" usage="CURLE_FTP_WEIRD_PASS_REPLY - "/><phpsyntax constant="CURLE_FTP_WEIRD_USER_REPLY" usage="CURLE_FTP_WEIRD_USER_REPLY - "/><phpsyntax constant="CURLE_FTP_WEIRD_PASV_REPLY" usage="CURLE_FTP_WEIRD_PASV_REPLY - "/><phpsyntax constant="CURLE_FTP_WEIRD_227_FORMAT" usage="CURLE_FTP_WEIRD_227_FORMAT - "/><phpsyntax constant="CURLE_FTP_CANT_GET_HOST" usage="CURLE_FTP_CANT_GET_HOST - "/><phpsyntax constant="CURLE_FTP_CANT_RECONNECT" usage="CURLE_FTP_CANT_RECONNECT - "/><phpsyntax constant="CURLE_FTP_COULDNT_SET_BINARY" usage="CURLE_FTP_COULDNT_SET_BINARY - "/><phpsyntax constant="CURLE_PARTIAL_FILE" usage="CURLE_PARTIAL_FILE - "/><phpsyntax constant="CURLE_FTP_COULDNT_RETR_FILE" usage="CURLE_FTP_COULDNT_RETR_FILE - "/><phpsyntax constant="CURLE_FTP_WRITE_ERROR" usage="CURLE_FTP_WRITE_ERROR - "/><phpsyntax constant="CURLE_FTP_QUOTE_ERROR" usage="CURLE_FTP_QUOTE_ERROR - "/><phpsyntax constant="CURLE_HTTP_NOT_FOUND" usage="CURLE_HTTP_NOT_FOUND - "/><phpsyntax constant="CURLE_WRITE_ERROR" usage="CURLE_WRITE_ERROR - "/><phpsyntax constant="CURLE_MALFORMAT_USER" usage="CURLE_MALFORMAT_USER - "/><phpsyntax constant="CURLE_FTP_COULDNT_STOR_FILE" usage="CURLE_FTP_COULDNT_STOR_FILE - "/><phpsyntax constant="CURLE_READ_ERROR" usage="CURLE_READ_ERROR - "/><phpsyntax constant="CURLE_OUT_OF_MEMORY" usage="CURLE_OUT_OF_MEMORY - "/><phpsyntax constant="CURLE_OPERATION_TIMEOUTED" usage="CURLE_OPERATION_TIMEOUTED - "/><phpsyntax constant="CURLE_FTP_COULDNT_SET_ASCII" usage="CURLE_FTP_COULDNT_SET_ASCII - "/><phpsyntax constant="CURLE_FTP_PORT_FAILED" usage="CURLE_FTP_PORT_FAILED - "/><phpsyntax constant="CURLE_FTP_COULDNT_USE_REST" usage="CURLE_FTP_COULDNT_USE_REST - "/><phpsyntax constant="CURLE_FTP_COULDNT_GET_SIZE" usage="CURLE_FTP_COULDNT_GET_SIZE - "/><phpsyntax constant="CURLE_HTTP_RANGE_ERROR" usage="CURLE_HTTP_RANGE_ERROR - "/><phpsyntax constant="CURLE_HTTP_POST_ERROR" usage="CURLE_HTTP_POST_ERROR - "/><phpsyntax constant="CURLE_SSL_CONNECT_ERROR" usage="CURLE_SSL_CONNECT_ERROR - "/><phpsyntax constant="CURLE_FTP_BAD_DOWNLOAD_RESUME" usage="CURLE_FTP_BAD_DOWNLOAD_RESUME - "/><phpsyntax constant="CURLE_FILE_COULDNT_READ_FILE" usage="CURLE_FILE_COULDNT_READ_FILE - "/><phpsyntax constant="CURLE_LDAP_CANNOT_BIND" usage="CURLE_LDAP_CANNOT_BIND - "/><phpsyntax constant="CURLE_LDAP_SEARCH_FAILED" usage="CURLE_LDAP_SEARCH_FAILED - "/><phpsyntax constant="CURLE_LIBRARY_NOT_FOUND" usage="CURLE_LIBRARY_NOT_FOUND - "/><phpsyntax constant="CURLE_FUNCTION_NOT_FOUND" usage="CURLE_FUNCTION_NOT_FOUND - "/><phpsyntax constant="CURLE_ABORTED_BY_CALLBACK" usage="CURLE_ABORTED_BY_CALLBACK - "/><phpsyntax constant="CURLE_BAD_FUNCTION_ARGUMENT" usage="CURLE_BAD_FUNCTION_ARGUMENT - "/><phpsyntax constant="CURLE_BAD_CALLING_ORDER" usage="CURLE_BAD_CALLING_ORDER - "/><phpsyntax constant="CURLE_HTTP_PORT_FAILED" usage="CURLE_HTTP_PORT_FAILED - "/><phpsyntax constant="CURLE_BAD_PASSWORD_ENTERED" usage="CURLE_BAD_PASSWORD_ENTERED - "/><phpsyntax constant="CURLE_TOO_MANY_REDIRECTS" usage="CURLE_TOO_MANY_REDIRECTS - "/><phpsyntax constant="CURLE_UNKNOWN_TELNET_OPTION" usage="CURLE_UNKNOWN_TELNET_OPTION - "/><phpsyntax constant="CURLE_TELNET_OPTION_SYNTAX" usage="CURLE_TELNET_OPTION_SYNTAX - "/><phpsyntax constant="CURLE_OBSOLETE" usage="CURLE_OBSOLETE - "/><phpsyntax constant="CURLE_SSL_PEER_CERTIFICATE" usage="CURLE_SSL_PEER_CERTIFICATE - "/><phpsyntax constant="CYRUS_CONN_NONSYNCLITERAL" usage="CYRUS_CONN_NONSYNCLITERAL - "/><phpsyntax constant="CYRUS_CONN_INITIALRESPONSE" usage="CYRUS_CONN_INITIALRESPONSE - "/><phpsyntax constant="CYRUS_CALLBACK_NUMBERED" usage="CYRUS_CALLBACK_NUMBERED - "/><phpsyntax constant="CYRUS_CALLBACK_NOLITERAL" usage="CYRUS_CALLBACK_NOLITERAL - "/><phpsyntax constant="DBPLUS_ERR_NOERR" usage="DBPLUS_ERR_NOERR - ">ERR_NOERR</phpsyntax><phpsyntax constant="DBPLUS_ERR_DUPLICATE" usage="DBPLUS_ERR_DUPLICATE - ">ERR_DUPLICATE</phpsyntax><phpsyntax constant="DBPLUS_ERR_EOSCAN" usage="DBPLUS_ERR_EOSCAN - ">ERR_EOSCAN</phpsyntax><phpsyntax constant="DBPLUS_ERR_EMPTY" usage="DBPLUS_ERR_EMPTY - ">ERR_EMPTY</phpsyntax><phpsyntax constant="DBPLUS_ERR_CLOSE" usage="DBPLUS_ERR_CLOSE - ">ERR_CLOSE</phpsyntax><phpsyntax constant="DBPLUS_ERR_WLOCKED" usage="DBPLUS_ERR_WLOCKED - ">ERR_WLOCKED</phpsyntax><phpsyntax constant="DBPLUS_ERR_LOCKED" usage="DBPLUS_ERR_LOCKED - ">ERR_LOCKED</phpsyntax><phpsyntax constant="DBPLUS_ERR_NOLOCK" usage="DBPLUS_ERR_NOLOCK - ">ERR_NOLOCK</phpsyntax><phpsyntax constant="DBPLUS_ERR_READ" usage="DBPLUS_ERR_READ - ">ERR_READ</phpsyntax><phpsyntax constant="DBPLUS_ERR_WRITE" usage="DBPLUS_ERR_WRITE - ">ERR_WRITE</phpsyntax><phpsyntax constant="DBPLUS_ERR_CREATE" usage="DBPLUS_ERR_CREATE - ">ERR_CREATE</phpsyntax><phpsyntax constant="DBPLUS_ERR_LSEEK" usage="DBPLUS_ERR_LSEEK - ">ERR_LSEEK</phpsyntax><phpsyntax constant="DBPLUS_ERR_LENGTH" usage="DBPLUS_ERR_LENGTH - ">ERR_LENGTH</phpsyntax><phpsyntax constant="DBPLUS_ERR_OPEN" usage="DBPLUS_ERR_OPEN - ">ERR_OPEN</phpsyntax><phpsyntax constant="DBPLUS_ERR_WOPEN" usage="DBPLUS_ERR_WOPEN - ">ERR_WOPEN</phpsyntax><phpsyntax constant="DBPLUS_ERR_MAGIC" usage="DBPLUS_ERR_MAGIC - ">ERR_MAGIC</phpsyntax><phpsyntax constant="DBPLUS_ERR_VERSION" usage="DBPLUS_ERR_VERSION - ">ERR_VERSION</phpsyntax><phpsyntax constant="DBPLUS_ERR_PGSIZE" usage="DBPLUS_ERR_PGSIZE - ">ERR_PGSIZE</phpsyntax><phpsyntax constant="DBPLUS_ERR_CRC" usage="DBPLUS_ERR_CRC - ">ERR_CRC</phpsyntax><phpsyntax constant="DBPLUS_ERR_PIPE" usage="DBPLUS_ERR_PIPE - ">ERR_PIPE</phpsyntax><phpsyntax constant="DBPLUS_ERR_NIDX" usage="DBPLUS_ERR_NIDX - ">ERR_NIDX</phpsyntax><phpsyntax constant="DBPLUS_ERR_MALLOC" usage="DBPLUS_ERR_MALLOC - ">ERR_MALLOC</phpsyntax><phpsyntax constant="DBPLUS_ERR_NUSERS" usage="DBPLUS_ERR_NUSERS - ">ERR_NUSERS</phpsyntax><phpsyntax constant="DBPLUS_ERR_PREEXIT" usage="DBPLUS_ERR_PREEXIT - ">ERR_PREEXIT</phpsyntax><phpsyntax constant="DBPLUS_ERR_ONTRAP" usage="DBPLUS_ERR_ONTRAP - ">ERR_ONTRAP</phpsyntax><phpsyntax constant="DBPLUS_ERR_PREPROC" usage="DBPLUS_ERR_PREPROC - ">ERR_PREPROC</phpsyntax><phpsyntax constant="DBPLUS_ERR_DBPARSE" usage="DBPLUS_ERR_DBPARSE - ">ERR_DBPARSE</phpsyntax><phpsyntax constant="DBPLUS_ERR_DBRUNERR" usage="DBPLUS_ERR_DBRUNERR - ">ERR_DBRUNERR</phpsyntax><phpsyntax constant="DBPLUS_ERR_DBPREEXIT" usage="DBPLUS_ERR_DBPREEXIT - ">ERR_DBPREEXIT</phpsyntax><phpsyntax constant="DBPLUS_ERR_WAIT" usage="DBPLUS_ERR_WAIT - ">ERR_WAIT</phpsyntax><phpsyntax constant="DBPLUS_ERR_CORRUPT_TUPLE" usage="DBPLUS_ERR_CORRUPT_TUPLE - ">ERR_CORRUPT_TUPLE</phpsyntax><phpsyntax constant="DBPLUS_ERR_WARNING0" usage="DBPLUS_ERR_WARNING0 - ">ERR_WARNING0</phpsyntax><phpsyntax constant="DBPLUS_ERR_PANIC" usage="DBPLUS_ERR_PANIC - ">ERR_PANIC</phpsyntax><phpsyntax constant="DBPLUS_ERR_FIFO" usage="DBPLUS_ERR_FIFO - ">ERR_FIFO</phpsyntax><phpsyntax constant="DBPLUS_ERR_PERM" usage="DBPLUS_ERR_PERM - ">ERR_PERM</phpsyntax><phpsyntax constant="DBPLUS_ERR_TCL" usage="DBPLUS_ERR_TCL - ">ERR_TCL</phpsyntax><phpsyntax constant="DBPLUS_ERR_RESTRICTED" usage="DBPLUS_ERR_RESTRICTED - ">ERR_RESTRICTED</phpsyntax><phpsyntax constant="DBPLUS_ERR_USER" usage="DBPLUS_ERR_USER - ">ERR_USER</phpsyntax><phpsyntax constant="DBPLUS_ERR_UNKNOWN" usage="DBPLUS_ERR_UNKNOWN - ">ERR_UNKNOWN</phpsyntax><phpsyntax constant="DBX_MYSQL" usage="DBX_MYSQL - "/><phpsyntax constant="DBX_ODBC" usage="DBX_ODBC - "/><phpsyntax constant="DBX_PGSQL" usage="DBX_PGSQL - "/><phpsyntax constant="DBX_MSSQL" usage="DBX_MSSQL - "/><phpsyntax constant="DBX_FBSQL" usage="DBX_FBSQL - "/><phpsyntax constant="DBX_OCI8" usage="DBX_OCI8 - "/><phpsyntax constant="DBX_SYBASECT" usage="DBX_SYBASECT - "/><phpsyntax constant="DBX_SQLITE" usage="DBX_SQLITE - "/><phpsyntax constant="DBX_PERSISTENT" usage="DBX_PERSISTENT - "/><phpsyntax constant="DBX_RESULT_INFO" usage="DBX_RESULT_INFO - "/><phpsyntax constant="DBX_RESULT_INDEX" usage="DBX_RESULT_INDEX - "/><phpsyntax constant="DBX_RESULT_ASSOC" usage="DBX_RESULT_ASSOC - "/><phpsyntax constant="DBX_RESULT_UNBUFFERED" usage="DBX_RESULT_UNBUFFERED - "/><phpsyntax constant="DBX_COLNAMES_UNCHANGED" usage="DBX_COLNAMES_UNCHANGED - "/><phpsyntax constant="DBX_COLNAMES_UPPERCASE" usage="DBX_COLNAMES_UPPERCASE - "/><phpsyntax constant="DBX_COLNAMES_LOWERCASE" usage="DBX_COLNAMES_LOWERCASE - "/><phpsyntax constant="DBX_CMP_NATIVE" usage="DBX_CMP_NATIVE - "/><phpsyntax constant="DBX_CMP_TEXT" usage="DBX_CMP_TEXT - "/><phpsyntax constant="DBX_CMP_NUMBER" usage="DBX_CMP_NUMBER - "/><phpsyntax constant="DBX_CMP_ASC" usage="DBX_CMP_ASC - "/><phpsyntax constant="DBX_CMP_DESC" usage="DBX_CMP_DESC - "/><phpsyntax constant="DIRECTORY_SEPARATOR" usage="DIRECTORY_SEPARATOR - "/><phpsyntax constant="PATH_SEPARATOR" usage="PATH_SEPARATOR - "/><phpsyntax constant="XML_ELEMENT_NODE" usage="XML_ELEMENT_NODE - ">1</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_NODE" usage="XML_ATTRIBUTE_NODE - ">2</phpsyntax><phpsyntax constant="XML_TEXT_NODE" usage="XML_TEXT_NODE - ">3</phpsyntax><phpsyntax constant="XML_CDATA_SECTION_NODE" usage="XML_CDATA_SECTION_NODE - ">4</phpsyntax><phpsyntax constant="XML_ENTITY_REF_NODE" usage="XML_ENTITY_REF_NODE - ">5</phpsyntax><phpsyntax constant="XML_ENTITY_NODE" usage="XML_ENTITY_NODE - ">6</phpsyntax><phpsyntax constant="XML_PI_NODE" usage="XML_PI_NODE - ">7</phpsyntax><phpsyntax constant="XML_COMMENT_NODE" usage="XML_COMMENT_NODE - ">8</phpsyntax><phpsyntax constant="XML_DOCUMENT_NODE" usage="XML_DOCUMENT_NODE - ">9</phpsyntax><phpsyntax constant="XML_DOCUMENT_TYPE_NODE" usage="XML_DOCUMENT_TYPE_NODE - ">10</phpsyntax><phpsyntax constant="XML_DOCUMENT_FRAG_NODE" usage="XML_DOCUMENT_FRAG_NODE - ">11</phpsyntax><phpsyntax constant="XML_NOTATION_NODE" usage="XML_NOTATION_NODE - ">12</phpsyntax><phpsyntax constant="XML_HTML_DOCUMENT_NODE" usage="XML_HTML_DOCUMENT_NODE - ">13</phpsyntax><phpsyntax constant="XML_DTD_NODE" usage="XML_DTD_NODE - ">14</phpsyntax><phpsyntax constant="XML_ELEMENT_DECL_NODE" usage="XML_ELEMENT_DECL_NODE - ">15</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_DECL_NODE" usage="XML_ATTRIBUTE_DECL_NODE - ">16</phpsyntax><phpsyntax constant="XML_ENTITY_DECL_NODE" usage="XML_ENTITY_DECL_NODE - ">17</phpsyntax><phpsyntax constant="XML_NAMESPACE_DECL_NODE" usage="XML_NAMESPACE_DECL_NODE - ">18</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_CDATA" usage="XML_ATTRIBUTE_CDATA - ">1</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_ID" usage="XML_ATTRIBUTE_ID - ">2</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_IDREF" usage="XML_ATTRIBUTE_IDREF - ">3</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_IDREFS" usage="XML_ATTRIBUTE_IDREFS - ">4</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_ENTITY" usage="XML_ATTRIBUTE_ENTITY - ">5</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_NMTOKEN" usage="XML_ATTRIBUTE_NMTOKEN - ">7</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_NMTOKENS" usage="XML_ATTRIBUTE_NMTOKENS - ">8</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_ENUMERATION" usage="XML_ATTRIBUTE_ENUMERATION - ">9</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_NOTATION" usage="XML_ATTRIBUTE_NOTATION - ">10</phpsyntax><phpsyntax constant="DOM_INDEX_SIZE_ERR" usage="DOM_INDEX_SIZE_ERR - ">1</phpsyntax><phpsyntax constant="DOMSTRING_SIZE_ERR" usage="DOMSTRING_SIZE_ERR - ">2</phpsyntax><phpsyntax constant="DOM_HIERARCHY_REQUEST_ERR" usage="DOM_HIERARCHY_REQUEST_ERR - ">3</phpsyntax><phpsyntax constant="DOM_WRONG_DOCUMENT_ERR" usage="DOM_WRONG_DOCUMENT_ERR - ">4</phpsyntax><phpsyntax constant="DOM_INVALID_CHARACTER_ERR" usage="DOM_INVALID_CHARACTER_ERR - ">5</phpsyntax><phpsyntax constant="DOM_NO_DATA_ALLOWED_ERR" usage="DOM_NO_DATA_ALLOWED_ERR - ">6</phpsyntax><phpsyntax constant="DOM_NO_MODIFICATION_ALLOWED_ERR" usage="DOM_NO_MODIFICATION_ALLOWED_ERR - ">7</phpsyntax><phpsyntax constant="DOM_NOT_FOUND_ERR" usage="DOM_NOT_FOUND_ERR - ">8</phpsyntax><phpsyntax constant="DOM_NOT_SUPPORTED_ERR" usage="DOM_NOT_SUPPORTED_ERR - ">9</phpsyntax><phpsyntax constant="DOM_INUSE_ATTRIBUTE_ERR" usage="DOM_INUSE_ATTRIBUTE_ERR - ">10</phpsyntax><phpsyntax constant="DOM_INVALID_STATE_ERR" usage="DOM_INVALID_STATE_ERR - ">11</phpsyntax><phpsyntax constant="DOM_SYNTAX_ERR" usage="DOM_SYNTAX_ERR - ">12</phpsyntax><phpsyntax constant="DOM_INVALID_MODIFICATION_ERR" usage="DOM_INVALID_MODIFICATION_ERR - ">13</phpsyntax><phpsyntax constant="DOM_NAMESPACE_ERR" usage="DOM_NAMESPACE_ERR - ">14</phpsyntax><phpsyntax constant="DOM_INVALID_ACCESS_ERR" usage="DOM_INVALID_ACCESS_ERR - ">15</phpsyntax><phpsyntax constant="DOM_VALIDATION_ERR" usage="DOM_VALIDATION_ERR - ">16</phpsyntax><phpsyntax constant="XML_ELEMENT_NODE" usage="XML_ELEMENT_NODE - ">1</phpsyntax><phpsyntax constant="XML_ATTRIBUTE_NODE" usage="XML_ATTRIBUTE_NODE - ">2</phpsyntax><phpsyntax constant="XML_TEXT_NODE" usage="XML_TEXT_NODE - ">3</phpsyntax><phpsyntax constant="XML_CDATA_SECTION_NODE" usage="XML_CDATA_SECTION_NODE - ">4</phpsyntax><phpsyntax constant="XML_ENTITY_REF_NODE" usage="XML_ENTITY_REF_NODE - ">5</phpsyntax><phpsyntax constant="XML_ENTITY_NODE" usage="XML_ENTITY_NODE - ">6</phpsyntax><phpsyntax constant="XML_PI_NODE" usage="XML_PI_NODE - ">7</phpsyntax><phpsyntax constant="XML_COMMENT_NODE" usage="XML_COMMENT_NODE - ">8</phpsyntax><phpsyntax constant="XML_DOCUMENT_NODE" usage="XML_DOCUMENT_NODE - ">9</phpsyntax><phpsyntax constant="XML_DOCUMENT_TYPE_NODE" usage="XML_DOCUMENT_TYPE_NODE - ">10</phpsyntax><phpsyntax constant="XML_DOCUMENT_FRAG_NODE" usage="XML_DOCUMENT_FRAG_NODE - ">11</phpsyntax><phpsyntax constant="XML_NOTATION_NODE" usage="XML_NOTATION_NODE - ">12</phpsyntax><phpsyntax constant="XML_GLOBAL_NAMESPACE" usage="XML_GLOBAL_NAMESPACE - ">1</phpsyntax><phpsyntax constant="XML_LOCAL_NAMESPACE" usage="XML_LOCAL_NAMESPACE - ">2</phpsyntax><phpsyntax constant="XML_HTML_DOCUMENT_NODE" usage="XML_HTML_DOCUMENT_NODE - "/><phpsyntax constant="XML_DTD_NODE" usage="XML_DTD_NODE - "/><phpsyntax constant="XML_ELEMENT_DECL_NODE" usage="XML_ELEMENT_DECL_NODE - "/><phpsyntax constant="XML_ATTRIBUTE_DECL_NODE" usage="XML_ATTRIBUTE_DECL_NODE - "/><phpsyntax constant="XML_ENTITY_DECL_NODE" usage="XML_ENTITY_DECL_NODE - "/><phpsyntax constant="XML_NAMESPACE_DECL_NODE" usage="XML_NAMESPACE_DECL_NODE - "/><phpsyntax constant="XML_ATTRIBUTE_CDATA" usage="XML_ATTRIBUTE_CDATA - "/><phpsyntax constant="XML_ATTRIBUTE_ID" usage="XML_ATTRIBUTE_ID - "/><phpsyntax constant="XML_ATTRIBUTE_IDREF" usage="XML_ATTRIBUTE_IDREF - "/><phpsyntax constant="XML_ATTRIBUTE_IDREFS" usage="XML_ATTRIBUTE_IDREFS - "/><phpsyntax constant="XML_ATTRIBUTE_ENTITY" usage="XML_ATTRIBUTE_ENTITY - "/><phpsyntax constant="XML_ATTRIBUTE_NMTOKEN" usage="XML_ATTRIBUTE_NMTOKEN - "/><phpsyntax constant="XML_ATTRIBUTE_NMTOKENS" usage="XML_ATTRIBUTE_NMTOKENS - "/><phpsyntax constant="XML_ATTRIBUTE_ENUMERATION" usage="XML_ATTRIBUTE_ENUMERATION - "/><phpsyntax constant="XML_ATTRIBUTE_NOTATION" usage="XML_ATTRIBUTE_NOTATION - "/><phpsyntax constant="XPATH_UNDEFINED" usage="XPATH_UNDEFINED - "/><phpsyntax constant="XPATH_NODESET" usage="XPATH_NODESET - "/><phpsyntax constant="XPATH_BOOLEAN" usage="XPATH_BOOLEAN - "/><phpsyntax constant="XPATH_NUMBER" usage="XPATH_NUMBER - "/><phpsyntax constant="XPATH_STRING" usage="XPATH_STRING - "/><phpsyntax constant="XPATH_POINT" usage="XPATH_POINT - "/><phpsyntax constant="XPATH_RANGE" usage="XPATH_RANGE - "/><phpsyntax constant="XPATH_LOCATIONSET" usage="XPATH_LOCATIONSET - "/><phpsyntax constant="XPATH_USERS" usage="XPATH_USERS - "/><phpsyntax constant="XPATH_NUMBER" usage="XPATH_NUMBER - "/><phpsyntax constant="E_ERROR" usage="E_ERROR - ">Fatal run-time errors. These indicate errors that can not be
      recovered from, such as a memory allocation problem.
      Execution of the script is halted.</phpsyntax><phpsyntax constant="FAMC" usage="FAMC - ">Some value which can be obtained with fstat(1) changed for a
       file or directory.</phpsyntax><phpsyntax constant="FAMD" usage="FAMD - ">A file or directory was deleted or renamed.</phpsyntax><phpsyntax constant="FAMC" usage="FAMC - ">A file was created in a directory.</phpsyntax><phpsyntax constant="FAMM" usage="FAMM - ">This event never occurs.</phpsyntax><phpsyntax constant="FAMA" usage="FAMA - ">An event in response to fam_cancel_monitor.</phpsyntax><phpsyntax constant="FAME" usage="FAME - ">An event upon request to monitor a file or directory. When a
       directory is monitored, an event for that directory and every file
       contained in that directory is issued.</phpsyntax><phpsyntax constant="FBSQL_ASSOC" usage="FBSQL_ASSOC - "/><phpsyntax constant="FBSQL_NUM" usage="FBSQL_NUM - "/><phpsyntax constant="FBSQL_BOTH" usage="FBSQL_BOTH - "/><phpsyntax constant="FBSQL_LOCK_DEFERRED" usage="FBSQL_LOCK_DEFERRED - "/><phpsyntax constant="FBSQL_LOCK_OPTIMISTIC" usage="FBSQL_LOCK_OPTIMISTIC - "/><phpsyntax constant="FBSQL_LOCK_PESSIMISTIC" usage="FBSQL_LOCK_PESSIMISTIC - "/><phpsyntax constant="FBSQL_ISO_READ_UNCOMMITTED" usage="FBSQL_ISO_READ_UNCOMMITTED - "/><phpsyntax constant="FBSQL_ISO_READ_COMMITTED" usage="FBSQL_ISO_READ_COMMITTED - "/><phpsyntax constant="FBSQL_ISO_REPEATABLE_READ" usage="FBSQL_ISO_REPEATABLE_READ - "/><phpsyntax constant="FBSQL_ISO_SERIALIZABLE" usage="FBSQL_ISO_SERIALIZABLE - "/><phpsyntax constant="FBSQL_ISO_VERSIONED" usage="FBSQL_ISO_VERSIONED - "/><phpsyntax constant="FBSQL_UNKNOWN" usage="FBSQL_UNKNOWN - "/><phpsyntax constant="FBSQL_STOPPED" usage="FBSQL_STOPPED - "/><phpsyntax constant="FBSQL_STARTING" usage="FBSQL_STARTING - "/><phpsyntax constant="FBSQL_RUNNING" usage="FBSQL_RUNNING - "/><phpsyntax constant="FBSQL_STOPPING" usage="FBSQL_STOPPING - "/><phpsyntax constant="FBSQL_NOEXEC" usage="FBSQL_NOEXEC - "/><phpsyntax constant="FBSQL_LOB_DIRECT" usage="FBSQL_LOB_DIRECT - "/><phpsyntax constant="FBSQL_LOB_HANDLE" usage="FBSQL_LOB_HANDLE - "/><phpsyntax constant="FDFValue" usage="FDFValue - "/><phpsyntax constant="FDFStatus" usage="FDFStatus - "/><phpsyntax constant="FDFFile" usage="FDFFile - "/><phpsyntax constant="FDFID" usage="FDFID - "/><phpsyntax constant="FDFFf" usage="FDFFf - "/><phpsyntax constant="FDFSetFf" usage="FDFSetFf - "/><phpsyntax constant="FDFClearFf" usage="FDFClearFf - "/><phpsyntax constant="FDFFlags" usage="FDFFlags - "/><phpsyntax constant="FDFSetF" usage="FDFSetF - "/><phpsyntax constant="FDFClrF" usage="FDFClrF - "/><phpsyntax constant="FDFAP" usage="FDFAP - "/><phpsyntax constant="FDFAS" usage="FDFAS - "/><phpsyntax constant="FDFAction" usage="FDFAction - "/><phpsyntax constant="FDFAA" usage="FDFAA - "/><phpsyntax constant="FDFAPRef" usage="FDFAPRef - "/><phpsyntax constant="FDFIF" usage="FDFIF - "/><phpsyntax constant="FDFEnter" usage="FDFEnter - "/><phpsyntax constant="FDFExit" usage="FDFExit - "/><phpsyntax constant="FDFDown" usage="FDFDown - "/><phpsyntax constant="FDFUp" usage="FDFUp - "/><phpsyntax constant="FDFFormat" usage="FDFFormat - "/><phpsyntax constant="FDFValidate" usage="FDFValidate - "/><phpsyntax constant="FDFKeystroke" usage="FDFKeystroke - "/><phpsyntax constant="FDFCalculate" usage="FDFCalculate - "/><phpsyntax constant="FDFNormalAP" usage="FDFNormalAP - "/><phpsyntax constant="FDFRolloverAP" usage="FDFRolloverAP - "/><phpsyntax constant="FDFDownAP" usage="FDFDownAP - "/><phpsyntax constant="GLOB_BRACE" usage="GLOB_BRACE - "/><phpsyntax constant="GLOB_ONLYDIR" usage="GLOB_ONLYDIR - "/><phpsyntax constant="GLOB_MARK" usage="GLOB_MARK - "/><phpsyntax constant="GLOB_NOSORT" usage="GLOB_NOSORT - "/><phpsyntax constant="GLOB_NOCHECK" usage="GLOB_NOCHECK - "/><phpsyntax constant="GLOB_NOESCAPE" usage="GLOB_NOESCAPE - "/><phpsyntax constant="PATHINFO_DIRNAME" usage="PATHINFO_DIRNAME - "/><phpsyntax constant="PATHINFO_BASENAME" usage="PATHINFO_BASENAME - "/><phpsyntax constant="PATHINFO_EXTENSION" usage="PATHINFO_EXTENSION - "/><phpsyntax constant="FILE_USE_INCLUDE_PATH" usage="FILE_USE_INCLUDE_PATH - "/><phpsyntax constant="FILE_APPEND" usage="FILE_APPEND - "/><phpsyntax constant="FILE_IGNORE_NEW_LINES" usage="FILE_IGNORE_NEW_LINES - "/><phpsyntax constant="FILE_SKIP_EMPTY_LINES" usage="FILE_SKIP_EMPTY_LINES - "/><phpsyntax constant="FRIBIDI_CHARSET_UTF8" usage="FRIBIDI_CHARSET_UTF8 - "/><phpsyntax constant="FRIBIDI_CHARSET_8859_6" usage="FRIBIDI_CHARSET_8859_6 - "/><phpsyntax constant="FRIBIDI_CHARSET_8859_8" usage="FRIBIDI_CHARSET_8859_8 - "/><phpsyntax constant="FRIBIDI_CHARSET_CP1255" usage="FRIBIDI_CHARSET_CP1255 - "/><phpsyntax constant="FRIBIDI_CHARSET_CP1256" usage="FRIBIDI_CHARSET_CP1256 - "/><phpsyntax constant="FRIBIDI_CHARSET_ISIRI_3342" usage="FRIBIDI_CHARSET_ISIRI_3342 - "/><phpsyntax constant="FTP_ASCII" usage="FTP_ASCII - "/><phpsyntax constant="FTP_TEXT" usage="FTP_TEXT - "/><phpsyntax constant="FTP_BINARY" usage="FTP_BINARY - "/><phpsyntax constant="FTP_IMAGE" usage="FTP_IMAGE - "/><phpsyntax constant="FTP_TIMEOUT_SEC" usage="FTP_TIMEOUT_SEC - "/><phpsyntax constant="FTP_AUTOSEEK" usage="FTP_AUTOSEEK - "/><phpsyntax constant="FTP_AUTORESUME" usage="FTP_AUTORESUME - "/><phpsyntax constant="FTP_FAILED" usage="FTP_FAILED - "/><phpsyntax constant="FTP_FINISHED" usage="FTP_FINISHED - "/><phpsyntax constant="FTP_MOREDATA" usage="FTP_MOREDATA - "/><phpsyntax constant="GMP_ROUND_ZERO" usage="GMP_ROUND_ZERO - "/><phpsyntax constant="GMP_ROUND_PLUSINF" usage="GMP_ROUND_PLUSINF - "/><phpsyntax constant="GMP_ROUND_MINUSINF" usage="GMP_ROUND_MINUSINF - "/><phpsyntax constant="HW_ATTR_LANG" usage="HW_ATTR_LANG - "/><phpsyntax constant="HW_ATTR_NR" usage="HW_ATTR_NR - "/><phpsyntax constant="HW_ATTR_NONE" usage="HW_ATTR_NONE - "/><phpsyntax constant="IBASE_DEFAULT" usage="IBASE_DEFAULT - ">The default transaction settings are to be used. This default is
       determined by the client library, which defines it as
       IBASE_WRITE|IBASE_CONCURRENCY|IBASE_WAIT in most cases.</phpsyntax><phpsyntax constant="IBASE_READ" usage="IBASE_READ - ">Starts a read-only transaction.</phpsyntax><phpsyntax constant="IBASE_WRITE" usage="IBASE_WRITE - ">Starts a read-write transaction.</phpsyntax><phpsyntax constant="IBASE_CONSISTENCY" usage="IBASE_CONSISTENCY - ">Starts a transaction with the isolation level set to
       'consistency', which means the transaction cannot read from tables
       that are being modified by other concurrent transactions.</phpsyntax><phpsyntax constant="IBASE_CONCURRENCY" usage="IBASE_CONCURRENCY - ">Starts a transaction with the isolation level set to
       'concurrency' (or 'snapshot'), which means the transaction 
       has access to all tables, but cannot see changes that were committed
       by other transactions after the transaction was started.</phpsyntax><phpsyntax constant="IBASE_COMMITTED" usage="IBASE_COMMITTED - ">Starts a transaction with the isolation level set to
       'read committed'. This flag should be combined with either
       IBASE_REC_VERSION or 
       IBASE_REC_NO_VERSION. This isolation level
       allows access to changes that were committed after the transaction
       was started. If IBASE_REC_NO_VERSION was
       specified, only the latest version of a row can be read. If 
       IBASE_REC_VERSION was specified, a row can
       even be read when a modification to it is pending in a concurrent
       transaction.</phpsyntax><phpsyntax constant="IBASE_WAIT" usage="IBASE_WAIT - ">Indicated that a transaction should wait and retry when a
       conflict occurs.</phpsyntax><phpsyntax constant="IBASE_NOWAIT" usage="IBASE_NOWAIT - ">Indicated that a transaction should fail immediately when a
       conflict occurs.</phpsyntax><phpsyntax constant="IBASE_FETCH_BLOBS" usage="IBASE_FETCH_BLOBS - ">Also available as IBASE_TEXTfor backward
       compatibility. Causes BLOB contents to be fetched inline, instead of 
       being fetched as BLOB identifiers.</phpsyntax><phpsyntax constant="IBASE_FETCH_ARRAYS" usage="IBASE_FETCH_ARRAYS - ">Causes arrays to be fetched inline. Otherwise, array
       identifiers are returned. Array identifiers can only be used as
       arguments to INSERT operations, as no functions to handle array
       identifiers are currently available.</phpsyntax><phpsyntax constant="IBASE_UNIXTIME" usage="IBASE_UNIXTIME - ">Causes date and time fields not to be returned as strings,
       but as UNIX timestamps (the number of seconds since the epoch, which
       is 1-Jan-1970 0:00 UTC). Might be problematic if used with dates
       before 1970 on some systems.</phpsyntax><phpsyntax constant="ICONV_IMPL" usage="ICONV_IMPL - ">string</phpsyntax><phpsyntax constant="ICONV_VERSION" usage="ICONV_VERSION - ">string</phpsyntax><phpsyntax constant="ICONV_MIME_DECODE_STRICT" usage="ICONV_MIME_DECODE_STRICT - ">integer</phpsyntax><phpsyntax constant="ICONV_MIME_DECODE_CONTINUE_ON_ERROR" usage="ICONV_MIME_DECODE_CONTINUE_ON_ERROR - ">integer</phpsyntax><phpsyntax constant="IMG_GIF" usage="IMG_GIF - "/><phpsyntax constant="IMG_JPG" usage="IMG_JPG - "/><phpsyntax constant="IMG_JPEG" usage="IMG_JPEG - "/><phpsyntax constant="IMG_PNG" usage="IMG_PNG - "/><phpsyntax constant="IMG_WBMP" usage="IMG_WBMP - "/><phpsyntax constant="IMG_XPM" usage="IMG_XPM - "/><phpsyntax constant="IMG_COLOR_TILED" usage="IMG_COLOR_TILED - "/><phpsyntax constant="IMG_COLOR_STYLED" usage="IMG_COLOR_STYLED - "/><phpsyntax constant="IMG_COLOR_BRUSHED" usage="IMG_COLOR_BRUSHED - "/><phpsyntax constant="IMG_COLOR_STYLEDBRUSHED" usage="IMG_COLOR_STYLEDBRUSHED - "/><phpsyntax constant="IMG_COLOR_TRANSPARENT" usage="IMG_COLOR_TRANSPARENT - "/><phpsyntax constant="IMG_ARC_ROUNDED" usage="IMG_ARC_ROUNDED - "/><phpsyntax constant="IMG_ARC_PIE" usage="IMG_ARC_PIE - "/><phpsyntax constant="IMG_ARC_CHORD" usage="IMG_ARC_CHORD - "/><phpsyntax constant="IMG_ARC_NOFILL" usage="IMG_ARC_NOFILL - "/><phpsyntax constant="IMG_ARC_EDGED" usage="IMG_ARC_EDGED - "/><phpsyntax constant="IMAGETYPE_GIF" usage="IMAGETYPE_GIF - "/><phpsyntax constant="IMAGETYPE_JPEG" usage="IMAGETYPE_JPEG - "/><phpsyntax constant="IMAGETYPE_PNG" usage="IMAGETYPE_PNG - "/><phpsyntax constant="IMAGETYPE_SWF" usage="IMAGETYPE_SWF - "/><phpsyntax constant="IMAGETYPE_PSD" usage="IMAGETYPE_PSD - "/><phpsyntax constant="IMAGETYPE_BMP" usage="IMAGETYPE_BMP - "/><phpsyntax constant="IMAGETYPE_WBMP" usage="IMAGETYPE_WBMP - "/><phpsyntax constant="IMAGETYPE_XBM" usage="IMAGETYPE_XBM - "/><phpsyntax constant="IMAGETYPE_TIFF_II" usage="IMAGETYPE_TIFF_II - "/><phpsyntax constant="IMAGETYPE_TIFF_MM" usage="IMAGETYPE_TIFF_MM - "/><phpsyntax constant="IMAGETYPE_IFF" usage="IMAGETYPE_IFF - "/><phpsyntax constant="IMAGETYPE_JB2" usage="IMAGETYPE_JB2 - "/><phpsyntax constant="IMAGETYPE_JPC" usage="IMAGETYPE_JPC - "/><phpsyntax constant="IMAGETYPE_JP2" usage="IMAGETYPE_JP2 - "/><phpsyntax constant="IMAGETYPE_JPX" usage="IMAGETYPE_JPX - "/><phpsyntax constant="IMAGETYPE_SWC" usage="IMAGETYPE_SWC - "/><phpsyntax constant="NIL" usage="NIL - "/><phpsyntax constant="OP_DEBUG" usage="OP_DEBUG - "/><phpsyntax constant="OP_READONLY" usage="OP_READONLY - "/><phpsyntax constant="OP_ANONYMOUS" usage="OP_ANONYMOUS - "/><phpsyntax constant="OP_SHORTCACHE" usage="OP_SHORTCACHE - "/><phpsyntax constant="OP_SILENT" usage="OP_SILENT - "/><phpsyntax constant="OP_PROTOTYPE" usage="OP_PROTOTYPE - "/><phpsyntax constant="OP_HALFOPEN" usage="OP_HALFOPEN - "/><phpsyntax constant="OP_EXPUNGE" usage="OP_EXPUNGE - "/><phpsyntax constant="OP_SECURE" usage="OP_SECURE - "/><phpsyntax constant="CL_EXPUNGE" usage="CL_EXPUNGE - "/><phpsyntax constant="FT_UID" usage="FT_UID - "/><phpsyntax constant="FT_PEEK" usage="FT_PEEK - "/><phpsyntax constant="FT_NOT" usage="FT_NOT - "/><phpsyntax constant="FT_INTERNAL" usage="FT_INTERNAL - "/><phpsyntax constant="FT_PREFETCHTEXT" usage="FT_PREFETCHTEXT - "/><phpsyntax constant="ST_UID" usage="ST_UID - "/><phpsyntax constant="ST_SILENT" usage="ST_SILENT - "/><phpsyntax constant="ST_SET" usage="ST_SET - "/><phpsyntax constant="CP_UID" usage="CP_UID - "/><phpsyntax constant="CP_MOVE" usage="CP_MOVE - "/><phpsyntax constant="SE_UID" usage="SE_UID - "/><phpsyntax constant="SE_FREE" usage="SE_FREE - "/><phpsyntax constant="SE_NOPREFETCH" usage="SE_NOPREFETCH - "/><phpsyntax constant="SO_FREE" usage="SO_FREE - "/><phpsyntax constant="SO_NOSERVER" usage="SO_NOSERVER - "/><phpsyntax constant="SA_MESSAGES" usage="SA_MESSAGES - "/><phpsyntax constant="SA_RECENT" usage="SA_RECENT - "/><phpsyntax constant="SA_UNSEEN" usage="SA_UNSEEN - "/><phpsyntax constant="SA_UIDNEXT" usage="SA_UIDNEXT - "/><phpsyntax constant="SA_UIDVALIDITY" usage="SA_UIDVALIDITY - "/><phpsyntax constant="SA_ALL" usage="SA_ALL - "/><phpsyntax constant="LATT_NOINFERIORS" usage="LATT_NOINFERIORS - "/><phpsyntax constant="LATT_NOSELECT" usage="LATT_NOSELECT - "/><phpsyntax constant="LATT_MARKED" usage="LATT_MARKED - "/><phpsyntax constant="LATT_UNMARKED" usage="LATT_UNMARKED - "/><phpsyntax constant="SORTDATE" usage="SORTDATE - "/><phpsyntax constant="SORTARRIVAL" usage="SORTARRIVAL - "/><phpsyntax constant="SORTFROM" usage="SORTFROM - "/><phpsyntax constant="SORTSUBJECT" usage="SORTSUBJECT - "/><phpsyntax constant="SORTTO" usage="SORTTO - "/><phpsyntax constant="SORTCC" usage="SORTCC - "/><phpsyntax constant="SORTSIZE" usage="SORTSIZE - "/><phpsyntax constant="TYPETEXT" usage="TYPETEXT - "/><phpsyntax constant="TYPEMULTIPART" usage="TYPEMULTIPART - "/><phpsyntax constant="TYPEMESSAGE" usage="TYPEMESSAGE - "/><phpsyntax constant="TYPEAPPLICATION" usage="TYPEAPPLICATION - "/><phpsyntax constant="TYPEAUDIO" usage="TYPEAUDIO - "/><phpsyntax constant="TYPEIMAGE" usage="TYPEIMAGE - "/><phpsyntax constant="TYPEVIDEO" usage="TYPEVIDEO - "/><phpsyntax constant="TYPEOTHER" usage="TYPEOTHER - "/><phpsyntax constant="ENC7BIT" usage="ENC7BIT - "/><phpsyntax constant="ENC8BIT" usage="ENC8BIT - "/><phpsyntax constant="ENCBINARY" usage="ENCBINARY - "/><phpsyntax constant="ENCBASE64" usage="ENCBASE64 - "/><phpsyntax constant="ENCQUOTEDPRINTABLE" usage="ENCQUOTEDPRINTABLE - "/><phpsyntax constant="ENCOTHER" usage="ENCOTHER - "/><phpsyntax constant="CREDITS_GROUP" usage="CREDITS_GROUP - ">1</phpsyntax><phpsyntax constant="CREDITS_GENERAL" usage="CREDITS_GENERAL - ">2</phpsyntax><phpsyntax constant="CREDITS_SAPI" usage="CREDITS_SAPI - ">4</phpsyntax><phpsyntax constant="CREDITS_MODULES" usage="CREDITS_MODULES - ">8</phpsyntax><phpsyntax constant="CREDITS_DOCS" usage="CREDITS_DOCS - ">16</phpsyntax><phpsyntax constant="CREDITS_FULLPAGE" usage="CREDITS_FULLPAGE - ">32</phpsyntax><phpsyntax constant="CREDITS_QA" usage="CREDITS_QA - ">64</phpsyntax><phpsyntax constant="CREDITS_ALL" usage="CREDITS_ALL - ">-1</phpsyntax><phpsyntax constant="INFO_GENERAL" usage="INFO_GENERAL - ">1</phpsyntax><phpsyntax constant="INFO_CREDITS" usage="INFO_CREDITS - ">2</phpsyntax><phpsyntax constant="INFO_CONFIGURATION" usage="INFO_CONFIGURATION - ">4</phpsyntax><phpsyntax constant="INFO_MODULES" usage="INFO_MODULES - ">8</phpsyntax><phpsyntax constant="INFO_ENVIRONMENT" usage="INFO_ENVIRONMENT - ">16</phpsyntax><phpsyntax constant="INFO_VARIABLES" usage="INFO_VARIABLES - ">32</phpsyntax><phpsyntax constant="INFO_LICENSE" usage="INFO_LICENSE - ">64</phpsyntax><phpsyntax constant="INFO_ALL" usage="INFO_ALL - ">-1</phpsyntax><phpsyntax constant="INGRES_ASSOC" usage="INGRES_ASSOC - "/><phpsyntax constant="INGRES_NUM" usage="INGRES_NUM - "/><phpsyntax constant="INGRES_BOTH" usage="INGRES_BOTH - "/><phpsyntax constant="LDAP_DEREF_NEVER" usage="LDAP_DEREF_NEVER - "/><phpsyntax constant="LDAP_DEREF_SEARCHING" usage="LDAP_DEREF_SEARCHING - "/><phpsyntax constant="LDAP_DEREF_FINDING" usage="LDAP_DEREF_FINDING - "/><phpsyntax constant="LDAP_DEREF_ALWAYS" usage="LDAP_DEREF_ALWAYS - "/><phpsyntax constant="LDAP_OPT_DEREF" usage="LDAP_OPT_DEREF - "/><phpsyntax constant="LDAP_OPT_SIZELIMIT" usage="LDAP_OPT_SIZELIMIT - "/><phpsyntax constant="LDAP_OPT_TIMELIMIT" usage="LDAP_OPT_TIMELIMIT - "/><phpsyntax constant="LDAP_OPT_PROTOCOL_VERSION" usage="LDAP_OPT_PROTOCOL_VERSION - "/><phpsyntax constant="LDAP_OPT_ERROR_NUMBER" usage="LDAP_OPT_ERROR_NUMBER - "/><phpsyntax constant="LDAP_OPT_REFERRALS" usage="LDAP_OPT_REFERRALS - "/><phpsyntax constant="LDAP_OPT_RESTART" usage="LDAP_OPT_RESTART - "/><phpsyntax constant="LDAP_OPT_HOST_NAME" usage="LDAP_OPT_HOST_NAME - "/><phpsyntax constant="LDAP_OPT_ERROR_STRING" usage="LDAP_OPT_ERROR_STRING - "/><phpsyntax constant="LDAP_OPT_MATCHED_DN" usage="LDAP_OPT_MATCHED_DN - "/><phpsyntax constant="LDAP_OPT_SERVER_CONTROLS" usage="LDAP_OPT_SERVER_CONTROLS - "/><phpsyntax constant="LDAP_OPT_CLIENT_CONTROLS" usage="LDAP_OPT_CLIENT_CONTROLS - "/><phpsyntax constant="LDAP_OPT_DEBUG_LEVEL" usage="LDAP_OPT_DEBUG_LEVEL - "/><phpsyntax constant="GSLC_SSL_NO_AUTH" usage="GSLC_SSL_NO_AUTH - "/><phpsyntax constant="GSLC_SSL_ONEWAY_AUTH" usage="GSLC_SSL_ONEWAY_AUTH - "/><phpsyntax constant="GSLC_SSL_TWOWAY_AUTH" usage="GSLC_SSL_TWOWAY_AUTH - "/><phpsyntax constant="M_PI" usage="M_PI - ">3.14159265358979323846</phpsyntax><phpsyntax constant="M_E" usage="M_E - ">2.7182818284590452354</phpsyntax><phpsyntax constant="M_LOG2E" usage="M_LOG2E - ">1.4426950408889634074</phpsyntax><phpsyntax constant="M_LOG10E" usage="M_LOG10E - ">0.43429448190325182765</phpsyntax><phpsyntax constant="M_LN2" usage="M_LN2 - ">0.69314718055994530942</phpsyntax><phpsyntax constant="M_LN10" usage="M_LN10 - ">2.30258509299404568402</phpsyntax><phpsyntax constant="M_PI_2" usage="M_PI_2 - ">1.57079632679489661923</phpsyntax><phpsyntax constant="M_PI_4" usage="M_PI_4 - ">0.78539816339744830962</phpsyntax><phpsyntax constant="M_1_PI" usage="M_1_PI - ">0.31830988618379067154</phpsyntax><phpsyntax constant="M_2_PI" usage="M_2_PI - ">0.63661977236758134308</phpsyntax><phpsyntax constant="M_SQRTPI" usage="M_SQRTPI - ">1.77245385090551602729</phpsyntax><phpsyntax constant="M_2_SQRTPI" usage="M_2_SQRTPI - ">1.12837916709551257390</phpsyntax><phpsyntax constant="M_SQRT2" usage="M_SQRT2 - ">1.41421356237309504880</phpsyntax><phpsyntax constant="M_SQRT3" usage="M_SQRT3 - ">1.73205080756887729352</phpsyntax><phpsyntax constant="M_SQRT1_2" usage="M_SQRT1_2 - ">0.70710678118654752440</phpsyntax><phpsyntax constant="M_LNPI" usage="M_LNPI - ">1.14472988584940017414</phpsyntax><phpsyntax constant="M_EULER" usage="M_EULER - ">0.57721566490153286061</phpsyntax><phpsyntax constant="MB_OVERLOAD_MAIL" usage="MB_OVERLOAD_MAIL - "/><phpsyntax constant="MB_OVERLOAD_STRING" usage="MB_OVERLOAD_STRING - "/><phpsyntax constant="MB_OVERLOAD_REGEX" usage="MB_OVERLOAD_REGEX - "/><phpsyntax constant="MCAL_SUNDAY" usage="MCAL_SUNDAY - "/><phpsyntax constant="MCAL_MONDAY" usage="MCAL_MONDAY - "/><phpsyntax constant="MCAL_TUESDAY" usage="MCAL_TUESDAY - "/><phpsyntax constant="MCAL_WEDNESDAY" usage="MCAL_WEDNESDAY - "/><phpsyntax constant="MCAL_THURSDAY" usage="MCAL_THURSDAY - "/><phpsyntax constant="MCAL_FRIDAY" usage="MCAL_FRIDAY - "/><phpsyntax constant="MCAL_SATURDAY" usage="MCAL_SATURDAY - "/><phpsyntax constant="MCAL_JANUARY" usage="MCAL_JANUARY - "/><phpsyntax constant="MCAL_FEBRUARY" usage="MCAL_FEBRUARY - "/><phpsyntax constant="MCAL_MARCH" usage="MCAL_MARCH - "/><phpsyntax constant="MCAL_APRIL" usage="MCAL_APRIL - "/><phpsyntax constant="MCAL_MAY" usage="MCAL_MAY - "/><phpsyntax constant="MCAL_JUNE" usage="MCAL_JUNE - "/><phpsyntax constant="MCAL_JULY" usage="MCAL_JULY - "/><phpsyntax constant="MCAL_AUGUST" usage="MCAL_AUGUST - "/><phpsyntax constant="MCAL_SEPTEMBER" usage="MCAL_SEPTEMBER - "/><phpsyntax constant="MCAL_OCTOBER" usage="MCAL_OCTOBER - "/><phpsyntax constant="MCAL_NOVEMBER" usage="MCAL_NOVEMBER - "/><phpsyntax constant="MCAL_DECEMBER" usage="MCAL_DECEMBER - "/><phpsyntax constant="MCAL_RECUR_NONE" usage="MCAL_RECUR_NONE - "/><phpsyntax constant="MCAL_RECUR_DAILY" usage="MCAL_RECUR_DAILY - "/><phpsyntax constant="MCAL_RECUR_WEEKLY" usage="MCAL_RECUR_WEEKLY - "/><phpsyntax constant="MCAL_RECUR_MONTHLY_MDAY" usage="MCAL_RECUR_MONTHLY_MDAY - "/><phpsyntax constant="MCAL_RECUR_MONTHLY_WDAY" usage="MCAL_RECUR_MONTHLY_WDAY - "/><phpsyntax constant="MCAL_RECUR_YEARLY" usage="MCAL_RECUR_YEARLY - "/><phpsyntax constant="MCAL_M_SUNDAY" usage="MCAL_M_SUNDAY - "/><phpsyntax constant="MCAL_M_MONDAY" usage="MCAL_M_MONDAY - "/><phpsyntax constant="MCAL_M_TUESDAY" usage="MCAL_M_TUESDAY - "/><phpsyntax constant="MCAL_M_WEDNESDAY" usage="MCAL_M_WEDNESDAY - "/><phpsyntax constant="MCAL_M_THURSDAY" usage="MCAL_M_THURSDAY - "/><phpsyntax constant="MCAL_M_FRIDAY" usage="MCAL_M_FRIDAY - "/><phpsyntax constant="MCAL_M_SATURDAY" usage="MCAL_M_SATURDAY - "/><phpsyntax constant="MCAL_M_WEEKDAYS" usage="MCAL_M_WEEKDAYS - "/><phpsyntax constant="MCAL_M_WEEKEND" usage="MCAL_M_WEEKEND - "/><phpsyntax constant="MCAL_M_ALLDAYS" usage="MCAL_M_ALLDAYS - "/><phpsyntax constant="MCRYPT_ENCRYPT" usage="MCRYPT_ENCRYPT - "/><phpsyntax constant="MCRYPT_DECRYPT" usage="MCRYPT_DECRYPT - "/><phpsyntax constant="MCRYPT_DEV_RANDOM" usage="MCRYPT_DEV_RANDOM - "/><phpsyntax constant="MCRYPT_DEV_URANDOM" usage="MCRYPT_DEV_URANDOM - "/><phpsyntax constant="MCRYPT_RAND" usage="MCRYPT_RAND - "/><phpsyntax constant="MC_TRANTYPE" usage="MC_TRANTYPE - "/><phpsyntax constant="MC_USERNAME" usage="MC_USERNAME - "/><phpsyntax constant="MC_PASSWORD" usage="MC_PASSWORD - "/><phpsyntax constant="MC_ACCOUNT" usage="MC_ACCOUNT - "/><phpsyntax constant="MC_TRACKDATA" usage="MC_TRACKDATA - "/><phpsyntax constant="MC_EXPDATE" usage="MC_EXPDATE - "/><phpsyntax constant="MC_STREET" usage="MC_STREET - "/><phpsyntax constant="MC_ZIP" usage="MC_ZIP - "/><phpsyntax constant="MC_CV" usage="MC_CV - "/><phpsyntax constant="MC_COMMENTS" usage="MC_COMMENTS - "/><phpsyntax constant="MC_CLERKID" usage="MC_CLERKID - "/><phpsyntax constant="MC_STATIONID" usage="MC_STATIONID - "/><phpsyntax constant="MC_APPRCODE" usage="MC_APPRCODE - "/><phpsyntax constant="MC_AMOUNT" usage="MC_AMOUNT - "/><phpsyntax constant="MC_PTRANNUM" usage="MC_PTRANNUM - "/><phpsyntax constant="MC_TTID" usage="MC_TTID - "/><phpsyntax constant="MC_USER" usage="MC_USER - "/><phpsyntax constant="MC_PWD" usage="MC_PWD - "/><phpsyntax constant="MC_ACCT" usage="MC_ACCT - "/><phpsyntax constant="MC_BDATE" usage="MC_BDATE - "/><phpsyntax constant="MC_EDATE" usage="MC_EDATE - "/><phpsyntax constant="MC_BATCH" usage="MC_BATCH - "/><phpsyntax constant="MC_FILE" usage="MC_FILE - "/><phpsyntax constant="MC_ADMIN" usage="MC_ADMIN - "/><phpsyntax constant="MC_AUDITTYPE" usage="MC_AUDITTYPE - "/><phpsyntax constant="MC_CUSTOM" usage="MC_CUSTOM - "/><phpsyntax constant="MC_EXAMOUNT" usage="MC_EXAMOUNT - "/><phpsyntax constant="MC_EXCHARGES" usage="MC_EXCHARGES - "/><phpsyntax constant="MC_RATE" usage="MC_RATE - "/><phpsyntax constant="MC_RENTERNAME" usage="MC_RENTERNAME - "/><phpsyntax constant="MC_RETURNCITY" usage="MC_RETURNCITY - "/><phpsyntax constant="MC_RETURNSTATE" usage="MC_RETURNSTATE - "/><phpsyntax constant="MC_RETURNLOCATION" usage="MC_RETURNLOCATION - "/><phpsyntax constant="MC_PRIORITY" usage="MC_PRIORITY - "/><phpsyntax constant="MC_INQUIRY" usage="MC_INQUIRY - "/><phpsyntax constant="MC_CARDTYPES" usage="MC_CARDTYPES - "/><phpsyntax constant="MC_SUB" usage="MC_SUB - "/><phpsyntax constant="MC_MARKER" usage="MC_MARKER - "/><phpsyntax constant="MC_DEVICETYPE" usage="MC_DEVICETYPE - "/><phpsyntax constant="MC_ERRORCODE" usage="MC_ERRORCODE - "/><phpsyntax constant="MC_NEWBATCH" usage="MC_NEWBATCH - "/><phpsyntax constant="MC_CURR" usage="MC_CURR - "/><phpsyntax constant="MC_DESCMERCH" usage="MC_DESCMERCH - "/><phpsyntax constant="MC_DESCLOC" usage="MC_DESCLOC - "/><phpsyntax constant="MC_ORIGTYPE" usage="MC_ORIGTYPE - "/><phpsyntax constant="MC_PIN" usage="MC_PIN - "/><phpsyntax constant="MC_VOIDORIGTYPE" usage="MC_VOIDORIGTYPE - "/><phpsyntax constant="MC_TIMESTAMP" usage="MC_TIMESTAMP - "/><phpsyntax constant="MC_PRIO_HIGH" usage="MC_PRIO_HIGH - "/><phpsyntax constant="MC_PRIO_NORMAL" usage="MC_PRIO_NORMAL - "/><phpsyntax constant="MC_PRIO_LOW" usage="MC_PRIO_LOW - "/><phpsyntax constant="MC_USER_PROC" usage="MC_USER_PROC - "/><phpsyntax constant="MC_USER_USER" usage="MC_USER_USER - "/><phpsyntax constant="MC_USER_PWD" usage="MC_USER_PWD - "/><phpsyntax constant="MC_USER_INDCODE" usage="MC_USER_INDCODE - "/><phpsyntax constant="MC_USER_MERCHID" usage="MC_USER_MERCHID - "/><phpsyntax constant="MC_USER_BANKID" usage="MC_USER_BANKID - "/><phpsyntax constant="MC_USER_TERMID" usage="MC_USER_TERMID - "/><phpsyntax constant="MC_USER_CLIENTNUM" usage="MC_USER_CLIENTNUM - "/><phpsyntax constant="MC_USER_STOREID" usage="MC_USER_STOREID - "/><phpsyntax constant="MC_USER_AGENTID" usage="MC_USER_AGENTID - "/><phpsyntax constant="MC_USER_CHAINID" usage="MC_USER_CHAINID - "/><phpsyntax constant="MC_USER_ZIPCODE" usage="MC_USER_ZIPCODE - "/><phpsyntax constant="MC_USER_TIMEZONE" usage="MC_USER_TIMEZONE - "/><phpsyntax constant="MC_USER_MERCHCAT" usage="MC_USER_MERCHCAT - "/><phpsyntax constant="MC_USER_MERNAME" usage="MC_USER_MERNAME - "/><phpsyntax constant="MC_USER_MERCHLOC" usage="MC_USER_MERCHLOC - "/><phpsyntax constant="MC_USER_STATECODE" usage="MC_USER_STATECODE - "/><phpsyntax constant="MC_USER_PHONE" usage="MC_USER_PHONE - "/><phpsyntax constant="MC_USER_SUB" usage="MC_USER_SUB - "/><phpsyntax constant="MC_USER_CARDTYPES" usage="MC_USER_CARDTYPES - "/><phpsyntax constant="MC_USER_MODE" usage="MC_USER_MODE - "/><phpsyntax constant="MC_USER_VNUMBER" usage="MC_USER_VNUMBER - "/><phpsyntax constant="MC_USER_ROUTINGID" usage="MC_USER_ROUTINGID - "/><phpsyntax constant="MC_USER_PPROPERTY" usage="MC_USER_PPROPERTY - "/><phpsyntax constant="MC_USER_PID" usage="MC_USER_PID - "/><phpsyntax constant="MC_USER_PIDPWD" usage="MC_USER_PIDPWD - "/><phpsyntax constant="MC_USER_SMID" usage="MC_USER_SMID - "/><phpsyntax constant="MC_USER_SMIDPWD" usage="MC_USER_SMIDPWD - "/><phpsyntax constant="MC_USER_USDDIV" usage="MC_USER_USDDIV - "/><phpsyntax constant="MC_USER_AUDDIV" usage="MC_USER_AUDDIV - "/><phpsyntax constant="MC_USER_DKKDIV" usage="MC_USER_DKKDIV - "/><phpsyntax constant="MC_USER_GBPDIV" usage="MC_USER_GBPDIV - "/><phpsyntax constant="MC_USER_HKDDIV" usage="MC_USER_HKDDIV - "/><phpsyntax constant="MC_USER_JPYDIV" usage="MC_USER_JPYDIV - "/><phpsyntax constant="MC_USER_NZDDIV" usage="MC_USER_NZDDIV - "/><phpsyntax constant="MC_USER_NOKDIV" usage="MC_USER_NOKDIV - "/><phpsyntax constant="MC_USER_SGDDIV" usage="MC_USER_SGDDIV - "/><phpsyntax constant="MC_USER_ZARDIV" usage="MC_USER_ZARDIV - "/><phpsyntax constant="MC_USER_SEKDIV" usage="MC_USER_SEKDIV - "/><phpsyntax constant="MC_USER_CHFDIV" usage="MC_USER_CHFDIV - "/><phpsyntax constant="MC_USER_CADDIV" usage="MC_USER_CADDIV - "/><phpsyntax constant="MC_USER_DIVNUM" usage="MC_USER_DIVNUM - "/><phpsyntax constant="MC_CARD_VISA" usage="MC_CARD_VISA - "/><phpsyntax constant="MC_CARD_MC" usage="MC_CARD_MC - "/><phpsyntax constant="MC_CARD_AMEX" usage="MC_CARD_AMEX - "/><phpsyntax constant="MC_CARD_DISC" usage="MC_CARD_DISC - "/><phpsyntax constant="MC_CARD_JCB" usage="MC_CARD_JCB - "/><phpsyntax constant="MC_CARD_CB" usage="MC_CARD_CB - "/><phpsyntax constant="MC_CARD_DC" usage="MC_CARD_DC - "/><phpsyntax constant="MC_CARD_GIFT" usage="MC_CARD_GIFT - "/><phpsyntax constant="MC_CARD_OTHER" usage="MC_CARD_OTHER - "/><phpsyntax constant="MC_CARD_ALL" usage="MC_CARD_ALL - "/><phpsyntax constant="MC_MODE_AUTH" usage="MC_MODE_AUTH - "/><phpsyntax constant="MC_MODE_SETTLE" usage="MC_MODE_SETTLE - "/><phpsyntax constant="MC_MODE_BOTH" usage="MC_MODE_BOTH - "/><phpsyntax constant="MC_MODE_ALL" usage="MC_MODE_ALL - "/><phpsyntax constant="MC_EXCHARGES_REST" usage="MC_EXCHARGES_REST - "/><phpsyntax constant="MC_EXCHARGES_GIFT" usage="MC_EXCHARGES_GIFT - "/><phpsyntax constant="MC_EXCHARGES_MINI" usage="MC_EXCHARGES_MINI - "/><phpsyntax constant="MC_EXCHARGES_TELE" usage="MC_EXCHARGES_TELE - "/><phpsyntax constant="MC_EXCHARGES_OTHER" usage="MC_EXCHARGES_OTHER - "/><phpsyntax constant="MC_EXCHARGES_LAUND" usage="MC_EXCHARGES_LAUND - "/><phpsyntax constant="MC_EXCHARGES_NONE" usage="MC_EXCHARGES_NONE - "/><phpsyntax constant="MC_EXCHARGES_GAS" usage="MC_EXCHARGES_GAS - "/><phpsyntax constant="MC_EXCHARGES_MILE" usage="MC_EXCHARGES_MILE - "/><phpsyntax constant="MC_EXCHARGES_LATE" usage="MC_EXCHARGES_LATE - "/><phpsyntax constant="MC_EXCHARGES_1WAY" usage="MC_EXCHARGES_1WAY - "/><phpsyntax constant="MC_EXCHARGES_VIOL" usage="MC_EXCHARGES_VIOL - "/><phpsyntax constant="MC_TRAN_SALE" usage="MC_TRAN_SALE - "/><phpsyntax constant="MC_TRAN_REDEMPTION" usage="MC_TRAN_REDEMPTION - "/><phpsyntax constant="MC_TRAN_PREAUTH" usage="MC_TRAN_PREAUTH - "/><phpsyntax constant="MC_TRAN_VOID" usage="MC_TRAN_VOID - "/><phpsyntax constant="MC_TRAN_PREAUTHCOMPLETE" usage="MC_TRAN_PREAUTHCOMPLETE - "/><phpsyntax constant="MC_TRAN_FORCE" usage="MC_TRAN_FORCE - "/><phpsyntax constant="MC_TRAN_OVERRIDE" usage="MC_TRAN_OVERRIDE - "/><phpsyntax constant="MC_TRAN_RETURN" usage="MC_TRAN_RETURN - "/><phpsyntax constant="MC_TRAN_RELOAD" usage="MC_TRAN_RELOAD - "/><phpsyntax constant="MC_TRAN_CREDIT" usage="MC_TRAN_CREDIT - "/><phpsyntax constant="MC_TRAN_SETTLE" usage="MC_TRAN_SETTLE - "/><phpsyntax constant="MC_TRAN_INCREMENTAL" usage="MC_TRAN_INCREMENTAL - "/><phpsyntax constant="MC_TRAN_REVERSAL" usage="MC_TRAN_REVERSAL - "/><phpsyntax constant="MC_TRAN_ACTIVATE" usage="MC_TRAN_ACTIVATE - "/><phpsyntax constant="MC_TRAN_BALANCEINQ" usage="MC_TRAN_BALANCEINQ - "/><phpsyntax constant="MC_TRAN_CASHOUT" usage="MC_TRAN_CASHOUT - "/><phpsyntax constant="MC_TRAN_TOREVERSAL" usage="MC_TRAN_TOREVERSAL - "/><phpsyntax constant="MC_TRAN_SETTLERFR" usage="MC_TRAN_SETTLERFR - "/><phpsyntax constant="MC_TRAN_ISSUE" usage="MC_TRAN_ISSUE - "/><phpsyntax constant="MC_TRAN_TIP" usage="MC_TRAN_TIP - "/><phpsyntax constant="MC_TRAN_MERCHRETURN" usage="MC_TRAN_MERCHRETURN - "/><phpsyntax constant="MC_TRAN_IVRREQ" usage="MC_TRAN_IVRREQ - "/><phpsyntax constant="MC_TRAN_IVRRESP" usage="MC_TRAN_IVRRESP - "/><phpsyntax constant="MC_TRAN_ADMIN" usage="MC_TRAN_ADMIN - "/><phpsyntax constant="MC_TRAN_PING" usage="MC_TRAN_PING - "/><phpsyntax constant="MC_TRAN_CHKPWD" usage="MC_TRAN_CHKPWD - "/><phpsyntax constant="MC_TRAN_CHNGPWD" usage="MC_TRAN_CHNGPWD - "/><phpsyntax constant="MC_TRAN_LISTSTATS" usage="MC_TRAN_LISTSTATS - "/><phpsyntax constant="MC_TRAN_LISTUSERS" usage="MC_TRAN_LISTUSERS - "/><phpsyntax constant="MC_TRAN_GETUSERINFO" usage="MC_TRAN_GETUSERINFO - "/><phpsyntax constant="MC_TRAN_ADDUSER" usage="MC_TRAN_ADDUSER - "/><phpsyntax constant="MC_TRAN_EDITUSER" usage="MC_TRAN_EDITUSER - "/><phpsyntax constant="MC_TRAN_DELUSER" usage="MC_TRAN_DELUSER - "/><phpsyntax constant="MC_TRAN_ENABLEUSER" usage="MC_TRAN_ENABLEUSER - "/><phpsyntax constant="MC_TRAN_DISABLEUSER" usage="MC_TRAN_DISABLEUSER - "/><phpsyntax constant="MC_TRAN_IMPORT" usage="MC_TRAN_IMPORT - "/><phpsyntax constant="MC_TRAN_EXPORT" usage="MC_TRAN_EXPORT - "/><phpsyntax constant="MC_TRAN_ERRORLOG" usage="MC_TRAN_ERRORLOG - "/><phpsyntax constant="MC_TRAN_CLEARERRORLOG" usage="MC_TRAN_CLEARERRORLOG - "/><phpsyntax constant="MC_TRAN_GETSUBACCTS" usage="MC_TRAN_GETSUBACCTS - "/><phpsyntax constant="MC_ADMIN_GUT" usage="MC_ADMIN_GUT - "/><phpsyntax constant="MC_ADMIN_GL" usage="MC_ADMIN_GL - "/><phpsyntax constant="MC_ADMIN_GFT" usage="MC_ADMIN_GFT - "/><phpsyntax constant="MC_ADMIN_BT" usage="MC_ADMIN_BT - "/><phpsyntax constant="MC_ADMIN_UB" usage="MC_ADMIN_UB - "/><phpsyntax constant="MC_ADMIN_QC" usage="MC_ADMIN_QC - "/><phpsyntax constant="MC_ADMIN_RS" usage="MC_ADMIN_RS - "/><phpsyntax constant="MC_ADMIN_CTH" usage="MC_ADMIN_CTH - "/><phpsyntax constant="MC_ADMIN_CFH" usage="MC_ADMIN_CFH - "/><phpsyntax constant="MC_ADMIN_FORCESETTLE" usage="MC_ADMIN_FORCESETTLE - "/><phpsyntax constant="MC_ADMIN_SETBATCHNUM" usage="MC_ADMIN_SETBATCHNUM - "/><phpsyntax constant="MC_ADMIN_RENUMBERBATCH" usage="MC_ADMIN_RENUMBERBATCH - "/><phpsyntax constant="MC_ADMIN_FIELDEDIT" usage="MC_ADMIN_FIELDEDIT - "/><phpsyntax constant="MC_ADMIN_CLOSEBATCH" usage="MC_ADMIN_CLOSEBATCH - "/><phpsyntax constant="MCVE_UNUSED" usage="MCVE_UNUSED - "/><phpsyntax constant="MCVE_NEW" usage="MCVE_NEW - "/><phpsyntax constant="MCVE_PENDING" usage="MCVE_PENDING - "/><phpsyntax constant="MCVE_DONE" usage="MCVE_DONE - "/><phpsyntax constant="MCVE_GOOD" usage="MCVE_GOOD - "/><phpsyntax constant="MCVE_BAD" usage="MCVE_BAD - "/><phpsyntax constant="MCVE_STREET" usage="MCVE_STREET - "/><phpsyntax constant="MCVE_ZIP" usage="MCVE_ZIP - "/><phpsyntax constant="MCVE_UNKNOWN" usage="MCVE_UNKNOWN - "/><phpsyntax constant="MCVE_ERROR" usage="MCVE_ERROR - "/><phpsyntax constant="MCVE_FAIL" usage="MCVE_FAIL - "/><phpsyntax constant="MCVE_SUCCESS" usage="MCVE_SUCCESS - "/><phpsyntax constant="MCVE_AUTH" usage="MCVE_AUTH - "/><phpsyntax constant="MCVE_DENY" usage="MCVE_DENY - "/><phpsyntax constant="MCVE_CALL" usage="MCVE_CALL - "/><phpsyntax constant="MCVE_DUPL" usage="MCVE_DUPL - "/><phpsyntax constant="MCVE_PKUP" usage="MCVE_PKUP - "/><phpsyntax constant="MCVE_RETRY" usage="MCVE_RETRY - "/><phpsyntax constant="MCVE_SETUP" usage="MCVE_SETUP - "/><phpsyntax constant="MCVE_TIMEOUT" usage="MCVE_TIMEOUT - "/><phpsyntax constant="MCVE_SALE" usage="MCVE_SALE - "/><phpsyntax constant="MCVE_PREAUTH" usage="MCVE_PREAUTH - "/><phpsyntax constant="MCVE_FORCE" usage="MCVE_FORCE - "/><phpsyntax constant="MCVE_OVERRIDE" usage="MCVE_OVERRIDE - "/><phpsyntax constant="MCVE_RETURN" usage="MCVE_RETURN - "/><phpsyntax constant="MCVE_SETTLE" usage="MCVE_SETTLE - "/><phpsyntax constant="MCVE_PROC" usage="MCVE_PROC - "/><phpsyntax constant="MCVE_USER" usage="MCVE_USER - "/><phpsyntax constant="MCVE_PWD" usage="MCVE_PWD - "/><phpsyntax constant="MCVE_INDCODE" usage="MCVE_INDCODE - "/><phpsyntax constant="MCVE_MERCHID" usage="MCVE_MERCHID - "/><phpsyntax constant="MCVE_BANKID" usage="MCVE_BANKID - "/><phpsyntax constant="MCVE_TERMID" usage="MCVE_TERMID - "/><phpsyntax constant="MCVE_CLIENTNUM" usage="MCVE_CLIENTNUM - "/><phpsyntax constant="MCVE_STOREID" usage="MCVE_STOREID - "/><phpsyntax constant="MCVE_AGENTID" usage="MCVE_AGENTID - "/><phpsyntax constant="MCVE_CHAINID" usage="MCVE_CHAINID - "/><phpsyntax constant="MCVE_ZIPCODE" usage="MCVE_ZIPCODE - "/><phpsyntax constant="MCVE_TIMEZONE" usage="MCVE_TIMEZONE - "/><phpsyntax constant="MCVE_MERCHCAT" usage="MCVE_MERCHCAT - "/><phpsyntax constant="MCVE_MERNAME" usage="MCVE_MERNAME - "/><phpsyntax constant="MCVE_MERCHLOC" usage="MCVE_MERCHLOC - "/><phpsyntax constant="MCVE_STATECODE" usage="MCVE_STATECODE - "/><phpsyntax constant="MCVE_SERVICEPHONE" usage="MCVE_SERVICEPHONE - "/><phpsyntax constant="MHASH_MD5" usage="MHASH_MD5 - "/><phpsyntax constant="MHASH_SHA1" usage="MHASH_SHA1 - "/><phpsyntax constant="MHASH_HAVAL256" usage="MHASH_HAVAL256 - "/><phpsyntax constant="MHASH_HAVAL192" usage="MHASH_HAVAL192 - "/><phpsyntax constant="MHASH_HAVAL160" usage="MHASH_HAVAL160 - "/><phpsyntax constant="MHASH_HAVAL128" usage="MHASH_HAVAL128 - "/><phpsyntax constant="MHASH_RIPEMD160" usage="MHASH_RIPEMD160 - "/><phpsyntax constant="MHASH_GOST" usage="MHASH_GOST - "/><phpsyntax constant="MHASH_TIGER" usage="MHASH_TIGER - "/><phpsyntax constant="MHASH_CRC32" usage="MHASH_CRC32 - "/><phpsyntax constant="MHASH_CRC32B" usage="MHASH_CRC32B - "/><phpsyntax constant="SWFBUTTON_HIT" usage="SWFBUTTON_HIT - "/><phpsyntax constant="SWFBUTTON_DOWN" usage="SWFBUTTON_DOWN - "/><phpsyntax constant="SWFBUTTON_OVER" usage="SWFBUTTON_OVER - "/><phpsyntax constant="SWFBUTTON_UP" usage="SWFBUTTON_UP - "/><phpsyntax constant="SWFBUTTON_MOUSEUPOUTSIDE" usage="SWFBUTTON_MOUSEUPOUTSIDE - "/><phpsyntax constant="SWFBUTTON_DRAGOVER" usage="SWFBUTTON_DRAGOVER - "/><phpsyntax constant="SWFBUTTON_DRAGOUT" usage="SWFBUTTON_DRAGOUT - "/><phpsyntax constant="SWFBUTTON_MOUSEUP" usage="SWFBUTTON_MOUSEUP - "/><phpsyntax constant="SWFBUTTON_MOUSEDOWN" usage="SWFBUTTON_MOUSEDOWN - "/><phpsyntax constant="SWFBUTTON_MOUSEOUT" usage="SWFBUTTON_MOUSEOUT - "/><phpsyntax constant="SWFBUTTON_MOUSEOVER" usage="SWFBUTTON_MOUSEOVER - "/><phpsyntax constant="SWFFILL_RADIAL_GRADIENT" usage="SWFFILL_RADIAL_GRADIENT - "/><phpsyntax constant="SWFFILL_LINEAR_GRADIENT" usage="SWFFILL_LINEAR_GRADIENT - "/><phpsyntax constant="SWFFILL_TILED_BITMAP" usage="SWFFILL_TILED_BITMAP - "/><phpsyntax constant="SWFFILL_CLIPPED_BITMAP" usage="SWFFILL_CLIPPED_BITMAP - "/><phpsyntax constant="SWFTEXTFIELD_HASLENGTH" usage="SWFTEXTFIELD_HASLENGTH - "/><phpsyntax constant="SWFTEXTFIELD_NOEDIT" usage="SWFTEXTFIELD_NOEDIT - "/><phpsyntax constant="SWFTEXTFIELD_PASSWORD" usage="SWFTEXTFIELD_PASSWORD - "/><phpsyntax constant="SWFTEXTFIELD_MULTILINE" usage="SWFTEXTFIELD_MULTILINE - "/><phpsyntax constant="SWFTEXTFIELD_WORDWRAP" usage="SWFTEXTFIELD_WORDWRAP - "/><phpsyntax constant="SWFTEXTFIELD_DRAWBOX" usage="SWFTEXTFIELD_DRAWBOX - "/><phpsyntax constant="SWFTEXTFIELD_NOSELECT" usage="SWFTEXTFIELD_NOSELECT - "/><phpsyntax constant="SWFTEXTFIELD_HTML" usage="SWFTEXTFIELD_HTML - "/><phpsyntax constant="SWFTEXTFIELD_ALIGN_LEFT" usage="SWFTEXTFIELD_ALIGN_LEFT - "/><phpsyntax constant="SWFTEXTFIELD_ALIGN_RIGHT" usage="SWFTEXTFIELD_ALIGN_RIGHT - "/><phpsyntax constant="SWFTEXTFIELD_ALIGN_CENTER" usage="SWFTEXTFIELD_ALIGN_CENTER - "/><phpsyntax constant="SWFTEXTFIELD_ALIGN_JUSTIFY" usage="SWFTEXTFIELD_ALIGN_JUSTIFY - "/><phpsyntax constant="SWFACTION_ONLOAD" usage="SWFACTION_ONLOAD - "/><phpsyntax constant="SWFACTION_ENTERFRAME" usage="SWFACTION_ENTERFRAME - "/><phpsyntax constant="SWFACTION_UNLOAD" usage="SWFACTION_UNLOAD - "/><phpsyntax constant="SWFACTION_MOUSEMOVE" usage="SWFACTION_MOUSEMOVE - "/><phpsyntax constant="SWFACTION_MOUSEDOWN" usage="SWFACTION_MOUSEDOWN - "/><phpsyntax constant="SWFACTION_MOUSEUP" usage="SWFACTION_MOUSEUP - "/><phpsyntax constant="SWFACTION_KEYDOWN" usage="SWFACTION_KEYDOWN - "/><phpsyntax constant="SWFACTION_KEYUP" usage="SWFACTION_KEYUP - "/><phpsyntax constant="SWFACTION_DATA" usage="SWFACTION_DATA - "/><phpsyntax constant="CONNECTION_ABORTED" usage="CONNECTION_ABORTED - "/><phpsyntax constant="CONNECTION_NORMAL" usage="CONNECTION_NORMAL - "/><phpsyntax constant="CONNECTION_TIMEOUT" usage="CONNECTION_TIMEOUT - "/><phpsyntax constant="UDM_FIELD_URLID" usage="UDM_FIELD_URLID - "/><phpsyntax constant="UDM_FIELD_URL" usage="UDM_FIELD_URL - "/><phpsyntax constant="UDM_FIELD_CONTENT" usage="UDM_FIELD_CONTENT - "/><phpsyntax constant="UDM_FIELD_TITLE" usage="UDM_FIELD_TITLE - "/><phpsyntax constant="UDM_FIELD_KEYWORDS" usage="UDM_FIELD_KEYWORDS - "/><phpsyntax constant="UDM_FIELD_DESC" usage="UDM_FIELD_DESC - "/><phpsyntax constant="UDM_FIELD_DESCRIPTION" usage="UDM_FIELD_DESCRIPTION - "/><phpsyntax constant="UDM_FIELD_TEXT" usage="UDM_FIELD_TEXT - "/><phpsyntax constant="UDM_FIELD_SIZE" usage="UDM_FIELD_SIZE - "/><phpsyntax constant="UDM_FIELD_RATING" usage="UDM_FIELD_RATING - "/><phpsyntax constant="UDM_FIELD_SCORE" usage="UDM_FIELD_SCORE - "/><phpsyntax constant="UDM_FIELD_MODIFIED" usage="UDM_FIELD_MODIFIED - "/><phpsyntax constant="UDM_FIELD_ORDER" usage="UDM_FIELD_ORDER - "/><phpsyntax constant="UDM_FIELD_CRC" usage="UDM_FIELD_CRC - "/><phpsyntax constant="UDM_FIELD_CATEGORY" usage="UDM_FIELD_CATEGORY - "/><phpsyntax constant="UDM_FIELD_LANG" usage="UDM_FIELD_LANG - "/><phpsyntax constant="UDM_FIELD_CHARSET" usage="UDM_FIELD_CHARSET - "/><phpsyntax constant="UDM_PARAM_PAGE_SIZE" usage="UDM_PARAM_PAGE_SIZE - "/><phpsyntax constant="UDM_PARAM_PAGE_NUM" usage="UDM_PARAM_PAGE_NUM - "/><phpsyntax constant="UDM_PARAM_SEARCH_MODE" usage="UDM_PARAM_SEARCH_MODE - "/><phpsyntax constant="UDM_PARAM_CACHE_MODE" usage="UDM_PARAM_CACHE_MODE - "/><phpsyntax constant="UDM_PARAM_TRACK_MODE" usage="UDM_PARAM_TRACK_MODE - "/><phpsyntax constant="UDM_PARAM_PHRASE_MODE" usage="UDM_PARAM_PHRASE_MODE - "/><phpsyntax constant="UDM_PARAM_CHARSET" usage="UDM_PARAM_CHARSET - "/><phpsyntax constant="UDM_PARAM_LOCAL_CHARSET" usage="UDM_PARAM_LOCAL_CHARSET - "/><phpsyntax constant="UDM_PARAM_BROWSER_CHARSET" usage="UDM_PARAM_BROWSER_CHARSET - "/><phpsyntax constant="UDM_PARAM_STOPTABLE" usage="UDM_PARAM_STOPTABLE - "/><phpsyntax constant="UDM_PARAM_STOP_TABLE" usage="UDM_PARAM_STOP_TABLE - "/><phpsyntax constant="UDM_PARAM_STOPFILE" usage="UDM_PARAM_STOPFILE - "/><phpsyntax constant="UDM_PARAM_STOP_FILE" usage="UDM_PARAM_STOP_FILE - "/><phpsyntax constant="UDM_PARAM_WEIGHT_FACTOR" usage="UDM_PARAM_WEIGHT_FACTOR - "/><phpsyntax constant="UDM_PARAM_WORD_MATCH" usage="UDM_PARAM_WORD_MATCH - "/><phpsyntax constant="UDM_PARAM_MAX_WORD_LEN" usage="UDM_PARAM_MAX_WORD_LEN - "/><phpsyntax constant="UDM_PARAM_MAX_WORDLEN" usage="UDM_PARAM_MAX_WORDLEN - "/><phpsyntax constant="UDM_PARAM_MIN_WORD_LEN" usage="UDM_PARAM_MIN_WORD_LEN - "/><phpsyntax constant="UDM_PARAM_MIN_WORDLEN" usage="UDM_PARAM_MIN_WORDLEN - "/><phpsyntax constant="UDM_PARAM_ISPELL_PREFIXES" usage="UDM_PARAM_ISPELL_PREFIXES - "/><phpsyntax constant="UDM_PARAM_ISPELL_PREFIX" usage="UDM_PARAM_ISPELL_PREFIX - "/><phpsyntax constant="UDM_PARAM_PREFIXES" usage="UDM_PARAM_PREFIXES - "/><phpsyntax constant="UDM_PARAM_PREFIX" usage="UDM_PARAM_PREFIX - "/><phpsyntax constant="UDM_PARAM_CROSS_WORDS" usage="UDM_PARAM_CROSS_WORDS - "/><phpsyntax constant="UDM_PARAM_CROSSWORDS" usage="UDM_PARAM_CROSSWORDS - "/><phpsyntax constant="UDM_PARAM_VARDIR" usage="UDM_PARAM_VARDIR - "/><phpsyntax constant="UDM_PARAM_DATADIR" usage="UDM_PARAM_DATADIR - "/><phpsyntax constant="UDM_PARAM_HLBEG" usage="UDM_PARAM_HLBEG - "/><phpsyntax constant="UDM_PARAM_HLEND" usage="UDM_PARAM_HLEND - "/><phpsyntax constant="UDM_PARAM_SYNONYM" usage="UDM_PARAM_SYNONYM - "/><phpsyntax constant="UDM_PARAM_SEARCHD" usage="UDM_PARAM_SEARCHD - "/><phpsyntax constant="UDM_PARAM_QSTRING" usage="UDM_PARAM_QSTRING - "/><phpsyntax constant="UDM_PARAM_REMOTE_ADDR" usage="UDM_PARAM_REMOTE_ADDR - "/><phpsyntax constant="UDM_LIMIT_CAT" usage="UDM_LIMIT_CAT - "/><phpsyntax constant="UDM_LIMIT_URL" usage="UDM_LIMIT_URL - "/><phpsyntax constant="UDM_LIMIT_TAG" usage="UDM_LIMIT_TAG - "/><phpsyntax constant="UDM_LIMIT_LANG" usage="UDM_LIMIT_LANG - "/><phpsyntax constant="UDM_LIMIT_DATE" usage="UDM_LIMIT_DATE - "/><phpsyntax constant="UDM_PARAM_FOUND" usage="UDM_PARAM_FOUND - "/><phpsyntax constant="UDM_PARAM_NUM_ROWS" usage="UDM_PARAM_NUM_ROWS - "/><phpsyntax constant="UDM_PARAM_WORDINFO" usage="UDM_PARAM_WORDINFO - "/><phpsyntax constant="UDM_PARAM_WORD_INFO" usage="UDM_PARAM_WORD_INFO - "/><phpsyntax constant="UDM_PARAM_SEARCHTIME" usage="UDM_PARAM_SEARCHTIME - "/><phpsyntax constant="UDM_PARAM_SEARCH_TIME" usage="UDM_PARAM_SEARCH_TIME - "/><phpsyntax constant="UDM_PARAM_FIRST_DOC" usage="UDM_PARAM_FIRST_DOC - "/><phpsyntax constant="UDM_PARAM_LAST_DOC" usage="UDM_PARAM_LAST_DOC - "/><phpsyntax constant="UDM_MODE_ALL" usage="UDM_MODE_ALL - "/><phpsyntax constant="UDM_MODE_ANY" usage="UDM_MODE_ANY - "/><phpsyntax constant="UDM_MODE_BOOL" usage="UDM_MODE_BOOL - "/><phpsyntax constant="UDM_MODE_PHRASE" usage="UDM_MODE_PHRASE - "/><phpsyntax constant="UDM_CACHE_ENABLED" usage="UDM_CACHE_ENABLED - "/><phpsyntax constant="UDM_CACHE_DISABLED" usage="UDM_CACHE_DISABLED - "/><phpsyntax constant="UDM_TRACK_ENABLED" usage="UDM_TRACK_ENABLED - "/><phpsyntax constant="UDM_TRACK_DISABLED" usage="UDM_TRACK_DISABLED - "/><phpsyntax constant="UDM_PHRASE_ENABLED" usage="UDM_PHRASE_ENABLED - "/><phpsyntax constant="UDM_PHRASE_DISABLED" usage="UDM_PHRASE_DISABLED - "/><phpsyntax constant="UDM_CROSS_WORDS_ENABLED" usage="UDM_CROSS_WORDS_ENABLED - "/><phpsyntax constant="UDM_CROSSWORDS_ENABLED" usage="UDM_CROSSWORDS_ENABLED - "/><phpsyntax constant="UDM_CROSS_WORDS_DISABLED" usage="UDM_CROSS_WORDS_DISABLED - "/><phpsyntax constant="UDM_CROSSWORDS_DISABLED" usage="UDM_CROSSWORDS_DISABLED - "/><phpsyntax constant="UDM_PREFIXES_ENABLED" usage="UDM_PREFIXES_ENABLED - "/><phpsyntax constant="UDM_PREFIX_ENABLED" usage="UDM_PREFIX_ENABLED - "/><phpsyntax constant="UDM_ISPELL_PREFIXES_ENABLED" usage="UDM_ISPELL_PREFIXES_ENABLED - "/><phpsyntax constant="UDM_ISPELL_PREFIX_ENABLED" usage="UDM_ISPELL_PREFIX_ENABLED - "/><phpsyntax constant="UDM_PREFIXES_DISABLED" usage="UDM_PREFIXES_DISABLED - "/><phpsyntax constant="UDM_PREFIX_DISABLED" usage="UDM_PREFIX_DISABLED - "/><phpsyntax constant="UDM_ISPELL_PREFIXES_DISABLED" usage="UDM_ISPELL_PREFIXES_DISABLED - "/><phpsyntax constant="UDM_ISPELL_PREFIX_DISABLED" usage="UDM_ISPELL_PREFIX_DISABLED - "/><phpsyntax constant="UDM_ISPELL_TYPE_AFFIX" usage="UDM_ISPELL_TYPE_AFFIX - "/><phpsyntax constant="UDM_ISPELL_TYPE_SPELL" usage="UDM_ISPELL_TYPE_SPELL - "/><phpsyntax constant="UDM_ISPELL_TYPE_DB" usage="UDM_ISPELL_TYPE_DB - "/><phpsyntax constant="UDM_ISPELL_TYPE_SERVER" usage="UDM_ISPELL_TYPE_SERVER - "/><phpsyntax constant="UDM_MATCH_WORD" usage="UDM_MATCH_WORD - "/><phpsyntax constant="UDM_MATCH_BEGIN" usage="UDM_MATCH_BEGIN - "/><phpsyntax constant="UDM_MATCH_SUBSTR" usage="UDM_MATCH_SUBSTR - "/><phpsyntax constant="UDM_MATCH_END" usage="UDM_MATCH_END - "/><phpsyntax constant="MSQL_ASSOC" usage="MSQL_ASSOC - "/><phpsyntax constant="MSQL_NUM" usage="MSQL_NUM - "/><phpsyntax constant="MSQL_BOTH" usage="MSQL_BOTH - "/><phpsyntax constant="MSSQL_ASSOC" usage="MSSQL_ASSOC - "/><phpsyntax constant="MSSQL_NUM" usage="MSSQL_NUM - "/><phpsyntax constant="MSSQL_BOTH" usage="MSSQL_BOTH - "/><phpsyntax constant="SQLTEXT" usage="SQLTEXT - "/><phpsyntax constant="SQLVARCHAR" usage="SQLVARCHAR - "/><phpsyntax constant="SQLCHAR" usage="SQLCHAR - "/><phpsyntax constant="SQLINT1" usage="SQLINT1 - "/><phpsyntax constant="SQLINT2" usage="SQLINT2 - "/><phpsyntax constant="SQLINT4" usage="SQLINT4 - "/><phpsyntax constant="SQLBIT" usage="SQLBIT - "/><phpsyntax constant="SQLFLT8" usage="SQLFLT8 - "/><phpsyntax constant="MYSQL_CLIENT_COMPRESS" usage="MYSQL_CLIENT_COMPRESS - ">Use compression protocol</phpsyntax><phpsyntax constant="MYSQL_CLIENT_IGNORE_SPACE" usage="MYSQL_CLIENT_IGNORE_SPACE - ">Allow space after function names</phpsyntax><phpsyntax constant="MYSQL_CLIENT_INTERACTIVE" usage="MYSQL_CLIENT_INTERACTIVE - ">Allow interactive_timeout seconds (instead of wait_timeout) of
        inactivity before closing the connection.</phpsyntax><phpsyntax constant="MYSQL_ASSOC" usage="MYSQL_ASSOC - ">Columns are returned into the array having the fieldname as the array
       index.</phpsyntax><phpsyntax constant="MYSQL_BOTH" usage="MYSQL_BOTH - ">Columns are returned into the array having both a numerical index
       and the fieldname as the array index.</phpsyntax><phpsyntax constant="MYSQL_NUM" usage="MYSQL_NUM - ">Columns are returned into the array having a numerical index to the
       fields. This index starts with 0, the first field in the result.</phpsyntax><phpsyntax constant="MYSQLI_READ_DEFAULT_GROUP" usage="MYSQLI_READ_DEFAULT_GROUP - ">Read options from the named group from `my.cnf' or the file specified with MYSQLI_READ_DEFAULT_FILE</phpsyntax><phpsyntax constant="MYSQLI_READ_DEFAULT_FILE" usage="MYSQLI_READ_DEFAULT_FILE - ">Read options from the named option file instead of from my.cnf</phpsyntax><phpsyntax constant="MYSQLI_OPT_CONNECT_TIMEOUT" usage="MYSQLI_OPT_CONNECT_TIMEOUT - ">Connect timeout in seconds</phpsyntax><phpsyntax constant="MYSQLI_OPT_LOCAL_INFILE" usage="MYSQLI_OPT_LOCAL_INFILE - ">Enables command LOAD LOCAL INFILE</phpsyntax><phpsyntax constant="MYSQLI_INIT_COMMAND" usage="MYSQLI_INIT_COMMAND - ">Command to execute when connecting to MySQL server. Will automatically be re-executed when reconnecting.</phpsyntax><phpsyntax constant="MYSQLI_CLIENT_SSL" usage="MYSQLI_CLIENT_SSL - ">Use SSL (encrypted protocol). This option should not be set by application programs; 
       it is set internally in the MySQL client library</phpsyntax><phpsyntax constant="MYSQLI_CLIENT_COMPRESS" usage="MYSQLI_CLIENT_COMPRESS - ">Use compression protocol</phpsyntax><phpsyntax constant="MYSQLI_CLIENT_INTERACTIVE" usage="MYSQLI_CLIENT_INTERACTIVE - ">Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection. The client's session wait_timeout variable will be set to the value of the session interactive_timeout variable.</phpsyntax><phpsyntax constant="MYSQLI_CLIENT_IGNORE_SPACE" usage="MYSQLI_CLIENT_IGNORE_SPACE - ">Allow spaces after function names. Makes all functions names reserved words.</phpsyntax><phpsyntax constant="MYSQLI_CLIENT_NO_SCHEMA" usage="MYSQLI_CLIENT_NO_SCHEMA - ">Don't allow the db_name.tbl_name.col_name syntax.</phpsyntax><phpsyntax constant="MYSQLI_CLIENT_MULTI_QUERIES" usage="MYSQLI_CLIENT_MULTI_QUERIES - "/><phpsyntax constant="MYSQLI_STORE_RESULT" usage="MYSQLI_STORE_RESULT - ">For using buffered resultsets</phpsyntax><phpsyntax constant="MYSQLI_USE_RESULT" usage="MYSQLI_USE_RESULT - ">For using unbuffered resultsets</phpsyntax><phpsyntax constant="MYSQLI_ASSOC" usage="MYSQLI_ASSOC - ">Columns are returned into the array having the fieldname as the array index.</phpsyntax><phpsyntax constant="MYSQLI_NUM" usage="MYSQLI_NUM - ">Columns are returned into the array having an enumerated index.</phpsyntax><phpsyntax constant="MYSQLI_BOTH" usage="MYSQLI_BOTH - ">Columns are returned into the array having both a numerical index and the fieldname as the associative index.</phpsyntax><phpsyntax constant="MYSQLI_NOT_NULL_FLAG" usage="MYSQLI_NOT_NULL_FLAG - ">Indicates that a field is defined as NOT NULL</phpsyntax><phpsyntax constant="MYSQLI_PRI_KEY_FLAG" usage="MYSQLI_PRI_KEY_FLAG - ">Field is part of a primary index</phpsyntax><phpsyntax constant="MYSQLI_UNIQUE_KEY_FLAG" usage="MYSQLI_UNIQUE_KEY_FLAG - ">Field is part of an unique index.</phpsyntax><phpsyntax constant="MYSQLI_MULTIPLE_KEY_FLAG" usage="MYSQLI_MULTIPLE_KEY_FLAG - ">Field is part of an index.</phpsyntax><phpsyntax constant="MYSQLI_BLOB_FLAG" usage="MYSQLI_BLOB_FLAG - ">Field is defined as BLOB</phpsyntax><phpsyntax constant="MYSQLI_UNSIGNED_FLAG" usage="MYSQLI_UNSIGNED_FLAG - ">Field is defined as UNSIGNED</phpsyntax><phpsyntax constant="MYSQLI_ZEROFILL_FLAG" usage="MYSQLI_ZEROFILL_FLAG - ">Field is defined as ZEROFILL</phpsyntax><phpsyntax constant="MYSQLI_AUTO_INCREMENT_FLAG" usage="MYSQLI_AUTO_INCREMENT_FLAG - ">Field is defined as AUTO_INCREMENT</phpsyntax><phpsyntax constant="MYSQLI_TIMESTAMP_FLAG" usage="MYSQLI_TIMESTAMP_FLAG - ">Field is defined as TIMESTAMP</phpsyntax><phpsyntax constant="MYSQLI_SET_FLAG" usage="MYSQLI_SET_FLAG - ">Field is defined as SET</phpsyntax><phpsyntax constant="MYSQLI_NUM_FLAG" usage="MYSQLI_NUM_FLAG - ">Field is defined as NUMERIC</phpsyntax><phpsyntax constant="MYSQLI_PART_KEY_FLAG" usage="MYSQLI_PART_KEY_FLAG - ">Field is part of an multi-index</phpsyntax><phpsyntax constant="MYSQLI_GROUP_FLAG" usage="MYSQLI_GROUP_FLAG - ">Field is part of GROUP BY</phpsyntax><phpsyntax constant="MYSQLI_TYPE_DECIMAL" usage="MYSQLI_TYPE_DECIMAL - ">Field is defined as DECIMAL</phpsyntax><phpsyntax constant="MYSQLI_TYPE_TINY" usage="MYSQLI_TYPE_TINY - ">Field is defined as TINYINT</phpsyntax><phpsyntax constant="MYSQLI_TYPE_SHORT" usage="MYSQLI_TYPE_SHORT - ">Field is defined as INT</phpsyntax><phpsyntax constant="MYSQLI_TYPE_LONG" usage="MYSQLI_TYPE_LONG - ">Field is defined as INT</phpsyntax><phpsyntax constant="MYSQLI_TYPE_FLOAT" usage="MYSQLI_TYPE_FLOAT - ">Field is defined as FLOAT</phpsyntax><phpsyntax constant="MYSQLI_TYPE_DOUBLE" usage="MYSQLI_TYPE_DOUBLE - ">Field is defined as DOUBLE</phpsyntax><phpsyntax constant="MYSQLI_TYPE_NULL" usage="MYSQLI_TYPE_NULL - ">Field is defined as DEFAULT NULL</phpsyntax><phpsyntax constant="MYSQLI_TYPE_TIMESTAMP" usage="MYSQLI_TYPE_TIMESTAMP - ">Field is defined as TIMESTAMP</phpsyntax><phpsyntax constant="MYSQLI_TYPE_LONGLONG" usage="MYSQLI_TYPE_LONGLONG - ">Field is defined as BIGINT</phpsyntax><phpsyntax constant="MYSQLI_TYPE_INT24" usage="MYSQLI_TYPE_INT24 - ">Field is defined as MEDIUMINT</phpsyntax><phpsyntax constant="MYSQLI_TYPE_DATE" usage="MYSQLI_TYPE_DATE - ">Field is defined as DATE</phpsyntax><phpsyntax constant="MYSQLI_TYPE_TIME" usage="MYSQLI_TYPE_TIME - ">Field is defined as TIME</phpsyntax><phpsyntax constant="MYSQLI_TYPE_DATETIME" usage="MYSQLI_TYPE_DATETIME - ">Field is defined as DATETIME</phpsyntax><phpsyntax constant="MYSQLI_TYPE_YEAR" usage="MYSQLI_TYPE_YEAR - ">Field is defined as YEAR</phpsyntax><phpsyntax constant="MYSQLI_TYPE_NEWDATE" usage="MYSQLI_TYPE_NEWDATE - ">Field is defined as DATE</phpsyntax><phpsyntax constant="MYSQLI_TYPE_ENUM" usage="MYSQLI_TYPE_ENUM - ">Field is defined as ENUM</phpsyntax><phpsyntax constant="MYSQLI_TYPE_SET" usage="MYSQLI_TYPE_SET - ">Field is defined as SET</phpsyntax><phpsyntax constant="MYSQLI_TYPE_TINY_BLOB" usage="MYSQLI_TYPE_TINY_BLOB - ">Field is defined as TINYBLOB</phpsyntax><phpsyntax constant="MYSQLI_TYPE_MEDIUM_BLOB" usage="MYSQLI_TYPE_MEDIUM_BLOB - ">Field is defined as MEDIUMBLOB</phpsyntax><phpsyntax constant="MYSQLI_TYPE_LONG_BLOB" usage="MYSQLI_TYPE_LONG_BLOB - ">Field is defined as LONGBLOB</phpsyntax><phpsyntax constant="MYSQLI_TYPE_BLOB" usage="MYSQLI_TYPE_BLOB - ">Field is defined as BLOB</phpsyntax><phpsyntax constant="MYSQLI_TYPE_STRING" usage="MYSQLI_TYPE_STRING - ">Field is defined as VARCHAR</phpsyntax><phpsyntax constant="MYSQLI_TYPE_CHAR" usage="MYSQLI_TYPE_CHAR - ">Field is defined as CHAR</phpsyntax><phpsyntax constant="MYSQLI_TYPE_GEOMETRY" usage="MYSQLI_TYPE_GEOMETRY - ">Field is defined as GEOMETRY</phpsyntax><phpsyntax constant="MYSQLI_NEED_DATA" usage="MYSQLI_NEED_DATA - ">More data available for bind variable</phpsyntax><phpsyntax constant="MYSQLI_NO_DATA" usage="MYSQLI_NO_DATA - ">No more data available for bind variable</phpsyntax><phpsyntax constant="NCURSES_COLOR_BLACK" usage="NCURSES_COLOR_BLACK - ">no color (black)</phpsyntax><phpsyntax constant="NCURSES_COLOR_WHITE" usage="NCURSES_COLOR_WHITE - ">white</phpsyntax><phpsyntax constant="NCURSES_COLOR_RED" usage="NCURSES_COLOR_RED - ">red - supported when terminal is in color mode</phpsyntax><phpsyntax constant="NCURSES_COLOR_GREEN" usage="NCURSES_COLOR_GREEN - ">green - supported when terminal is in color mod</phpsyntax><phpsyntax constant="NCURSES_COLOR_YELLOW" usage="NCURSES_COLOR_YELLOW - ">yellow - supported when terminal is in color mod</phpsyntax><phpsyntax constant="NCURSES_COLOR_BLUE" usage="NCURSES_COLOR_BLUE - ">blue - supported when terminal is in color mod</phpsyntax><phpsyntax constant="NCURSES_COLOR_CYAN" usage="NCURSES_COLOR_CYAN - ">cyan - supported when terminal is in color mod</phpsyntax><phpsyntax constant="NCURSES_COLOR_MAGENTA" usage="NCURSES_COLOR_MAGENTA - ">magenta - supported when terminal is in color mod</phpsyntax><phpsyntax constant="NCURSES_KEY_DOWN" usage="NCURSES_KEY_DOWN - ">down arrow</phpsyntax><phpsyntax constant="NCURSES_KEY_UP" usage="NCURSES_KEY_UP - ">up arrow</phpsyntax><phpsyntax constant="NCURSES_KEY_LEFT" usage="NCURSES_KEY_LEFT - ">left arrow</phpsyntax><phpsyntax constant="NCURSES_KEY_RIGHT" usage="NCURSES_KEY_RIGHT - ">right arrow</phpsyntax><phpsyntax constant="NCURSES_KEY_HOME" usage="NCURSES_KEY_HOME - ">home key (upward+left arrow)</phpsyntax><phpsyntax constant="NCURSES_KEY_BACKSPACE" usage="NCURSES_KEY_BACKSPACE - ">backspace</phpsyntax><phpsyntax constant="NCURSES_KEY_DL" usage="NCURSES_KEY_DL - ">delete line</phpsyntax><phpsyntax constant="NCURSES_KEY_IL" usage="NCURSES_KEY_IL - ">insert line</phpsyntax><phpsyntax constant="NCURSES_KEY_DC" usage="NCURSES_KEY_DC - ">delete character</phpsyntax><phpsyntax constant="NCURSES_KEY_IC" usage="NCURSES_KEY_IC - ">insert char or enter insert mode</phpsyntax><phpsyntax constant="NCURSES_KEY_EIC" usage="NCURSES_KEY_EIC - ">exit insert char mode</phpsyntax><phpsyntax constant="NCURSES_KEY_CLEAR" usage="NCURSES_KEY_CLEAR - ">clear screen</phpsyntax><phpsyntax constant="NCURSES_KEY_EOS" usage="NCURSES_KEY_EOS - ">clear to end of screen</phpsyntax><phpsyntax constant="NCURSES_KEY_EOL" usage="NCURSES_KEY_EOL - ">clear to end of line</phpsyntax><phpsyntax constant="NCURSES_KEY_SF" usage="NCURSES_KEY_SF - ">scroll one line forward</phpsyntax><phpsyntax constant="NCURSES_KEY_SR" usage="NCURSES_KEY_SR - ">scroll one line backward</phpsyntax><phpsyntax constant="NCURSES_KEY_NPAGE" usage="NCURSES_KEY_NPAGE - ">next page</phpsyntax><phpsyntax constant="NCURSES_KEY_PPAGE" usage="NCURSES_KEY_PPAGE - ">previous page</phpsyntax><phpsyntax constant="NCURSES_KEY_STAB" usage="NCURSES_KEY_STAB - ">set tab</phpsyntax><phpsyntax constant="NCURSES_KEY_CTAB" usage="NCURSES_KEY_CTAB - ">clear tab</phpsyntax><phpsyntax constant="NCURSES_KEY_CATAB" usage="NCURSES_KEY_CATAB - ">clear all tabs</phpsyntax><phpsyntax constant="NCURSES_KEY_SRESET" usage="NCURSES_KEY_SRESET - ">soft (partial) reset</phpsyntax><phpsyntax constant="NCURSES_KEY_RESET" usage="NCURSES_KEY_RESET - ">reset or hard reset</phpsyntax><phpsyntax constant="NCURSES_KEY_PRINT" usage="NCURSES_KEY_PRINT - ">print</phpsyntax><phpsyntax constant="NCURSES_KEY_LL" usage="NCURSES_KEY_LL - ">lower left</phpsyntax><phpsyntax constant="NCURSES_KEY_A1" usage="NCURSES_KEY_A1 - ">upper left of keypad</phpsyntax><phpsyntax constant="NCURSES_KEY_A3" usage="NCURSES_KEY_A3 - ">upper right of keypad</phpsyntax><phpsyntax constant="NCURSES_KEY_B2" usage="NCURSES_KEY_B2 - ">center of keypad</phpsyntax><phpsyntax constant="NCURSES_KEY_C1" usage="NCURSES_KEY_C1 - ">lower left of keypad</phpsyntax><phpsyntax constant="NCURSES_KEY_C3" usage="NCURSES_KEY_C3 - ">lower right of keypad</phpsyntax><phpsyntax constant="NCURSES_KEY_BTAB" usage="NCURSES_KEY_BTAB - ">back tab</phpsyntax><phpsyntax constant="NCURSES_KEY_BEG" usage="NCURSES_KEY_BEG - ">beginning</phpsyntax><phpsyntax constant="NCURSES_KEY_CANCEL" usage="NCURSES_KEY_CANCEL - ">cancel</phpsyntax><phpsyntax constant="NCURSES_KEY_CLOSE" usage="NCURSES_KEY_CLOSE - ">close</phpsyntax><phpsyntax constant="NCURSES_KEY_COMMAND" usage="NCURSES_KEY_COMMAND - ">cmd (command)</phpsyntax><phpsyntax constant="NCURSES_KEY_COPY" usage="NCURSES_KEY_COPY - ">copy</phpsyntax><phpsyntax constant="NCURSES_KEY_CREATE" usage="NCURSES_KEY_CREATE - ">create</phpsyntax><phpsyntax constant="NCURSES_KEY_END" usage="NCURSES_KEY_END - ">end</phpsyntax><phpsyntax constant="NCURSES_KEY_EXIT" usage="NCURSES_KEY_EXIT - ">exit</phpsyntax><phpsyntax constant="NCURSES_KEY_FIND" usage="NCURSES_KEY_FIND - ">find</phpsyntax><phpsyntax constant="NCURSES_KEY_HELP" usage="NCURSES_KEY_HELP - ">help</phpsyntax><phpsyntax constant="NCURSES_KEY_MARK" usage="NCURSES_KEY_MARK - ">mark</phpsyntax><phpsyntax constant="NCURSES_KEY_MESSAGE" usage="NCURSES_KEY_MESSAGE - ">message</phpsyntax><phpsyntax constant="NCURSES_KEY_MOVE" usage="NCURSES_KEY_MOVE - ">move</phpsyntax><phpsyntax constant="NCURSES_KEY_NEXT" usage="NCURSES_KEY_NEXT - ">next</phpsyntax><phpsyntax constant="NCURSES_KEY_OPEN" usage="NCURSES_KEY_OPEN - ">open</phpsyntax><phpsyntax constant="NCURSES_KEY_OPTIONS" usage="NCURSES_KEY_OPTIONS - ">options</phpsyntax><phpsyntax constant="NCURSES_KEY_PREVIOUS" usage="NCURSES_KEY_PREVIOUS - ">previous</phpsyntax><phpsyntax constant="NCURSES_KEY_REDO" usage="NCURSES_KEY_REDO - ">redo</phpsyntax><phpsyntax constant="NCURSES_KEY_REFERENCE" usage="NCURSES_KEY_REFERENCE - ">ref (reference)</phpsyntax><phpsyntax constant="NCURSES_KEY_REFRESH" usage="NCURSES_KEY_REFRESH - ">refresh</phpsyntax><phpsyntax constant="NCURSES_KEY_REPLACE" usage="NCURSES_KEY_REPLACE - ">replace</phpsyntax><phpsyntax constant="NCURSES_KEY_RESTART" usage="NCURSES_KEY_RESTART - ">restart</phpsyntax><phpsyntax constant="NCURSES_KEY_RESUME" usage="NCURSES_KEY_RESUME - ">resume</phpsyntax><phpsyntax constant="NCURSES_KEY_SAVE" usage="NCURSES_KEY_SAVE - ">save</phpsyntax><phpsyntax constant="NCURSES_KEY_SBEG" usage="NCURSES_KEY_SBEG - ">shiftet beg (beginning)</phpsyntax><phpsyntax constant="NCURSES_KEY_SCANCEL" usage="NCURSES_KEY_SCANCEL - ">shifted cancel</phpsyntax><phpsyntax constant="NCURSES_KEY_SCOMMAND" usage="NCURSES_KEY_SCOMMAND - ">shifted command</phpsyntax><phpsyntax constant="NCURSES_KEY_SCOPY" usage="NCURSES_KEY_SCOPY - ">shifted copy</phpsyntax><phpsyntax constant="NCURSES_KEY_SCREATE" usage="NCURSES_KEY_SCREATE - ">shifted create</phpsyntax><phpsyntax constant="NCURSES_KEY_SDC" usage="NCURSES_KEY_SDC - ">shifted delete char</phpsyntax><phpsyntax constant="NCURSES_KEY_SDL" usage="NCURSES_KEY_SDL - ">shifted delete line</phpsyntax><phpsyntax constant="NCURSES_KEY_SELECT" usage="NCURSES_KEY_SELECT - ">select</phpsyntax><phpsyntax constant="NCURSES_KEY_SEND" usage="NCURSES_KEY_SEND - ">shifted end</phpsyntax><phpsyntax constant="NCURSES_KEY_SEOL" usage="NCURSES_KEY_SEOL - ">shifted end of line</phpsyntax><phpsyntax constant="NCURSES_KEY_SEXIT" usage="NCURSES_KEY_SEXIT - ">shifted exit</phpsyntax><phpsyntax constant="NCURSES_KEY_SFIND" usage="NCURSES_KEY_SFIND - ">shifted find</phpsyntax><phpsyntax constant="NCURSES_KEY_SHELP" usage="NCURSES_KEY_SHELP - ">shifted help</phpsyntax><phpsyntax constant="NCURSES_KEY_SHOME" usage="NCURSES_KEY_SHOME - ">shifted home</phpsyntax><phpsyntax constant="NCURSES_KEY_SIC" usage="NCURSES_KEY_SIC - ">shifted input</phpsyntax><phpsyntax constant="NCURSES_KEY_SLEFT" usage="NCURSES_KEY_SLEFT - ">shifted left arrow</phpsyntax><phpsyntax constant="NCURSES_KEY_SMESSAGE" usage="NCURSES_KEY_SMESSAGE - ">shifted message</phpsyntax><phpsyntax constant="NCURSES_KEY_SMOVE" usage="NCURSES_KEY_SMOVE - ">shifted move</phpsyntax><phpsyntax constant="NCURSES_KEY_SNEXT" usage="NCURSES_KEY_SNEXT - ">shifted next</phpsyntax><phpsyntax constant="NCURSES_KEY_SOPTIONS" usage="NCURSES_KEY_SOPTIONS - ">shifted options</phpsyntax><phpsyntax constant="NCURSES_KEY_SPREVIOUS" usage="NCURSES_KEY_SPREVIOUS - ">shifted previous</phpsyntax><phpsyntax constant="NCURSES_KEY_SPRINT" usage="NCURSES_KEY_SPRINT - ">shifted print</phpsyntax><phpsyntax constant="NCURSES_KEY_SREDO" usage="NCURSES_KEY_SREDO - ">shifted redo</phpsyntax><phpsyntax constant="NCURSES_KEY_SREPLACE" usage="NCURSES_KEY_SREPLACE - ">shifted replace</phpsyntax><phpsyntax constant="NCURSES_KEY_SRIGHT" usage="NCURSES_KEY_SRIGHT - ">shifted right arrow</phpsyntax><phpsyntax constant="NCURSES_KEY_SRSUME" usage="NCURSES_KEY_SRSUME - ">shifted resume</phpsyntax><phpsyntax constant="NCURSES_KEY_SSAVE" usage="NCURSES_KEY_SSAVE - ">shifted save</phpsyntax><phpsyntax constant="NCURSES_KEY_SSUSPEND" usage="NCURSES_KEY_SSUSPEND - ">shifted suspend</phpsyntax><phpsyntax constant="NCURSES_KEY_UNDO" usage="NCURSES_KEY_UNDO - ">undo</phpsyntax><phpsyntax constant="NCURSES_KEY_MOUSE" usage="NCURSES_KEY_MOUSE - ">mouse event has occurred</phpsyntax><phpsyntax constant="NCURSES_KEY_MAX" usage="NCURSES_KEY_MAX - ">maximum key value</phpsyntax><phpsyntax constant="NCURSES_BUTTON_CTRL" usage="NCURSES_BUTTON_CTRL - ">ctrl pressed during click</phpsyntax><phpsyntax constant="NCURSES_BUTTON_SHIFT" usage="NCURSES_BUTTON_SHIFT - ">shift pressed during click</phpsyntax><phpsyntax constant="NCURSES_BUTTON_ALT" usage="NCURSES_BUTTON_ALT - ">alt pressed during click</phpsyntax><phpsyntax constant="NCURSES_ALL_MOUSE_EVENTS" usage="NCURSES_ALL_MOUSE_EVENTS - ">report all mouse events</phpsyntax><phpsyntax constant="NCURSES_REPORT_MOUSE_POSITION" usage="NCURSES_REPORT_MOUSE_POSITION - ">report mouse position</phpsyntax><phpsyntax constant="LOG_CONS" usage="LOG_CONS - ">if there is an error while sending data to the system logger,
       write directly to the system console</phpsyntax><phpsyntax constant="LOG_NDELAY" usage="LOG_NDELAY - ">open the connection to the logger immediately</phpsyntax><phpsyntax constant="LOG_ODELAY" usage="LOG_ODELAY - ">(default) delay opening the connection until the first
       message is logged</phpsyntax><phpsyntax constant="LOG_NOWAIT" usage="LOG_NOWAIT - "/><phpsyntax constant="LOG_PERROR" usage="LOG_PERROR - ">print log message also to standard error</phpsyntax><phpsyntax constant="LOG_PID" usage="LOG_PID - ">include PID with each message</phpsyntax><phpsyntax constant="LOG_AUTH" usage="LOG_AUTH - ">security/authorization messages (use LOG_AUTHPRIV instead
       in systems where that constant is defined)</phpsyntax><phpsyntax constant="LOG_AUTHPRIV" usage="LOG_AUTHPRIV - ">security/authorization messages (private)</phpsyntax><phpsyntax constant="LOG_CRON" usage="LOG_CRON - ">clock daemon (cron and at)</phpsyntax><phpsyntax constant="LOG_DAEMON" usage="LOG_DAEMON - ">other system daemons</phpsyntax><phpsyntax constant="LOG_KERN" usage="LOG_KERN - ">kernel messages</phpsyntax><phpsyntax constant="LOG_LPR" usage="LOG_LPR - ">line printer subsystem</phpsyntax><phpsyntax constant="LOG_MAIL" usage="LOG_MAIL - ">mail subsystem</phpsyntax><phpsyntax constant="LOG_NEWS" usage="LOG_NEWS - ">USENET news subsystem</phpsyntax><phpsyntax constant="LOG_SYSLOG" usage="LOG_SYSLOG - ">messages generated internally by syslogd</phpsyntax><phpsyntax constant="LOG_USER" usage="LOG_USER - ">generic user-level messages</phpsyntax><phpsyntax constant="LOG_UUCP" usage="LOG_UUCP - ">UUCP subsystem</phpsyntax><phpsyntax constant="LOG_EMERG" usage="LOG_EMERG - ">system is unusable</phpsyntax><phpsyntax constant="LOG_ALERT" usage="LOG_ALERT - ">action must be taken immediately</phpsyntax><phpsyntax constant="LOG_CRIT" usage="LOG_CRIT - ">critical conditions</phpsyntax><phpsyntax constant="LOG_ERR" usage="LOG_ERR - ">error conditions</phpsyntax><phpsyntax constant="LOG_WARNING" usage="LOG_WARNING - ">warning conditions</phpsyntax><phpsyntax constant="LOG_NOTICE" usage="LOG_NOTICE - ">normal, but significant, condition</phpsyntax><phpsyntax constant="LOG_INFO" usage="LOG_INFO - ">informational message</phpsyntax><phpsyntax constant="LOG_DEBUG" usage="LOG_DEBUG - ">debug-level message</phpsyntax><phpsyntax constant="DNS_A" usage="DNS_A - ">IPv4 Address Resource</phpsyntax><phpsyntax constant="DNS_MX" usage="DNS_MX - ">Mail Exchanger Resource</phpsyntax><phpsyntax constant="DNS_CNAME" usage="DNS_CNAME - ">Alias (Canonical Name) Resource</phpsyntax><phpsyntax constant="DNS_NS" usage="DNS_NS - ">Authoritative Name Server Resource</phpsyntax><phpsyntax constant="DNS_PTR" usage="DNS_PTR - ">Pointer Resource</phpsyntax><phpsyntax constant="DNS_HINFO" usage="DNS_HINFO - ">Host Info Resource (See IANA's
        Operating System Names
        for the meaning of these values)</phpsyntax><phpsyntax constant="DNS_SOA" usage="DNS_SOA - ">Start of Authority Resource</phpsyntax><phpsyntax constant="DNS_TXT" usage="DNS_TXT - ">Text Resource</phpsyntax><phpsyntax constant="DNS_ANY" usage="DNS_ANY - ">Any Resource Record.  On most systems
        this returns all resource records, however
        it should not be counted upon for critical
	uses.  Try DNS_ALL instead.</phpsyntax><phpsyntax constant="DNS_AAAA" usage="DNS_AAAA - ">IPv6 Address Resource</phpsyntax><phpsyntax constant="DNS_ALL" usage="DNS_ALL - ">Iteratively query the name server for
        each available record type.</phpsyntax><phpsyntax constant="YPERR_BADARGS" usage="YPERR_BADARGS - "/><phpsyntax constant="YPERR_BADDB" usage="YPERR_BADDB - "/><phpsyntax constant="YPERR_BUSY" usage="YPERR_BUSY - "/><phpsyntax constant="YPERR_DOMAIN" usage="YPERR_DOMAIN - "/><phpsyntax constant="YPERR_KEY" usage="YPERR_KEY - "/><phpsyntax constant="YPERR_MAP" usage="YPERR_MAP - "/><phpsyntax constant="YPERR_NODOM" usage="YPERR_NODOM - "/><phpsyntax constant="YPERR_NOMORE" usage="YPERR_NOMORE - "/><phpsyntax constant="YPERR_PMAP" usage="YPERR_PMAP - "/><phpsyntax constant="YPERR_RESRC" usage="YPERR_RESRC - "/><phpsyntax constant="YPERR_RPC" usage="YPERR_RPC - "/><phpsyntax constant="YPERR_YPBIND" usage="YPERR_YPBIND - "/><phpsyntax constant="YPERR_YPERR" usage="YPERR_YPERR - "/><phpsyntax constant="YPERR_YPSERV" usage="YPERR_YPSERV - "/><phpsyntax constant="YPERR_VERS" usage="YPERR_VERS - "/><phpsyntax constant="OCI_DEFAULT" usage="OCI_DEFAULT - "/><phpsyntax constant="OCI_DESCRIBE_ONLY" usage="OCI_DESCRIBE_ONLY - "/><phpsyntax constant="OCI_COMMIT_ON_SUCCESS" usage="OCI_COMMIT_ON_SUCCESS - "/><phpsyntax constant="OCI_EXACT_FETCH" usage="OCI_EXACT_FETCH - "/><phpsyntax constant="OCI_SYSDATE" usage="OCI_SYSDATE - "/><phpsyntax constant="OCI_B_BFILE" usage="OCI_B_BFILE - "/><phpsyntax constant="OCI_B_CFILEE" usage="OCI_B_CFILEE - "/><phpsyntax constant="OCI_B_CLOB" usage="OCI_B_CLOB - "/><phpsyntax constant="OCI_B_BLOB" usage="OCI_B_BLOB - "/><phpsyntax constant="OCI_B_ROWID" usage="OCI_B_ROWID - "/><phpsyntax constant="OCI_B_CURSOR" usage="OCI_B_CURSOR - "/><phpsyntax constant="OCI_B_NTY" usage="OCI_B_NTY - "/><phpsyntax constant="OCI_B_BIN" usage="OCI_B_BIN - "/><phpsyntax constant="SQLT_BFILEE" usage="SQLT_BFILEE - "/><phpsyntax constant="SQLT_CFILEE" usage="SQLT_CFILEE - "/><phpsyntax constant="SQLT_CLOB" usage="SQLT_CLOB - "/><phpsyntax constant="SQLT_BLOB" usage="SQLT_BLOB - "/><phpsyntax constant="SQLT_RDD" usage="SQLT_RDD - "/><phpsyntax constant="SQLT_NTY" usage="SQLT_NTY - "/><phpsyntax constant="OCI_FETCHSTATEMENT_BY_COLUMN" usage="OCI_FETCHSTATEMENT_BY_COLUMN - "/><phpsyntax constant="OCI_FETCHSTATEMENT_BY_ROW" usage="OCI_FETCHSTATEMENT_BY_ROW - "/><phpsyntax constant="OCI_ASSOC" usage="OCI_ASSOC - "/><phpsyntax constant="OCI_NUM" usage="OCI_NUM - "/><phpsyntax constant="OCI_BOTH" usage="OCI_BOTH - "/><phpsyntax constant="OCI_RETURN_NULLS" usage="OCI_RETURN_NULLS - "/><phpsyntax constant="OCI_RETURN_LOBS" usage="OCI_RETURN_LOBS - "/><phpsyntax constant="OCI_DTYPE_FILE" usage="OCI_DTYPE_FILE - "/><phpsyntax constant="OCI_DTYPE_LOB" usage="OCI_DTYPE_LOB - "/><phpsyntax constant="OCI_DTYPE_ROWID" usage="OCI_DTYPE_ROWID - "/><phpsyntax constant="OCI_D_FILE" usage="OCI_D_FILE - "/><phpsyntax constant="OCI_D_LOB" usage="OCI_D_LOB - "/><phpsyntax constant="OCI_D_ROWID" usage="OCI_D_ROWID - "/><phpsyntax constant="PKCS7_TEXT" usage="PKCS7_TEXT - ">Adds text/plain content type headers to encrypted/signed
         message. If decrypting or verifying, it strips those headers from
         the output - if the decrypted or verified message is not of MIME type
         text/plain then an error will occur.</phpsyntax><phpsyntax constant="PKCS7_BINARY" usage="PKCS7_BINARY - ">Normally the input message is converted to "canonical" format
         which is effectively using CR and LF as end of line: as required by
         the S/MIME specification.  When this options is present, no
         translation occurs.  This is useful when handling binary data which
         may not be in MIME format.</phpsyntax><phpsyntax constant="PKCS7_NOINTERN" usage="PKCS7_NOINTERN - ">When verifying a message, certificates (if
           any) included in the message are normally searched for the
           signing certificate. With this option only the
           certificates specified in the extracerts
           parameter of openssl_pkcs7_verify are
           used.  The supplied certificates can still be used as
           untrusted CAs however.</phpsyntax><phpsyntax constant="PKCS7_NOVERIFY" usage="PKCS7_NOVERIFY - ">Do not verify the signers certificate of a signed
         message.</phpsyntax><phpsyntax constant="PKCS7_NOCHAIN" usage="PKCS7_NOCHAIN - ">Do not chain verification of signers certificates: that is
         don't use the certificates in the signed message as untrusted CAs.</phpsyntax><phpsyntax constant="PKCS7_NOCERTS" usage="PKCS7_NOCERTS - ">When signing a message the signer's certificate is normally
         included - with this option it is excluded.  This will reduce the
         size of the signed message but the verifier must have a copy of the
         signers certificate available locally (passed using the
         extracerts to
         openssl_pkcs7_verify for example).</phpsyntax><phpsyntax constant="PKCS7_NOATTR" usage="PKCS7_NOATTR - ">Normally when a message is signed, a set of attributes are
         included which include the signing time and the supported symmetric
         algorithms.  With this option they are not included.</phpsyntax><phpsyntax constant="PKCS7_DETACHED" usage="PKCS7_DETACHED - ">When signing a message, use cleartext signing with the MIME
         type multipart/signed.  This is the default
         if you do not specify any flags to
         openssl_pkcs7_sign.
         If you turn this option off, the message will be signed using
         opaque signing, which is more resistant to translation by mail relays
         but cannot be read by mail agents that do not support S/MIME.</phpsyntax><phpsyntax constant="PKCS7_NOSIGS" usage="PKCS7_NOSIGS - ">Don't try and verify the signatures on a message</phpsyntax><phpsyntax constant="ORA_BIND_INOUT" usage="ORA_BIND_INOUT - "/><phpsyntax constant="ORA_BIND_IN" usage="ORA_BIND_IN - "/><phpsyntax constant="ORA_BIND_OUT" usage="ORA_BIND_OUT - "/><phpsyntax constant="ORA_FETCHINTO_ASSOC" usage="ORA_FETCHINTO_ASSOC - "/><phpsyntax constant="ORA_FETCHINTO_NULLS" usage="ORA_FETCHINTO_NULLS - "/><phpsyntax constant="WNOHANG" usage="WNOHANG - "/><phpsyntax constant="WUNTRACED" usage="WUNTRACED - "/><phpsyntax constant="SIG_IGN" usage="SIG_IGN - "/><phpsyntax constant="SIG_DFL" usage="SIG_DFL - "/><phpsyntax constant="SIG_ERR" usage="SIG_ERR - "/><phpsyntax constant="SIGHUP" usage="SIGHUP - "/><phpsyntax constant="SIGINT" usage="SIGINT - "/><phpsyntax constant="SIGQUIT" usage="SIGQUIT - "/><phpsyntax constant="SIGILL" usage="SIGILL - "/><phpsyntax constant="SIGTRAP" usage="SIGTRAP - "/><phpsyntax constant="SIGABRT" usage="SIGABRT - "/><phpsyntax constant="SIGIOT" usage="SIGIOT - "/><phpsyntax constant="SIGBUS" usage="SIGBUS - "/><phpsyntax constant="SIGFPE" usage="SIGFPE - "/><phpsyntax constant="SIGKILL" usage="SIGKILL - "/><phpsyntax constant="SIGUSR1" usage="SIGUSR1 - "/><phpsyntax constant="SIGSEGV" usage="SIGSEGV - "/><phpsyntax constant="SIGUSR2" usage="SIGUSR2 - "/><phpsyntax constant="SIGPIPE" usage="SIGPIPE - "/><phpsyntax constant="SIGALRM" usage="SIGALRM - "/><phpsyntax constant="SIGTERM" usage="SIGTERM - "/><phpsyntax constant="SIGSTKFLT" usage="SIGSTKFLT - "/><phpsyntax constant="SIGCLD" usage="SIGCLD - "/><phpsyntax constant="SIGCHLD" usage="SIGCHLD - "/><phpsyntax constant="SIGCONT" usage="SIGCONT - "/><phpsyntax constant="SIGSTOP" usage="SIGSTOP - "/><phpsyntax constant="SIGTSTP" usage="SIGTSTP - "/><phpsyntax constant="SIGTTIN" usage="SIGTTIN - "/><phpsyntax constant="SIGTTOU" usage="SIGTTOU - "/><phpsyntax constant="SIGURG" usage="SIGURG - "/><phpsyntax constant="SIGXCPU" usage="SIGXCPU - "/><phpsyntax constant="SIGXFSZ" usage="SIGXFSZ - "/><phpsyntax constant="SIGVTALRM" usage="SIGVTALRM - "/><phpsyntax constant="SIGPROF" usage="SIGPROF - "/><phpsyntax constant="SIGWINCH" usage="SIGWINCH - "/><phpsyntax constant="SIGPOLL" usage="SIGPOLL - "/><phpsyntax constant="SIGIO" usage="SIGIO - "/><phpsyntax constant="SIGPWR" usage="SIGPWR - "/><phpsyntax constant="SIGSYS" usage="SIGSYS - "/><phpsyntax constant="SIGBABY" usage="SIGBABY - "/><phpsyntax constant="PREG_PATTERN_ORDER" usage="PREG_PATTERN_ORDER - ">Orders results so that $matches[0] is an array of full pattern
      matches, $matches[1] is an array of strings matched by the first
      parenthesized subpattern, and so on. This flag is only used with
      preg_match_all.</phpsyntax><phpsyntax constant="PREG_SET_ORDER" usage="PREG_SET_ORDER - ">Orders results so that $matches[0] is an array of first set of
      matches, $matches[1] is an array of second set of matches, and so
      on. This flag is only used with preg_match_all.</phpsyntax><phpsyntax constant="PREG_OFFSET_CAPTURE" usage="PREG_OFFSET_CAPTURE - ">See the description of
      PREG_SPLIT_OFFSET_CAPTURE.  This flag is
      available since PHP 4.3.0.</phpsyntax><phpsyntax constant="PREG_SPLIT_NO_EMPTY" usage="PREG_SPLIT_NO_EMPTY - ">This flag tells preg_split to return only non-empty
      pieces.</phpsyntax><phpsyntax constant="PREG_SPLIT_DELIM_CAPTURE" usage="PREG_SPLIT_DELIM_CAPTURE - ">This flag tells preg_split to capture
      parenthesized expression in the delimiter pattern as well. This flag
      is available since PHP 4.0.5.</phpsyntax><phpsyntax constant="PREG_SPLIT_OFFSET_CAPTURE" usage="PREG_SPLIT_OFFSET_CAPTURE - ">If this flag is set, for every occurring match the appendant string
      offset will also be returned. Note that this changes the return
      values in an array where every element is an array consisting of the
      matched string at offset 0 and its string offset within subject at
      offset 1. This flag is available since PHP 4.3.0
      and is only used for preg_split.</phpsyntax><phpsyntax constant="PGSQL_ASSOC" usage="PGSQL_ASSOC - "/><phpsyntax constant="PGSQL_NUM" usage="PGSQL_NUM - "/><phpsyntax constant="PGSQL_BOTH" usage="PGSQL_BOTH - "/><phpsyntax constant="PGSQL_CONNECTION_BAD" usage="PGSQL_CONNECTION_BAD - "/><phpsyntax constant="PGSQL_CONNECTION_OK" usage="PGSQL_CONNECTION_OK - "/><phpsyntax constant="PGSQL_SEEK_SET" usage="PGSQL_SEEK_SET - "/><phpsyntax constant="PGSQL_SEEK_CUR" usage="PGSQL_SEEK_CUR - "/><phpsyntax constant="PGSQL_SEEK_END" usage="PGSQL_SEEK_END - "/><phpsyntax constant="PGSQL_ESCAPE_STRING" usage="PGSQL_ESCAPE_STRING - "/><phpsyntax constant="PGSQL_ESCAPE_BYTEA" usage="PGSQL_ESCAPE_BYTEA - "/><phpsyntax constant="PGSQL_EMPTY_QUERY" usage="PGSQL_EMPTY_QUERY - "/><phpsyntax constant="PGSQL_COMMAND_OK" usage="PGSQL_COMMAND_OK - "/><phpsyntax constant="PGSQL_TUPLES_OK" usage="PGSQL_TUPLES_OK - "/><phpsyntax constant="PGSQL_COPY_OUT" usage="PGSQL_COPY_OUT - "/><phpsyntax constant="PGSQL_COPY_IN" usage="PGSQL_COPY_IN - "/><phpsyntax constant="PGSQL_BAD_RESPONSE" usage="PGSQL_BAD_RESPONSE - "/><phpsyntax constant="PGSQL_NONFATAL_ERROR" usage="PGSQL_NONFATAL_ERROR - "/><phpsyntax constant="PGSQL_FATAL_ERROR" usage="PGSQL_FATAL_ERROR - "/><phpsyntax constant="PSPELL_FAST" usage="PSPELL_FAST - "/><phpsyntax constant="PSPELL_NORMAL" usage="PSPELL_NORMAL - "/><phpsyntax constant="PSPELL_BAD_SPELLERS" usage="PSPELL_BAD_SPELLERS - "/><phpsyntax constant="PSPELL_RUN_TOGETHER" usage="PSPELL_RUN_TOGETHER - "/><phpsyntax constant="MSG_IPC_NOWAIT" usage="MSG_IPC_NOWAIT - ">integer</phpsyntax><phpsyntax constant="MSG_NOERROR" usage="MSG_NOERROR - ">integer</phpsyntax><phpsyntax constant="MSG_EXCEPT" usage="MSG_EXCEPT - ">integer</phpsyntax><phpsyntax constant="SID" usage="SID - "/><phpsyntax constant="SNMP_VALUE_LIBRARY" usage="SNMP_VALUE_LIBRARY - "/><phpsyntax constant="SNMP_VALUE_PLAIN" usage="SNMP_VALUE_PLAIN - "/><phpsyntax constant="SNMP_VALUE_OBJECT" usage="SNMP_VALUE_OBJECT - "/><phpsyntax constant="SNMP_BIT_STR" usage="SNMP_BIT_STR - "/><phpsyntax constant="SNMP_OCTET_STR" usage="SNMP_OCTET_STR - "/><phpsyntax constant="SNMP_OPAQUE" usage="SNMP_OPAQUE - "/><phpsyntax constant="SNMP_NULL" usage="SNMP_NULL - "/><phpsyntax constant="SNMP_OBJECT_ID" usage="SNMP_OBJECT_ID - "/><phpsyntax constant="SNMP_IPADDRESS" usage="SNMP_IPADDRESS - "/><phpsyntax constant="SNMP_COUNTER" usage="SNMP_COUNTER - "/><phpsyntax constant="SNMP_UNSIGNED" usage="SNMP_UNSIGNED - "/><phpsyntax constant="SNMP_TIMETICKS" usage="SNMP_TIMETICKS - "/><phpsyntax constant="SNMP_UINTEGER" usage="SNMP_UINTEGER - "/><phpsyntax constant="SNMP_INTEGER" usage="SNMP_INTEGER - "/><phpsyntax constant="SNMP_COUNTER64" usage="SNMP_COUNTER64 - "/><phpsyntax constant="SOAP_1_1" usage="SOAP_1_1 - "/><phpsyntax constant="SOAP_1_2" usage="SOAP_1_2 - "/><phpsyntax constant="SOAP_PERSISTENCE_SESSION" usage="SOAP_PERSISTENCE_SESSION - "/><phpsyntax constant="SOAP_PERSISTENCE_REQUEST" usage="SOAP_PERSISTENCE_REQUEST - "/><phpsyntax constant="SOAP_FUNCTIONS_ALL" usage="SOAP_FUNCTIONS_ALL - "/><phpsyntax constant="SOAP_ENCODED" usage="SOAP_ENCODED - "/><phpsyntax constant="SOAP_LITERAL" usage="SOAP_LITERAL - "/><phpsyntax constant="SOAP_RPC" usage="SOAP_RPC - "/><phpsyntax constant="SOAP_DOCUMENT" usage="SOAP_DOCUMENT - "/><phpsyntax constant="SOAP_ACTOR_NEXT" usage="SOAP_ACTOR_NEXT - "/><phpsyntax constant="SOAP_ACTOR_NONE" usage="SOAP_ACTOR_NONE - "/><phpsyntax constant="SOAP_ACTOR_UNLIMATERECEIVER" usage="SOAP_ACTOR_UNLIMATERECEIVER - "/><phpsyntax constant="UNKNOWN_TYPE" usage="UNKNOWN_TYPE - "/><phpsyntax constant="XSD_STRING" usage="XSD_STRING - "/><phpsyntax constant="XSD_BOOLEAN" usage="XSD_BOOLEAN - "/><phpsyntax constant="XSD_DECIMAL" usage="XSD_DECIMAL - "/><phpsyntax constant="XSD_FLOAT" usage="XSD_FLOAT - "/><phpsyntax constant="XSD_DOUBLE" usage="XSD_DOUBLE - "/><phpsyntax constant="XSD_DURATION" usage="XSD_DURATION - "/><phpsyntax constant="XSD_DATETIME" usage="XSD_DATETIME - "/><phpsyntax constant="XSD_TIME" usage="XSD_TIME - "/><phpsyntax constant="XSD_DATE" usage="XSD_DATE - "/><phpsyntax constant="XSD_GYEARMONTH" usage="XSD_GYEARMONTH - "/><phpsyntax constant="XSD_GYEAR" usage="XSD_GYEAR - "/><phpsyntax constant="XSD_GMONTHDAY" usage="XSD_GMONTHDAY - "/><phpsyntax constant="XSD_GDAY" usage="XSD_GDAY - "/><phpsyntax constant="XSD_GMONTH" usage="XSD_GMONTH - "/><phpsyntax constant="XSD_HEXBINARY" usage="XSD_HEXBINARY - "/><phpsyntax constant="XSD_BASE64BINARY" usage="XSD_BASE64BINARY - "/><phpsyntax constant="XSD_ANYURI" usage="XSD_ANYURI - "/><phpsyntax constant="XSD_QNAME" usage="XSD_QNAME - "/><phpsyntax constant="XSD_NOTATION" usage="XSD_NOTATION - "/><phpsyntax constant="XSD_NORMALIZEDSTRING" usage="XSD_NORMALIZEDSTRING - "/><phpsyntax constant="XSD_TOKEN" usage="XSD_TOKEN - "/><phpsyntax constant="XSD_LANGUAGE" usage="XSD_LANGUAGE - "/><phpsyntax constant="XSD_NMTOKEN" usage="XSD_NMTOKEN - "/><phpsyntax constant="XSD_NAME" usage="XSD_NAME - "/><phpsyntax constant="XSD_NCNAME" usage="XSD_NCNAME - "/><phpsyntax constant="XSD_ID" usage="XSD_ID - "/><phpsyntax constant="XSD_IDREF" usage="XSD_IDREF - "/><phpsyntax constant="XSD_IDREFS" usage="XSD_IDREFS - "/><phpsyntax constant="XSD_ENTITY" usage="XSD_ENTITY - "/><phpsyntax constant="XSD_ENTITIES" usage="XSD_ENTITIES - "/><phpsyntax constant="XSD_INTEGER" usage="XSD_INTEGER - "/><phpsyntax constant="XSD_NONPOSITIVEINTEGER" usage="XSD_NONPOSITIVEINTEGER - "/><phpsyntax constant="XSD_NEGATIVEINTEGER" usage="XSD_NEGATIVEINTEGER - "/><phpsyntax constant="XSD_LONG" usage="XSD_LONG - "/><phpsyntax constant="XSD_INT" usage="XSD_INT - "/><phpsyntax constant="XSD_SHORT" usage="XSD_SHORT - "/><phpsyntax constant="XSD_BYTE" usage="XSD_BYTE - "/><phpsyntax constant="XSD_NONNEGATIVEINTEGER" usage="XSD_NONNEGATIVEINTEGER - "/><phpsyntax constant="XSD_UNSIGNEDLONG" usage="XSD_UNSIGNEDLONG - "/><phpsyntax constant="XSD_UNSIGNEDINT" usage="XSD_UNSIGNEDINT - "/><phpsyntax constant="XSD_UNSIGNEDSHORT" usage="XSD_UNSIGNEDSHORT - "/><phpsyntax constant="XSD_UNSIGNEDBYTE" usage="XSD_UNSIGNEDBYTE - "/><phpsyntax constant="XSD_POSITIVEINTEGER" usage="XSD_POSITIVEINTEGER - "/><phpsyntax constant="XSD_NMTOKENS" usage="XSD_NMTOKENS - "/><phpsyntax constant="XSD_ANYTYPE" usage="XSD_ANYTYPE - "/><phpsyntax constant="SOAP_ENC_OBJECT" usage="SOAP_ENC_OBJECT - "/><phpsyntax constant="SOAP_ENC_ARRAY" usage="SOAP_ENC_ARRAY - "/><phpsyntax constant="XSD_1999_TIMEINSTANT" usage="XSD_1999_TIMEINSTANT - "/><phpsyntax constant="XSD_NAMESPACE" usage="XSD_NAMESPACE - "/><phpsyntax constant="XSD_1999_NAMESPACE" usage="XSD_1999_NAMESPACE - "/><phpsyntax constant="AF_UNIX" usage="AF_UNIX - "/><phpsyntax constant="AF_INET" usage="AF_INET - "/><phpsyntax constant="AF_INET6" usage="AF_INET6 - "/><phpsyntax constant="SOCK_STREAM" usage="SOCK_STREAM - "/><phpsyntax constant="SOCK_DGRAM" usage="SOCK_DGRAM - "/><phpsyntax constant="SOCK_RAW" usage="SOCK_RAW - "/><phpsyntax constant="SOCK_SEQPACKET" usage="SOCK_SEQPACKET - "/><phpsyntax constant="SOCK_RDM" usage="SOCK_RDM - "/><phpsyntax constant="MSG_OOB" usage="MSG_OOB - "/><phpsyntax constant="MSG_WAITALL" usage="MSG_WAITALL - "/><phpsyntax constant="MSG_PEEK" usage="MSG_PEEK - "/><phpsyntax constant="MSG_DONTROUTE" usage="MSG_DONTROUTE - "/><phpsyntax constant="SO_DEBUG" usage="SO_DEBUG - "/><phpsyntax constant="SO_REUSEADDR" usage="SO_REUSEADDR - "/><phpsyntax constant="SO_KEEPALIVE" usage="SO_KEEPALIVE - "/><phpsyntax constant="SO_DONTROUTE" usage="SO_DONTROUTE - "/><phpsyntax constant="SO_LINGER" usage="SO_LINGER - "/><phpsyntax constant="SO_BROADCAST" usage="SO_BROADCAST - "/><phpsyntax constant="SO_OOBINLINE" usage="SO_OOBINLINE - "/><phpsyntax constant="SO_SNDBUF" usage="SO_SNDBUF - "/><phpsyntax constant="SO_RCVBUF" usage="SO_RCVBUF - "/><phpsyntax constant="SO_SNDLOWAT" usage="SO_SNDLOWAT - "/><phpsyntax constant="SO_RCVLOWAT" usage="SO_RCVLOWAT - "/><phpsyntax constant="SO_SNDTIMEO" usage="SO_SNDTIMEO - "/><phpsyntax constant="SO_RCVTIMEO" usage="SO_RCVTIMEO - "/><phpsyntax constant="SO_TYPE" usage="SO_TYPE - "/><phpsyntax constant="SO_ERROR" usage="SO_ERROR - "/><phpsyntax constant="SOL_SOCKET" usage="SOL_SOCKET - "/><phpsyntax constant="PHP_NORMAL_READ" usage="PHP_NORMAL_READ - "/><phpsyntax constant="PHP_BINARY_READ" usage="PHP_BINARY_READ - "/><phpsyntax constant="SOL_TCP" usage="SOL_TCP - "/><phpsyntax constant="SOL_UDP" usage="SOL_UDP - "/><phpsyntax constant="RIT_LEAVES_ONLY" usage="RIT_LEAVES_ONLY - "/><phpsyntax constant="RIT_SELF_FIRST" usage="RIT_SELF_FIRST - "/><phpsyntax constant="RIT_CHILD_FIRST" usage="RIT_CHILD_FIRST - "/><phpsyntax constant="CIT_CALL_TOSTRING" usage="CIT_CALL_TOSTRING - "/><phpsyntax constant="CIT_CATCH_GET_CHILD" usage="CIT_CATCH_GET_CHILD - "/><phpsyntax constant="SQLITE_ASSOC" usage="SQLITE_ASSOC - ">Columns are returned into the array having the fieldname as the array
      index.</phpsyntax><phpsyntax constant="SQLITE_BOTH" usage="SQLITE_BOTH - ">Columns are returned into the array having both a numerical index
       and the fieldname as the array index.</phpsyntax><phpsyntax constant="SQLITE_NUM" usage="SQLITE_NUM - ">Columns are returned into the array having a numerical index to the
       fields. This index starts with 0, the first field in the result.</phpsyntax><phpsyntax constant="STREAM_FILTER_READ" usage="STREAM_FILTER_READ - ">Used with stream_filter_append and
       stream_filter_prepend to indicate
       that the specified filter should only be applied when
       reading</phpsyntax><phpsyntax constant="STREAM_FILTER_WRITE" usage="STREAM_FILTER_WRITE - ">Used with stream_filter_append and
       stream_filter_prepend to indicate
       that the specified filter should only be applied when
       writing</phpsyntax><phpsyntax constant="STREAM_FILTER_ALL" usage="STREAM_FILTER_ALL - ">This constant is equivalent to 
       STREAM_FILTER_READ |
       STREAM_FILTER_WRITE</phpsyntax><phpsyntax constant="PSFS_PASS_ON" usage="PSFS_PASS_ON - ">Return Code indicating that the
       userspace filter returned buckets in $out.</phpsyntax><phpsyntax constant="PSFS_FEED_ME" usage="PSFS_FEED_ME - ">Return Code indicating that the
       userspace filter did not return buckets in $out
       (i.e. No data available).</phpsyntax><phpsyntax constant="PSFS_ERR_FATAL" usage="PSFS_ERR_FATAL - ">Return Code indicating that the
       userspace filter encountered an unrecoverable error
       (i.e. Invalid data received).</phpsyntax><phpsyntax constant="STREAM_USE_PATH" usage="STREAM_USE_PATH - ">Flag indicating if the stream
       used the include path.</phpsyntax><phpsyntax constant="STREAM_REPORT_ERRORS" usage="STREAM_REPORT_ERRORS - ">Flag indicating if the wrapper
       is responsible for raising errors using trigger_error 
       during opening of the stream.  If this flag is not set, you
       should not raise any errors.</phpsyntax><phpsyntax constant="STREAM_CLIENT_ASYNC_CONNECT" usage="STREAM_CLIENT_ASYNC_CONNECT - ">Open client socket asynchronously.  Used with
       stream_socket_client.</phpsyntax><phpsyntax constant="STREAM_CLIENT_PERSISTENT" usage="STREAM_CLIENT_PERSISTENT - ">Client socket opened with stream_socket_client
       should remain persistent between page loads.</phpsyntax><phpsyntax constant="STREAM_SERVER_BIND" usage="STREAM_SERVER_BIND - ">Tells a stream created with stream_socket_server
       to bind to the specified target.  Server sockets should always include this flag.</phpsyntax><phpsyntax constant="STREAM_SERVER_LISTEN" usage="STREAM_SERVER_LISTEN - ">Tells a stream created with stream_socket_server
       and bound using the STREAM_SERVER_BIND flag to start
       listening on the socket.  Server sockets should always include this flag.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_RESOLVE" usage="STREAM_NOTIFY_RESOLVE - ">A remote address required for this stream has been resolved, or the resolution
       failed.  See severity for an indication of which happened.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_CONNECT" usage="STREAM_NOTIFY_CONNECT - ">A connection with an external resource has been established.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_AUTH_REQUIRED" usage="STREAM_NOTIFY_AUTH_REQUIRED - ">Additional authorization is required to access the specified resource.
       Typical issued with severity level of
       STREAM_NOTIFY_SEVERITY_ERR.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_MIME_TYPE_IS" usage="STREAM_NOTIFY_MIME_TYPE_IS - ">The mime-type of resource has been identified,
       refer to message for a description of the
       discovered type.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_FILE_SIZE_IS" usage="STREAM_NOTIFY_FILE_SIZE_IS - ">The size of the resource has been discovered.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_REDIRECTED" usage="STREAM_NOTIFY_REDIRECTED - ">The external resource has redirected the stream to an alternate
       location.  Refer to message.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_PROGRESS" usage="STREAM_NOTIFY_PROGRESS - ">Indicates current progress of the stream transfer in
       bytes_transferred and possibly
       bytes_max as well.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_COMPLETED" usage="STREAM_NOTIFY_COMPLETED - ">There is no more data available on the stream.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_FAILURE" usage="STREAM_NOTIFY_FAILURE - ">A generic error occurred on the stream, consult
       message and message_code
       for details.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_AUTH_RESULT" usage="STREAM_NOTIFY_AUTH_RESULT - ">Authorization has been completed (with or without success).</phpsyntax><phpsyntax constant="STREAM_NOTIFY_SEVERITY_INFO" usage="STREAM_NOTIFY_SEVERITY_INFO - ">Normal, non-error related, notification.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_SEVERITY_WARN" usage="STREAM_NOTIFY_SEVERITY_WARN - ">Non critical error condition.  Processing may continue.</phpsyntax><phpsyntax constant="STREAM_NOTIFY_SEVERITY_ERR" usage="STREAM_NOTIFY_SEVERITY_ERR - ">A critical error occurred.  Processing cannot continue.</phpsyntax><phpsyntax constant="CRYPT_SALT_LENGTH" usage="CRYPT_SALT_LENGTH - "/><phpsyntax constant="CRYPT_STD_DES" usage="CRYPT_STD_DES - "/><phpsyntax constant="CRYPT_EXT_DES" usage="CRYPT_EXT_DES - "/><phpsyntax constant="CRYPT_MD5" usage="CRYPT_MD5 - "/><phpsyntax constant="CRYPT_BLOWFISH" usage="CRYPT_BLOWFISH - "/><phpsyntax constant="HTML_SPECIALCHARS" usage="HTML_SPECIALCHARS - "/><phpsyntax constant="HTML_ENTITIES" usage="HTML_ENTITIES - "/><phpsyntax constant="ENT_COMPAT" usage="ENT_COMPAT - "/><phpsyntax constant="ENT_QUOTES" usage="ENT_QUOTES - "/><phpsyntax constant="ENT_NOQUOTES" usage="ENT_NOQUOTES - "/><phpsyntax constant="CHAR_MAX" usage="CHAR_MAX - "/><phpsyntax constant="LC_CTYPE" usage="LC_CTYPE - "/><phpsyntax constant="LC_NUMERIC" usage="LC_NUMERIC - "/><phpsyntax constant="LC_TIME" usage="LC_TIME - "/><phpsyntax constant="LC_COLLATE" usage="LC_COLLATE - "/><phpsyntax constant="LC_MONETARY" usage="LC_MONETARY - "/><phpsyntax constant="LC_ALL" usage="LC_ALL - "/><phpsyntax constant="LC_MESSAGES" usage="LC_MESSAGES - "/><phpsyntax constant="STR_PAD_LEFT" usage="STR_PAD_LEFT - "/><phpsyntax constant="STR_PAD_RIGHT" usage="STR_PAD_RIGHT - "/><phpsyntax constant="STR_PAD_BOTH" usage="STR_PAD_BOTH - "/><phpsyntax constant="MOD_COLOR" usage="MOD_COLOR - "/><phpsyntax constant="MOD_MATRIX" usage="MOD_MATRIX - "/><phpsyntax constant="TYPE_PUSHBUTTON" usage="TYPE_PUSHBUTTON - "/><phpsyntax constant="TYPE_MENUBUTTON" usage="TYPE_MENUBUTTON - "/><phpsyntax constant="BSHitTest" usage="BSHitTest - "/><phpsyntax constant="BSDown" usage="BSDown - "/><phpsyntax constant="BSOver" usage="BSOver - "/><phpsyntax constant="BSUp" usage="BSUp - "/><phpsyntax constant="OverDowntoIdle" usage="OverDowntoIdle - "/><phpsyntax constant="IdletoOverDown" usage="IdletoOverDown - "/><phpsyntax constant="OutDowntoIdle" usage="OutDowntoIdle - "/><phpsyntax constant="OutDowntoOverDown" usage="OutDowntoOverDown - "/><phpsyntax constant="OverDowntoOutDown" usage="OverDowntoOutDown - "/><phpsyntax constant="OverUptoOverDown" usage="OverUptoOverDown - "/><phpsyntax constant="OverUptoIdle" usage="OverUptoIdle - "/><phpsyntax constant="IdletoOverUp" usage="IdletoOverUp - "/><phpsyntax constant="ButtonEnter" usage="ButtonEnter - "/><phpsyntax constant="ButtonExit" usage="ButtonExit - "/><phpsyntax constant="MenuEnter" usage="MenuEnter - "/><phpsyntax constant="MenuExit" usage="MenuExit - "/><phpsyntax constant="TIDY_TAG_UNKNOWN" usage="TIDY_TAG_UNKNOWN - "/><phpsyntax constant="TIDY_TAG_A" usage="TIDY_TAG_A - "/><phpsyntax constant="TIDY_TAG_ABBR" usage="TIDY_TAG_ABBR - "/><phpsyntax constant="TIDY_TAG_ACRONYM" usage="TIDY_TAG_ACRONYM - "/><phpsyntax constant="TIDY_TAG_ALIGN" usage="TIDY_TAG_ALIGN - "/><phpsyntax constant="TIDY_TAG_APPLET" usage="TIDY_TAG_APPLET - "/><phpsyntax constant="TIDY_TAG_AREA" usage="TIDY_TAG_AREA - "/><phpsyntax constant="TIDY_TAG_B" usage="TIDY_TAG_B - "/><phpsyntax constant="TIDY_TAG_BASE" usage="TIDY_TAG_BASE - "/><phpsyntax constant="TIDY_TAG_BASEFONT" usage="TIDY_TAG_BASEFONT - "/><phpsyntax constant="TIDY_TAG_BDO" usage="TIDY_TAG_BDO - "/><phpsyntax constant="TIDY_TAG_BGSOUND" usage="TIDY_TAG_BGSOUND - "/><phpsyntax constant="TIDY_TAG_BIG" usage="TIDY_TAG_BIG - "/><phpsyntax constant="TIDY_TAG_BLINK" usage="TIDY_TAG_BLINK - "/><phpsyntax constant="TIDY_TAG_BLOCKQUOTE" usage="TIDY_TAG_BLOCKQUOTE - "/><phpsyntax constant="TIDY_TAG_BODY" usage="TIDY_TAG_BODY - "/><phpsyntax constant="TIDY_TAG_BR" usage="TIDY_TAG_BR - "/><phpsyntax constant="TIDY_TAG_BUTTON" usage="TIDY_TAG_BUTTON - "/><phpsyntax constant="TIDY_TAG_CAPTION" usage="TIDY_TAG_CAPTION - "/><phpsyntax constant="TIDY_TAG_CENTER" usage="TIDY_TAG_CENTER - "/><phpsyntax constant="TIDY_TAG_CITE" usage="TIDY_TAG_CITE - "/><phpsyntax constant="TIDY_TAG_CODE" usage="TIDY_TAG_CODE - "/><phpsyntax constant="TIDY_TAG_COL" usage="TIDY_TAG_COL - "/><phpsyntax constant="TIDY_TAG_COLGROUP" usage="TIDY_TAG_COLGROUP - "/><phpsyntax constant="TIDY_TAG_COMMENT" usage="TIDY_TAG_COMMENT - "/><phpsyntax constant="TIDY_TAG_DD" usage="TIDY_TAG_DD - "/><phpsyntax constant="TIDY_TAG_DEL" usage="TIDY_TAG_DEL - "/><phpsyntax constant="TIDY_TAG_DFN" usage="TIDY_TAG_DFN - "/><phpsyntax constant="TIDY_TAG_DIR" usage="TIDY_TAG_DIR - "/><phpsyntax constant="TIDY_TAG_DIV" usage="TIDY_TAG_DIV - "/><phpsyntax constant="TIDY_TAG_DL" usage="TIDY_TAG_DL - "/><phpsyntax constant="TIDY_TAG_DT" usage="TIDY_TAG_DT - "/><phpsyntax constant="TIDY_TAG_EM" usage="TIDY_TAG_EM - "/><phpsyntax constant="TIDY_TAG_EMBED" usage="TIDY_TAG_EMBED - "/><phpsyntax constant="TIDY_TAG_FIELDSET" usage="TIDY_TAG_FIELDSET - "/><phpsyntax constant="TIDY_TAG_FONT" usage="TIDY_TAG_FONT - "/><phpsyntax constant="TIDY_TAG_FORM" usage="TIDY_TAG_FORM - "/><phpsyntax constant="TIDY_TAG_FRAME" usage="TIDY_TAG_FRAME - "/><phpsyntax constant="TIDY_TAG_FRAMESET" usage="TIDY_TAG_FRAMESET - "/><phpsyntax constant="TIDY_TAG_H1" usage="TIDY_TAG_H1 - "/><phpsyntax constant="TIDY_TAG_H2" usage="TIDY_TAG_H2 - "/><phpsyntax constant="TIDY_TAG_H3" usage="TIDY_TAG_H3 - "/><phpsyntax constant="TIDY_TAG_H4" usage="TIDY_TAG_H4 - "/><phpsyntax constant="TIDY_TAG_H5" usage="TIDY_TAG_H5 - "/><phpsyntax constant="TIDY_TAG_6" usage="TIDY_TAG_6 - "/><phpsyntax constant="TIDY_TAG_HEAD" usage="TIDY_TAG_HEAD - "/><phpsyntax constant="TIDY_TAG_HR" usage="TIDY_TAG_HR - "/><phpsyntax constant="TIDY_TAG_HTML" usage="TIDY_TAG_HTML - "/><phpsyntax constant="TIDY_TAG_I" usage="TIDY_TAG_I - "/><phpsyntax constant="TIDY_TAG_IFRAME" usage="TIDY_TAG_IFRAME - "/><phpsyntax constant="TIDY_TAG_ILAYER" usage="TIDY_TAG_ILAYER - "/><phpsyntax constant="TIDY_TAG_IMG" usage="TIDY_TAG_IMG - "/><phpsyntax constant="TIDY_TAG_INPUT" usage="TIDY_TAG_INPUT - "/><phpsyntax constant="TIDY_TAG_INS" usage="TIDY_TAG_INS - "/><phpsyntax constant="TIDY_TAG_ISINDEX" usage="TIDY_TAG_ISINDEX - "/><phpsyntax constant="TIDY_TAG_KBD" usage="TIDY_TAG_KBD - "/><phpsyntax constant="TIDY_TAG_KEYGEN" usage="TIDY_TAG_KEYGEN - "/><phpsyntax constant="TIDY_TAG_LABEL" usage="TIDY_TAG_LABEL - "/><phpsyntax constant="TIDY_TAG_LAYER" usage="TIDY_TAG_LAYER - "/><phpsyntax constant="TIDY_TAG_LEGEND" usage="TIDY_TAG_LEGEND - "/><phpsyntax constant="TIDY_TAG_LI" usage="TIDY_TAG_LI - "/><phpsyntax constant="TIDY_TAG_LINK" usage="TIDY_TAG_LINK - "/><phpsyntax constant="TIDY_TAG_LISTING" usage="TIDY_TAG_LISTING - "/><phpsyntax constant="TIDY_TAG_MAP" usage="TIDY_TAG_MAP - "/><phpsyntax constant="TIDY_TAG_MARQUEE" usage="TIDY_TAG_MARQUEE - "/><phpsyntax constant="TIDY_TAG_MENU" usage="TIDY_TAG_MENU - "/><phpsyntax constant="TIDY_TAG_META" usage="TIDY_TAG_META - "/><phpsyntax constant="TIDY_TAG_MULTICOL" usage="TIDY_TAG_MULTICOL - "/><phpsyntax constant="TIDY_TAG_NOBR" usage="TIDY_TAG_NOBR - "/><phpsyntax constant="TIDY_TAG_NOEMBED" usage="TIDY_TAG_NOEMBED - "/><phpsyntax constant="TIDY_TAG_NOFRAMES" usage="TIDY_TAG_NOFRAMES - "/><phpsyntax constant="TIDY_TAG_NOLAYER" usage="TIDY_TAG_NOLAYER - "/><phpsyntax constant="TIDY_TAG_NOSAFE" usage="TIDY_TAG_NOSAFE - "/><phpsyntax constant="TIDY_TAG_NOSCRIPT" usage="TIDY_TAG_NOSCRIPT - "/><phpsyntax constant="TIDY_TAG_OBJECT" usage="TIDY_TAG_OBJECT - "/><phpsyntax constant="TIDY_TAG_OL" usage="TIDY_TAG_OL - "/><phpsyntax constant="TIDY_TAG_OPTGROUP" usage="TIDY_TAG_OPTGROUP - "/><phpsyntax constant="TIDY_TAG_OPTION" usage="TIDY_TAG_OPTION - "/><phpsyntax constant="TIDY_TAG_P" usage="TIDY_TAG_P - "/><phpsyntax constant="TIDY_TAG_PARAM" usage="TIDY_TAG_PARAM - "/><phpsyntax constant="TIDY_TAG_PLAINTEXT" usage="TIDY_TAG_PLAINTEXT - "/><phpsyntax constant="TIDY_TAG_PRE" usage="TIDY_TAG_PRE - "/><phpsyntax constant="TIDY_TAG_Q" usage="TIDY_TAG_Q - "/><phpsyntax constant="TIDY_TAG_RP" usage="TIDY_TAG_RP - "/><phpsyntax constant="TIDY_TAG_RT" usage="TIDY_TAG_RT - "/><phpsyntax constant="TIDY_TAG_RTC" usage="TIDY_TAG_RTC - "/><phpsyntax constant="TIDY_TAG_RUBY" usage="TIDY_TAG_RUBY - "/><phpsyntax constant="TIDY_TAG_S" usage="TIDY_TAG_S - "/><phpsyntax constant="TIDY_TAG_SAMP" usage="TIDY_TAG_SAMP - "/><phpsyntax constant="TIDY_TAG_SCRIPT" usage="TIDY_TAG_SCRIPT - "/><phpsyntax constant="TIDY_TAG_SELECT" usage="TIDY_TAG_SELECT - "/><phpsyntax constant="TIDY_TAG_SERVER" usage="TIDY_TAG_SERVER - "/><phpsyntax constant="TIDY_TAG_SERVLET" usage="TIDY_TAG_SERVLET - "/><phpsyntax constant="TIDY_TAG_SMALL" usage="TIDY_TAG_SMALL - "/><phpsyntax constant="TIDY_TAG_SPACER" usage="TIDY_TAG_SPACER - "/><phpsyntax constant="TIDY_TAG_SPAN" usage="TIDY_TAG_SPAN - "/><phpsyntax constant="TIDY_TAG_STRIKE" usage="TIDY_TAG_STRIKE - "/><phpsyntax constant="TIDY_TAG_STRONG" usage="TIDY_TAG_STRONG - "/><phpsyntax constant="TIDY_TAG_STYLE" usage="TIDY_TAG_STYLE - "/><phpsyntax constant="TIDY_TAG_SUB" usage="TIDY_TAG_SUB - "/><phpsyntax constant="TIDY_TAG_TABLE" usage="TIDY_TAG_TABLE - "/><phpsyntax constant="TIDY_TAG_TBODY" usage="TIDY_TAG_TBODY - "/><phpsyntax constant="TIDY_TAG_TD" usage="TIDY_TAG_TD - "/><phpsyntax constant="TIDY_TAG_TEXTAREA" usage="TIDY_TAG_TEXTAREA - "/><phpsyntax constant="TIDY_TAG_TFOOT" usage="TIDY_TAG_TFOOT - "/><phpsyntax constant="TIDY_TAG_TH" usage="TIDY_TAG_TH - "/><phpsyntax constant="TIDY_TAG_THEAD" usage="TIDY_TAG_THEAD - "/><phpsyntax constant="TIDY_TAG_TITLE" usage="TIDY_TAG_TITLE - "/><phpsyntax constant="TIDY_TAG_TR" usage="TIDY_TAG_TR - "/><phpsyntax constant="TIDY_TAG_TR" usage="TIDY_TAG_TR - "/><phpsyntax constant="TIDY_TAG_TT" usage="TIDY_TAG_TT - "/><phpsyntax constant="TIDY_TAG_U" usage="TIDY_TAG_U - "/><phpsyntax constant="TIDY_TAG_UL" usage="TIDY_TAG_UL - "/><phpsyntax constant="TIDY_TAG_VAR" usage="TIDY_TAG_VAR - "/><phpsyntax constant="TIDY_TAG_WBR" usage="TIDY_TAG_WBR - "/><phpsyntax constant="TIDY_TAG_XMP" usage="TIDY_TAG_XMP - "/><phpsyntax constant="TIDY_ATTR_UNKNOWN" usage="TIDY_ATTR_UNKNOWN - "/><phpsyntax constant="TIDY_ATTR_ABBR" usage="TIDY_ATTR_ABBR - "/><phpsyntax constant="TIDY_ATTR_ACCEPT" usage="TIDY_ATTR_ACCEPT - "/><phpsyntax constant="TIDY_ATTR_ACCEPT_CHARSET" usage="TIDY_ATTR_ACCEPT_CHARSET - "/><phpsyntax constant="TIDY_ATTR_ACCESSKEY" usage="TIDY_ATTR_ACCESSKEY - "/><phpsyntax constant="TIDY_ATTR_ACTION" usage="TIDY_ATTR_ACTION - "/><phpsyntax constant="TIDY_ATTR_ADD_DATE" usage="TIDY_ATTR_ADD_DATE - "/><phpsyntax constant="TIDY_ATTR_ALIGN" usage="TIDY_ATTR_ALIGN - "/><phpsyntax constant="TIDY_ATTR_ALINK" usage="TIDY_ATTR_ALINK - "/><phpsyntax constant="TIDY_ATTR_ALT" usage="TIDY_ATTR_ALT - "/><phpsyntax constant="TIDY_ATTR_ARCHIVE" usage="TIDY_ATTR_ARCHIVE - "/><phpsyntax constant="TIDY_ATTR_AXIS" usage="TIDY_ATTR_AXIS - "/><phpsyntax constant="TIDY_ATTR_BACKGROUND" usage="TIDY_ATTR_BACKGROUND - "/><phpsyntax constant="TIDY_ATTR_BGCOLOR" usage="TIDY_ATTR_BGCOLOR - "/><phpsyntax constant="TIDY_ATTR_BGPROPERTIES" usage="TIDY_ATTR_BGPROPERTIES - "/><phpsyntax constant="TIDY_ATTR_BORDER" usage="TIDY_ATTR_BORDER - "/><phpsyntax constant="TIDY_ATTR_BORDERCOLOR" usage="TIDY_ATTR_BORDERCOLOR - "/><phpsyntax constant="TIDY_ATTR_BOTTOMMARGIN" usage="TIDY_ATTR_BOTTOMMARGIN - "/><phpsyntax constant="TIDY_ATTR_CELLPADDING" usage="TIDY_ATTR_CELLPADDING - "/><phpsyntax constant="TIDY_ATTR_CELLSPACING" usage="TIDY_ATTR_CELLSPACING - "/><phpsyntax constant="TIDY_ATTR_CHAR" usage="TIDY_ATTR_CHAR - "/><phpsyntax constant="TIDY_ATTR_CHAROFF" usage="TIDY_ATTR_CHAROFF - "/><phpsyntax constant="TIDY_ATTR_CHARSET" usage="TIDY_ATTR_CHARSET - "/><phpsyntax constant="TIDY_ATTR_CHECKED" usage="TIDY_ATTR_CHECKED - "/><phpsyntax constant="TIDY_ATTR_CITE" usage="TIDY_ATTR_CITE - "/><phpsyntax constant="TIDY_ATTR_CLASS" usage="TIDY_ATTR_CLASS - "/><phpsyntax constant="TIDY_ATTR_CLASSID" usage="TIDY_ATTR_CLASSID - "/><phpsyntax constant="TIDY_ATTR_CLEAR" usage="TIDY_ATTR_CLEAR - "/><phpsyntax constant="TIDY_ATTR_CODE" usage="TIDY_ATTR_CODE - "/><phpsyntax constant="TIDY_ATTR_CODEBASE" usage="TIDY_ATTR_CODEBASE - "/><phpsyntax constant="TIDY_ATTR_CODETYPE" usage="TIDY_ATTR_CODETYPE - "/><phpsyntax constant="TIDY_ATTR_COLOR" usage="TIDY_ATTR_COLOR - "/><phpsyntax constant="TIDY_ATTR_COLS" usage="TIDY_ATTR_COLS - "/><phpsyntax constant="TIDY_ATTR_COLSPAN" usage="TIDY_ATTR_COLSPAN - "/><phpsyntax constant="TIDY_ATTR_COMPACT" usage="TIDY_ATTR_COMPACT - "/><phpsyntax constant="TIDY_ATTR_CONTENT" usage="TIDY_ATTR_CONTENT - "/><phpsyntax constant="TIDY_ATTR_COORDS" usage="TIDY_ATTR_COORDS - "/><phpsyntax constant="TIDY_ATTR_DATA" usage="TIDY_ATTR_DATA - "/><phpsyntax constant="TIDY_ATTR_DATAFLD" usage="TIDY_ATTR_DATAFLD - "/><phpsyntax constant="TIDY_ATTR_DATAPAGESIZE" usage="TIDY_ATTR_DATAPAGESIZE - "/><phpsyntax constant="TIDY_ATTR_DATASRC" usage="TIDY_ATTR_DATASRC - "/><phpsyntax constant="TIDY_ATTR_DATETIME" usage="TIDY_ATTR_DATETIME - "/><phpsyntax constant="TIDY_ATTR_DECLARE" usage="TIDY_ATTR_DECLARE - "/><phpsyntax constant="TIDY_ATTR_DEFER" usage="TIDY_ATTR_DEFER - "/><phpsyntax constant="TIDY_ATTR_DIR" usage="TIDY_ATTR_DIR - "/><phpsyntax constant="TIDY_ATTR_DISABLED" usage="TIDY_ATTR_DISABLED - "/><phpsyntax constant="TIDY_ATTR_ENCODING" usage="TIDY_ATTR_ENCODING - "/><phpsyntax constant="TIDY_ATTR_ENCTYPE" usage="TIDY_ATTR_ENCTYPE - "/><phpsyntax constant="TIDY_ATTR_FACE" usage="TIDY_ATTR_FACE - "/><phpsyntax constant="TIDY_ATTR_FOR" usage="TIDY_ATTR_FOR - "/><phpsyntax constant="TIDY_ATTR_FRAME" usage="TIDY_ATTR_FRAME - "/><phpsyntax constant="TIDY_ATTR_FRAMEBORDER" usage="TIDY_ATTR_FRAMEBORDER - "/><phpsyntax constant="TIDY_ATTR_FRAMESPACING" usage="TIDY_ATTR_FRAMESPACING - "/><phpsyntax constant="TIDY_ATTR_GRIDX" usage="TIDY_ATTR_GRIDX - "/><phpsyntax constant="TIDY_ATTR_GRIDY" usage="TIDY_ATTR_GRIDY - "/><phpsyntax constant="TIDY_ATTR_HEADERS" usage="TIDY_ATTR_HEADERS - "/><phpsyntax constant="TIDY_ATTR_HEIGHT" usage="TIDY_ATTR_HEIGHT - "/><phpsyntax constant="TIDY_ATTR_HREF" usage="TIDY_ATTR_HREF - "/><phpsyntax constant="TIDY_ATTR_HREFLANG" usage="TIDY_ATTR_HREFLANG - "/><phpsyntax constant="TIDY_ATTR_HSPACE" usage="TIDY_ATTR_HSPACE - "/><phpsyntax constant="TIDY_ATTR_HTTP_EQUIV" usage="TIDY_ATTR_HTTP_EQUIV - "/><phpsyntax constant="TIDY_ATTR_ID" usage="TIDY_ATTR_ID - "/><phpsyntax constant="TIDY_ATTR_ISMAP" usage="TIDY_ATTR_ISMAP - "/><phpsyntax constant="TIDY_ATTR_LABEL" usage="TIDY_ATTR_LABEL - "/><phpsyntax constant="TIDY_ATTR_LANG" usage="TIDY_ATTR_LANG - "/><phpsyntax constant="TIDY_ATTR_LANGUAGE" usage="TIDY_ATTR_LANGUAGE - "/><phpsyntax constant="TIDY_ATTR_LAST_MODIFIED" usage="TIDY_ATTR_LAST_MODIFIED - "/><phpsyntax constant="TIDY_ATTR_LAST_VISIT" usage="TIDY_ATTR_LAST_VISIT - "/><phpsyntax constant="TIDY_ATTR_LEFTMARGIN" usage="TIDY_ATTR_LEFTMARGIN - "/><phpsyntax constant="TIDY_ATTR_LINK" usage="TIDY_ATTR_LINK - "/><phpsyntax constant="TIDY_ATTR_LONGDESC" usage="TIDY_ATTR_LONGDESC - "/><phpsyntax constant="TIDY_ATTR_LOWSRC" usage="TIDY_ATTR_LOWSRC - "/><phpsyntax constant="TIDY_ATTR_MARGINHEIGHT" usage="TIDY_ATTR_MARGINHEIGHT - "/><phpsyntax constant="TIDY_ATTR_MARGINWIDTH" usage="TIDY_ATTR_MARGINWIDTH - "/><phpsyntax constant="TIDY_ATTR_MAXLENGTH" usage="TIDY_ATTR_MAXLENGTH - "/><phpsyntax constant="TIDY_ATTR_MEDIA" usage="TIDY_ATTR_MEDIA - "/><phpsyntax constant="TIDY_ATTR_METHOD" usage="TIDY_ATTR_METHOD - "/><phpsyntax constant="TIDY_ATTR_MULTIPLE" usage="TIDY_ATTR_MULTIPLE - "/><phpsyntax constant="TIDY_ATTR_NAME" usage="TIDY_ATTR_NAME - "/><phpsyntax constant="TIDY_ATTR_NOHREF" usage="TIDY_ATTR_NOHREF - "/><phpsyntax constant="TIDY_ATTR_NORESIZE" usage="TIDY_ATTR_NORESIZE - "/><phpsyntax constant="TIDY_ATTR_NOSHADE" usage="TIDY_ATTR_NOSHADE - "/><phpsyntax constant="TIDY_ATTR_NOWRAP" usage="TIDY_ATTR_NOWRAP - "/><phpsyntax constant="TIDY_ATTR_OBJECT" usage="TIDY_ATTR_OBJECT - "/><phpsyntax constant="TIDY_ATTR_PROFILE" usage="TIDY_ATTR_PROFILE - "/><phpsyntax constant="TIDY_ATTR_PROMPT" usage="TIDY_ATTR_PROMPT - "/><phpsyntax constant="TIDY_ATTR_RBSPAN" usage="TIDY_ATTR_RBSPAN - "/><phpsyntax constant="TIDY_ATTR_READONLY" usage="TIDY_ATTR_READONLY - "/><phpsyntax constant="TIDY_ATTR_REL" usage="TIDY_ATTR_REL - "/><phpsyntax constant="TIDY_ATTR_REV" usage="TIDY_ATTR_REV - "/><phpsyntax constant="TIDY_ATTR_RIGHTMARGIN" usage="TIDY_ATTR_RIGHTMARGIN - "/><phpsyntax constant="TIDY_ATTR_ROWS" usage="TIDY_ATTR_ROWS - "/><phpsyntax constant="TIDY_ATTR_ROWSPAN" usage="TIDY_ATTR_ROWSPAN - "/><phpsyntax constant="TIDY_ATTR_RULES" usage="TIDY_ATTR_RULES - "/><phpsyntax constant="TIDY_ATTR_SCHEME" usage="TIDY_ATTR_SCHEME - "/><phpsyntax constant="TIDY_ATTR_SCOPE" usage="TIDY_ATTR_SCOPE - "/><phpsyntax constant="TIDY_ATTR_SCROLLING" usage="TIDY_ATTR_SCROLLING - "/><phpsyntax constant="TIDY_ATTR_SELECTED" usage="TIDY_ATTR_SELECTED - "/><phpsyntax constant="TIDY_ATTR_SHAPE" usage="TIDY_ATTR_SHAPE - "/><phpsyntax constant="TIDY_ATTR_SHOWGRID" usage="TIDY_ATTR_SHOWGRID - "/><phpsyntax constant="TIDY_ATTR_SHOWGRIDX" usage="TIDY_ATTR_SHOWGRIDX - "/><phpsyntax constant="TIDY_ATTR_SHOWGRIDY" usage="TIDY_ATTR_SHOWGRIDY - "/><phpsyntax constant="TIDY_ATTR_SIZE" usage="TIDY_ATTR_SIZE - "/><phpsyntax constant="TIDY_ATTR_SPAN" usage="TIDY_ATTR_SPAN - "/><phpsyntax constant="TIDY_ATTR_SRC" usage="TIDY_ATTR_SRC - "/><phpsyntax constant="TIDY_ATTR_STANDBY" usage="TIDY_ATTR_STANDBY - "/><phpsyntax constant="TIDY_ATTR_START" usage="TIDY_ATTR_START - "/><phpsyntax constant="TIDY_ATTR_STYLE" usage="TIDY_ATTR_STYLE - "/><phpsyntax constant="TIDY_ATTR_SUMMARY" usage="TIDY_ATTR_SUMMARY - "/><phpsyntax constant="TIDY_ATTR_TABINDEX" usage="TIDY_ATTR_TABINDEX - "/><phpsyntax constant="TIDY_ATTR_TARGET" usage="TIDY_ATTR_TARGET - "/><phpsyntax constant="TIDY_ATTR_TEXT" usage="TIDY_ATTR_TEXT - "/><phpsyntax constant="TIDY_ATTR_TITLE" usage="TIDY_ATTR_TITLE - "/><phpsyntax constant="TIDY_ATTR_TOPMARGIN" usage="TIDY_ATTR_TOPMARGIN - "/><phpsyntax constant="TIDY_ATTR_TYPE" usage="TIDY_ATTR_TYPE - "/><phpsyntax constant="TIDY_ATTR_USEMAP" usage="TIDY_ATTR_USEMAP - "/><phpsyntax constant="TIDY_ATTR_VALIGN" usage="TIDY_ATTR_VALIGN - "/><phpsyntax constant="TIDY_ATTR_VALUE" usage="TIDY_ATTR_VALUE - "/><phpsyntax constant="TIDY_ATTR_VALUETYPE" usage="TIDY_ATTR_VALUETYPE - "/><phpsyntax constant="TIDY_ATTR_VERSION" usage="TIDY_ATTR_VERSION - "/><phpsyntax constant="TIDY_ATTR_VLINK" usage="TIDY_ATTR_VLINK - "/><phpsyntax constant="TIDY_ATTR_VSPACE" usage="TIDY_ATTR_VSPACE - "/><phpsyntax constant="TIDY_ATTR_WIDTH" usage="TIDY_ATTR_WIDTH - "/><phpsyntax constant="TIDY_ATTR_WRAP" usage="TIDY_ATTR_WRAP - "/><phpsyntax constant="TIDY_ATTR_XML_LANG" usage="TIDY_ATTR_XML_LANG - "/><phpsyntax constant="TIDY_ATTR_XML_SPACE" usage="TIDY_ATTR_XML_SPACE - "/><phpsyntax constant="TIDY_ATTR_XMLNS" usage="TIDY_ATTR_XMLNS - "/><phpsyntax constant="TIDY_NODETYPE_ROOT" usage="TIDY_NODETYPE_ROOT - "/><phpsyntax constant="TIDY_NODETYPE_DOCTYPE" usage="TIDY_NODETYPE_DOCTYPE - "/><phpsyntax constant="TIDY_NODETYPE_COMMENT" usage="TIDY_NODETYPE_COMMENT - "/><phpsyntax constant="TIDY_NODETYPE_PROCINS" usage="TIDY_NODETYPE_PROCINS - "/><phpsyntax constant="TIDY_NODETYPE_TEXT" usage="TIDY_NODETYPE_TEXT - "/><phpsyntax constant="TIDY_NODETYPE_START" usage="TIDY_NODETYPE_START - "/><phpsyntax constant="TIDY_NODETYPE_END" usage="TIDY_NODETYPE_END - "/><phpsyntax constant="TIDY_NODETYPE_STARTEND" usage="TIDY_NODETYPE_STARTEND - "/><phpsyntax constant="TIDY_NODETYPE_CDATA" usage="TIDY_NODETYPE_CDATA - "/><phpsyntax constant="TIDY_NODETYPE_SECTION" usage="TIDY_NODETYPE_SECTION - "/><phpsyntax constant="TIDY_NODETYPE_ASP" usage="TIDY_NODETYPE_ASP - "/><phpsyntax constant="TIDY_NODETYPE_JSTE" usage="TIDY_NODETYPE_JSTE - "/><phpsyntax constant="TIDY_NODETYPE_PHP" usage="TIDY_NODETYPE_PHP - "/><phpsyntax constant="TIDY_NODETYPE_XMLDECL" usage="TIDY_NODETYPE_XMLDECL - "/><phpsyntax constant="T_INCLUDE" usage="T_INCLUDE - "/><phpsyntax constant="T_INCLUDE_ONCE" usage="T_INCLUDE_ONCE - "/><phpsyntax constant="T_EVAL" usage="T_EVAL - "/><phpsyntax constant="T_REQUIRE" usage="T_REQUIRE - "/><phpsyntax constant="T_REQUIRE_ONCE" usage="T_REQUIRE_ONCE - "/><phpsyntax constant="T_LOGICAL_OR" usage="T_LOGICAL_OR - "/><phpsyntax constant="T_LOGICAL_XOR" usage="T_LOGICAL_XOR - "/><phpsyntax constant="T_LOGICAL_AND" usage="T_LOGICAL_AND - "/><phpsyntax constant="T_PRINT" usage="T_PRINT - "/><phpsyntax constant="T_PLUS_EQUAL" usage="T_PLUS_EQUAL - "/><phpsyntax constant="T_MINUS_EQUAL" usage="T_MINUS_EQUAL - "/><phpsyntax constant="T_MUL_EQUAL" usage="T_MUL_EQUAL - "/><phpsyntax constant="T_DIV_EQUAL" usage="T_DIV_EQUAL - "/><phpsyntax constant="T_CONCAT_EQUAL" usage="T_CONCAT_EQUAL - "/><phpsyntax constant="T_MOD_EQUAL" usage="T_MOD_EQUAL - "/><phpsyntax constant="T_AND_EQUAL" usage="T_AND_EQUAL - "/><phpsyntax constant="T_OR_EQUAL" usage="T_OR_EQUAL - "/><phpsyntax constant="T_XOR_EQUAL" usage="T_XOR_EQUAL - "/><phpsyntax constant="T_SL_EQUAL" usage="T_SL_EQUAL - "/><phpsyntax constant="T_SR_EQUAL" usage="T_SR_EQUAL - "/><phpsyntax constant="T_BOOLEAN_OR" usage="T_BOOLEAN_OR - "/><phpsyntax constant="T_BOOLEAN_AND" usage="T_BOOLEAN_AND - "/><phpsyntax constant="T_IS_EQUAL" usage="T_IS_EQUAL - "/><phpsyntax constant="T_IS_NOT_EQUAL" usage="T_IS_NOT_EQUAL - "/><phpsyntax constant="T_IS_IDENTICAL" usage="T_IS_IDENTICAL - "/><phpsyntax constant="T_IS_NOT_IDENTICAL" usage="T_IS_NOT_IDENTICAL - "/><phpsyntax constant="T_IS_SMALLER_OR_EQUAL" usage="T_IS_SMALLER_OR_EQUAL - "/><phpsyntax constant="T_IS_GREATER_OR_EQUAL" usage="T_IS_GREATER_OR_EQUAL - "/><phpsyntax constant="T_SL" usage="T_SL - "/><phpsyntax constant="T_SR" usage="T_SR - "/><phpsyntax constant="T_INC" usage="T_INC - "/><phpsyntax constant="T_DEC" usage="T_DEC - "/><phpsyntax constant="T_INT_CAST" usage="T_INT_CAST - "/><phpsyntax constant="T_DOUBLE_CAST" usage="T_DOUBLE_CAST - "/><phpsyntax constant="T_STRING_CAST" usage="T_STRING_CAST - "/><phpsyntax constant="T_ARRAY_CAST" usage="T_ARRAY_CAST - "/><phpsyntax constant="T_OBJECT_CAST" usage="T_OBJECT_CAST - "/><phpsyntax constant="T_BOOL_CAST" usage="T_BOOL_CAST - "/><phpsyntax constant="T_UNSET_CAST" usage="T_UNSET_CAST - "/><phpsyntax constant="T_NEW" usage="T_NEW - "/><phpsyntax constant="T_EXIT" usage="T_EXIT - "/><phpsyntax constant="T_IF" usage="T_IF - "/><phpsyntax constant="T_ELSEIF" usage="T_ELSEIF - "/><phpsyntax constant="T_ELSE" usage="T_ELSE - "/><phpsyntax constant="T_ENDIF" usage="T_ENDIF - "/><phpsyntax constant="T_LNUMBER" usage="T_LNUMBER - "/><phpsyntax constant="T_DNUMBER" usage="T_DNUMBER - "/><phpsyntax constant="T_STRING" usage="T_STRING - "/><phpsyntax constant="T_STRING_VARNAME" usage="T_STRING_VARNAME - "/><phpsyntax constant="T_VARIABLE" usage="T_VARIABLE - "/><phpsyntax constant="T_NUM_STRING" usage="T_NUM_STRING - "/><phpsyntax constant="T_INLINE_HTML" usage="T_INLINE_HTML - "/><phpsyntax constant="T_CHARACTER" usage="T_CHARACTER - "/><phpsyntax constant="T_BAD_CHARACTER" usage="T_BAD_CHARACTER - "/><phpsyntax constant="T_ENCAPSED_AND_WHITESPACE" usage="T_ENCAPSED_AND_WHITESPACE - "/><phpsyntax constant="T_CONSTANT_ENCAPSED_STRING" usage="T_CONSTANT_ENCAPSED_STRING - "/><phpsyntax constant="T_ECHO" usage="T_ECHO - "/><phpsyntax constant="T_DO" usage="T_DO - "/><phpsyntax constant="T_WHILE" usage="T_WHILE - "/><phpsyntax constant="T_ENDWHILE" usage="T_ENDWHILE - "/><phpsyntax constant="T_FOR" usage="T_FOR - "/><phpsyntax constant="T_ENDFOR" usage="T_ENDFOR - "/><phpsyntax constant="T_FOREACH" usage="T_FOREACH - "/><phpsyntax constant="T_ENDFOREACH" usage="T_ENDFOREACH - "/><phpsyntax constant="T_DECLARE" usage="T_DECLARE - "/><phpsyntax constant="T_ENDDECLARE" usage="T_ENDDECLARE - "/><phpsyntax constant="T_AS" usage="T_AS - "/><phpsyntax constant="T_SWITCH" usage="T_SWITCH - "/><phpsyntax constant="T_ENDSWITCH" usage="T_ENDSWITCH - "/><phpsyntax constant="T_CASE" usage="T_CASE - "/><phpsyntax constant="T_DEFAULT" usage="T_DEFAULT - "/><phpsyntax constant="T_BREAK" usage="T_BREAK - "/><phpsyntax constant="T_CONTINUE" usage="T_CONTINUE - "/><phpsyntax constant="T_OLD_FUNCTION" usage="T_OLD_FUNCTION - "/><phpsyntax constant="T_FUNCTION" usage="T_FUNCTION - "/><phpsyntax constant="T_CONST" usage="T_CONST - "/><phpsyntax constant="T_RETURN" usage="T_RETURN - "/><phpsyntax constant="T_USE" usage="T_USE - "/><phpsyntax constant="T_GLOBAL" usage="T_GLOBAL - "/><phpsyntax constant="T_STATIC" usage="T_STATIC - "/><phpsyntax constant="T_VAR" usage="T_VAR - "/><phpsyntax constant="T_UNSET" usage="T_UNSET - "/><phpsyntax constant="T_ISSET" usage="T_ISSET - "/><phpsyntax constant="T_EMPTY" usage="T_EMPTY - "/><phpsyntax constant="T_CLASS" usage="T_CLASS - "/><phpsyntax constant="T_EXTENDS" usage="T_EXTENDS - "/><phpsyntax constant="T_OBJECT_OPERATOR" usage="T_OBJECT_OPERATOR - "/><phpsyntax constant="T_DOUBLE_ARROW" usage="T_DOUBLE_ARROW - "/><phpsyntax constant="T_LIST" usage="T_LIST - "/><phpsyntax constant="T_ARRAY" usage="T_ARRAY - "/><phpsyntax constant="T_LINE" usage="T_LINE - "/><phpsyntax constant="T_FILE" usage="T_FILE - "/><phpsyntax constant="T_COMMENT" usage="T_COMMENT - "/><phpsyntax constant="T_ML_COMMENT" usage="T_ML_COMMENT - "/><phpsyntax constant="T_DOC_COMMENT" usage="T_DOC_COMMENT - "/><phpsyntax constant="T_OPEN_TAG" usage="T_OPEN_TAG - "/><phpsyntax constant="T_OPEN_TAG_WITH_ECHO" usage="T_OPEN_TAG_WITH_ECHO - "/><phpsyntax constant="T_CLOSE_TAG" usage="T_CLOSE_TAG - "/><phpsyntax constant="T_WHITESPACE" usage="T_WHITESPACE - "/><phpsyntax constant="T_START_HEREDOC" usage="T_START_HEREDOC - "/><phpsyntax constant="T_END_HEREDOC" usage="T_END_HEREDOC - "/><phpsyntax constant="T_DOLLAR_OPEN_CURLY_BRACES" usage="T_DOLLAR_OPEN_CURLY_BRACES - "/><phpsyntax constant="T_CURLY_OPEN" usage="T_CURLY_OPEN - "/><phpsyntax constant="T_PAAMAYIM_NEKUDOTAYIM" usage="T_PAAMAYIM_NEKUDOTAYIM - "/><phpsyntax constant="T_DOUBLE_COLON" usage="T_DOUBLE_COLON - "/><phpsyntax constant="ODBC_TYPE" usage="ODBC_TYPE - "/><phpsyntax constant="ODBC_BINMODE_PASSTHRU" usage="ODBC_BINMODE_PASSTHRU - "/><phpsyntax constant="ODBC_BINMODE_RETURN" usage="ODBC_BINMODE_RETURN - "/><phpsyntax constant="ODBC_BINMODE_CONVERT" usage="ODBC_BINMODE_CONVERT - "/><phpsyntax constant="SQL_ODBC_CURSORS" usage="SQL_ODBC_CURSORS - "/><phpsyntax constant="SQL_CUR_USE_DRIVER" usage="SQL_CUR_USE_DRIVER - "/><phpsyntax constant="SQL_CUR_USE_IF_NEEDED" usage="SQL_CUR_USE_IF_NEEDED - "/><phpsyntax constant="SQL_CUR_USE_ODBC" usage="SQL_CUR_USE_ODBC - "/><phpsyntax constant="SQL_CONCURRENCY" usage="SQL_CONCURRENCY - "/><phpsyntax constant="SQL_CONCUR_READ_ONLY" usage="SQL_CONCUR_READ_ONLY - "/><phpsyntax constant="SQL_CONCUR_LOCK" usage="SQL_CONCUR_LOCK - "/><phpsyntax constant="SQL_CONCUR_ROWVER" usage="SQL_CONCUR_ROWVER - "/><phpsyntax constant="SQL_CONCUR_VALUES" usage="SQL_CONCUR_VALUES - "/><phpsyntax constant="SQL_CURSOR_TYPE" usage="SQL_CURSOR_TYPE - "/><phpsyntax constant="SQL_CURSOR_FORWARD_ONLY" usage="SQL_CURSOR_FORWARD_ONLY - "/><phpsyntax constant="SQL_CURSOR_KEYSET_DRIVEN" usage="SQL_CURSOR_KEYSET_DRIVEN - "/><phpsyntax constant="SQL_CURSOR_DYNAMIC" usage="SQL_CURSOR_DYNAMIC - "/><phpsyntax constant="SQL_CURSOR_STATIC" usage="SQL_CURSOR_STATIC - "/><phpsyntax constant="SQL_KEYSET_SIZE" usage="SQL_KEYSET_SIZE - "/><phpsyntax constant="SQL_CHAR" usage="SQL_CHAR - "/><phpsyntax constant="SQL_VARCHAR" usage="SQL_VARCHAR - "/><phpsyntax constant="SQL_LONGVARCHAR" usage="SQL_LONGVARCHAR - "/><phpsyntax constant="SQL_DECIMAL" usage="SQL_DECIMAL - "/><phpsyntax constant="SQL_NUMERIC" usage="SQL_NUMERIC - "/><phpsyntax constant="SQL_BIT" usage="SQL_BIT - "/><phpsyntax constant="SQL_TINYINT" usage="SQL_TINYINT - "/><phpsyntax constant="SQL_SMALLINT" usage="SQL_SMALLINT - "/><phpsyntax constant="SQL_INTEGER" usage="SQL_INTEGER - "/><phpsyntax constant="SQL_BIGINT" usage="SQL_BIGINT - "/><phpsyntax constant="SQL_REAL" usage="SQL_REAL - "/><phpsyntax constant="SQL_FLOAT" usage="SQL_FLOAT - "/><phpsyntax constant="SQL_DOUBLE" usage="SQL_DOUBLE - "/><phpsyntax constant="SQL_BINARY" usage="SQL_BINARY - "/><phpsyntax constant="SQL_VARBINARY" usage="SQL_VARBINARY - "/><phpsyntax constant="SQL_LONGVARBINARY" usage="SQL_LONGVARBINARY - "/><phpsyntax constant="SQL_DATE" usage="SQL_DATE - "/><phpsyntax constant="SQL_TIME" usage="SQL_TIME - "/><phpsyntax constant="SQL_TIMESTAMP" usage="SQL_TIMESTAMP - "/><phpsyntax constant="SQL_TYPE_DATE" usage="SQL_TYPE_DATE - "/><phpsyntax constant="SQL_TYPE_TIME" usage="SQL_TYPE_TIME - "/><phpsyntax constant="SQL_TYPE_TIMESTAMP" usage="SQL_TYPE_TIMESTAMP - "/><phpsyntax constant="SQL_BEST_ROWID" usage="SQL_BEST_ROWID - "/><phpsyntax constant="SQL_ROWVER" usage="SQL_ROWVER - "/><phpsyntax constant="SQL_SCOPE_CURROW" usage="SQL_SCOPE_CURROW - "/><phpsyntax constant="SQL_SCOPE_TRANSACTION" usage="SQL_SCOPE_TRANSACTION - "/><phpsyntax constant="SQL_SCOPE_SESSION" usage="SQL_SCOPE_SESSION - "/><phpsyntax constant="SQL_NO_NULLS" usage="SQL_NO_NULLS - "/><phpsyntax constant="SQL_NULLABLE" usage="SQL_NULLABLE - "/><phpsyntax constant="SQL_INDEX_UNIQUE" usage="SQL_INDEX_UNIQUE - "/><phpsyntax constant="SQL_INDEX_ALL" usage="SQL_INDEX_ALL - "/><phpsyntax constant="SQL_ENSURE" usage="SQL_ENSURE - "/><phpsyntax constant="SQL_QUICK" usage="SQL_QUICK - "/><phpsyntax constant="DC_MICROSOFT" usage="DC_MICROSOFT - "/><phpsyntax constant="DC_BORLAND" usage="DC_BORLAND - "/><phpsyntax constant="DC_CALL_CDECL" usage="DC_CALL_CDECL - "/><phpsyntax constant="DC_CALL_STD" usage="DC_CALL_STD - "/><phpsyntax constant="DC_RETVAL_MATH4" usage="DC_RETVAL_MATH4 - "/><phpsyntax constant="DC_RETVAL_MATH8" usage="DC_RETVAL_MATH8 - "/><phpsyntax constant="DC_CALL_STD_BO" usage="DC_CALL_STD_BO - "/><phpsyntax constant="DC_CALL_STD_MS" usage="DC_CALL_STD_MS - "/><phpsyntax constant="DC_CALL_STD_M8" usage="DC_CALL_STD_M8 - "/><phpsyntax constant="DC_FLAG_ARGPTR" usage="DC_FLAG_ARGPTR - "/><phpsyntax constant="XDIFF_PATCH_NORMAL" usage="XDIFF_PATCH_NORMAL - "/><phpsyntax constant="XDIFF_PATCH_REVERSE" usage="XDIFF_PATCH_REVERSE - "/><phpsyntax constant="XML_ERROR_NONE" usage="XML_ERROR_NONE - "/><phpsyntax constant="XML_ERROR_NO_MEMORY" usage="XML_ERROR_NO_MEMORY - "/><phpsyntax constant="XML_ERROR_SYNTAX" usage="XML_ERROR_SYNTAX - "/><phpsyntax constant="XML_ERROR_NO_ELEMENTS" usage="XML_ERROR_NO_ELEMENTS - "/><phpsyntax constant="XML_ERROR_INVALID_TOKEN" usage="XML_ERROR_INVALID_TOKEN - "/><phpsyntax constant="XML_ERROR_UNCLOSED_TOKEN" usage="XML_ERROR_UNCLOSED_TOKEN - "/><phpsyntax constant="XML_ERROR_PARTIAL_CHAR" usage="XML_ERROR_PARTIAL_CHAR - "/><phpsyntax constant="XML_ERROR_TAG_MISMATCH" usage="XML_ERROR_TAG_MISMATCH - "/><phpsyntax constant="XML_ERROR_DUPLICATE_ATTRIBUTE" usage="XML_ERROR_DUPLICATE_ATTRIBUTE - "/><phpsyntax constant="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" usage="XML_ERROR_JUNK_AFTER_DOC_ELEMENT - "/><phpsyntax constant="XML_ERROR_PARAM_ENTITY_REF" usage="XML_ERROR_PARAM_ENTITY_REF - "/><phpsyntax constant="XML_ERROR_UNDEFINED_ENTITY" usage="XML_ERROR_UNDEFINED_ENTITY - "/><phpsyntax constant="XML_ERROR_RECURSIVE_ENTITY_REF" usage="XML_ERROR_RECURSIVE_ENTITY_REF - "/><phpsyntax constant="XML_ERROR_ASYNC_ENTITY" usage="XML_ERROR_ASYNC_ENTITY - "/><phpsyntax constant="XML_ERROR_BAD_CHAR_REF" usage="XML_ERROR_BAD_CHAR_REF - "/><phpsyntax constant="XML_ERROR_BINARY_ENTITY_REF" usage="XML_ERROR_BINARY_ENTITY_REF - "/><phpsyntax constant="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" usage="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF - "/><phpsyntax constant="XML_ERROR_MISPLACED_XML_PI" usage="XML_ERROR_MISPLACED_XML_PI - "/><phpsyntax constant="XML_ERROR_UNKNOWN_ENCODING" usage="XML_ERROR_UNKNOWN_ENCODING - "/><phpsyntax constant="XML_ERROR_INCORRECT_ENCODING" usage="XML_ERROR_INCORRECT_ENCODING - "/><phpsyntax constant="XML_ERROR_UNCLOSED_CDATA_SECTION" usage="XML_ERROR_UNCLOSED_CDATA_SECTION - "/><phpsyntax constant="XML_ERROR_EXTERNAL_ENTITY_HANDLING" usage="XML_ERROR_EXTERNAL_ENTITY_HANDLING - "/><phpsyntax constant="XML_OPTION_CASE_FOLDING" usage="XML_OPTION_CASE_FOLDING - "/><phpsyntax constant="XML_OPTION_TARGET_ENCODING" usage="XML_OPTION_TARGET_ENCODING - "/><phpsyntax constant="XML_OPTION_SKIP_TAGSTART" usage="XML_OPTION_SKIP_TAGSTART - "/><phpsyntax constant="XML_OPTION_SKIP_WHITE" usage="XML_OPTION_SKIP_WHITE - "/><phpsyntax constant="XSLT_OPT_SILENT" usage="XSLT_OPT_SILENT - "/><phpsyntax constant="XSLT_SABOPT_PARSE_PUBLIC_ENTITIES" usage="XSLT_SABOPT_PARSE_PUBLIC_ENTITIES - "/><phpsyntax constant="XSLT_SABOPT_DISABLE_ADDING_META" usage="XSLT_SABOPT_DISABLE_ADDING_META - "/><phpsyntax constant="XSLT_SABOPT_DISABLE_STRIPPING" usage="XSLT_SABOPT_DISABLE_STRIPPING - "/><phpsyntax constant="XSLT_SABOPT_IGNORE_DOC_NOT_FOUND" usage="XSLT_SABOPT_IGNORE_DOC_NOT_FOUND - "/><phpsyntax constant="XSLT_ERR_UNSUPPORTED_SCHEME" usage="XSLT_ERR_UNSUPPORTED_SCHEME - "/><phpsyntax constant="FORCE_GZIP" usage="FORCE_GZIP - "/><phpsyntax constant="FORCE_DEFLATE" usage="FORCE_DEFLATE - "/></PHPStandardSyntax>